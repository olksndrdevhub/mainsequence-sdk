{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction to the Main Sequence Python SDK","text":"<p>The Main Sequence Python SDK is a powerful set of client libraries designed to facilitate interaction with Main Sequence systems using Python. The SDK covers four main components:</p> <ol> <li>TDAG: A Time Series Data Orchestration and Scheduling Tool.</li> <li>Client: The Main Sequence client for interacting with the Main Sequence API.</li> <li>VirtualFundBuilder: A collection of classes and methods to quickly build portfolios and interact with our AI agents.</li> <li>Examples: A comprehensive collection of examples demonstrating how to build portfolios and interact with our AI agents.</li> <li>LLM Instructions for Time Series: A set of instructions available to embed into AI workflows</li> </ol> <p>We strongly encourage you to go through our examples. We have built the examples as individual Jupyter notebooks that explain the SDK through use cases. Since most platform usage involves a combination of operations, this is the most intuitive way to learn about Main Sequence.</p>"},{"location":"#how-the-documentation-is-organized","title":"How the Documentation is Organized","text":"<p>The documentation follows the same structure as the SDK. Within each topic, we delve deeper into the logic and usage.</p> <p>Additionally, we provide an extensive set of examples within the repository here: Example Repository.</p> <p>The examples section is organized by use-case rather than by individual libraries.</p> <p>Recordings of our previous bootcamps will be available in our youtube channel: Example Repository.</p>"},{"location":"about/","title":"About","text":"<p>TDAG is proprietary software that is part of the MainSequence SDK and is developed for use only under an explicit license agreement. The details of the license are as follows:</p> <p>MainSequence GmbH SDK License Agreement This License Agreement (the \"License\") governs the use, modification, and distribution of the software provided by MainSequence GmbH (the \"Licensor\"). The software (the \"Software\") is provided to you under the terms of this License. By using the Software, you agree to the terms of this License.</p> <p>TERMS AND CONDITIONS</p> <ol> <li>Definitions    \"Personal Use\": Use by an individual for personal purposes that are not connected to any business, organization, or    commercial activity.    \"Internal Use\": Use within a business, organization, or other entity, provided it is not made accessible to third    parties or used for commercial purposes.    \"Commercial Use\": Use of the Software in exchange for monetary or other compensation, including hosting, offering    Software as a service, selling the Software, or using it in a product or service for sale.    \"License Agreement\": The legally binding agreement between the Licensor and the licensee (you), subject to the terms    outlined in this License.</li> <li>Grant of License    1.1 Personal and Internal Use    The Licensor grants you a limited, non-exclusive, non-transferable, revocable license to use and modify the Software    for personal or internal use only, provided that such use is strictly subject to this License Agreement and continues    only while the License Agreement remains in effect.    Upon termination of this License Agreement, all rights to use the Software for personal or internal purposes shall be    immediately revoked, and you must cease all use of the Software.    1.2 Modification    You are permitted to modify the Software solely for your own personal or internal use, subject to the restrictions    outlined in this License Agreement.    You are not permitted to distribute, sublicense, or otherwise transfer modified or unmodified versions of the    Software to any third party.    1.3 Prohibited Redistribution    You may not redistribute, sublicense, sell, lease, rent, or otherwise transfer the Software, whether in its original    form or as modified by you, to any third party.    Any attempt to distribute or transfer the Software in any way, without explicit permission from MainSequence GmbH, is    strictly prohibited.</li> <li>Prohibition of Commercial Use    The Software may not be used for any commercial purposes without obtaining a separate commercial license from    MainSequence GmbH.    Examples of prohibited commercial use include, but are not limited to:    Hosting or offering the Software as a service to others, either modified or unmodified.    Using the Software as part of a commercial product or service provided to customers for a fee.    Using the Software in any production environment that generates income, directly or indirectly, from its use.</li> <li>Termination    This License Agreement will automatically terminate if you fail to comply with any of its terms.    Upon termination of this License, you must immediately cease all use of the Software, destroy all copies (modified or    unmodified), and remove the Software from any devices or systems on which it is installed.    MainSequence GmbH reserves the right to terminate this License at its discretion for any violation of its terms or    for any other reason.</li> <li>Commercial License    If you wish to use the Software for commercial purposes, you must contact MainSequence GmbH to negotiate and obtain a    separate commercial license. The terms of the commercial license, including any fees, will be negotiated separately    from this License Agreement.    Without a valid commercial license, you are strictly prohibited from using the Software for any commercial activity.</li> <li> <p>Disclaimer of Warranty    THE SOFTWARE IS PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE    WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NONINFRINGEMENT. IN NO EVENT SHALL MAINSEQUENCE    GMBH OR THE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    TORT, OR OTHERWISE, ARISING FROM, OUT OF, OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE    SOFTWARE.</p> </li> <li> <p>Limitation of Liability    IN NO EVENT SHALL MAINSEQUENCE GMBH BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES    ARISING OUT OF THE USE OR INABILITY TO USE THE SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p> </li> <li> <p>Governing Law    This License Agreement shall be governed by and construed in accordance with the laws of the jurisdiction where MainSequence GmbH is located, without regard to its conflict of law provisions.</p> </li> </ol>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"contact_and_support/","title":"Contact &amp; Support","text":""},{"location":"llm-instructions-time-series/","title":"Llm instructions time series","text":"<p>from mainsequence.tdag import APITimeSerie</p>"},{"location":"llm-instructions-time-series/#timeserie-implementation-guidelines","title":"TimeSerie Implementation Guidelines","text":"<p>Main Sequence Platform</p> <p>These guidelines cover the essential configuration and best-practice patterns for extending the <code>TimeSerie</code> class on the Main Sequence platform.</p> <p>Tip \u2014 docstrings first Always check the most recent <code>TimeSerie</code> source for updated docstrings. If they differ from this document, treat the source code as the single source of truth.</p> <p>Tip \u2014 docstrings first import mainsequence.client as ms_client for cleare readability </p>"},{"location":"llm-instructions-time-series/#1-required-methods","title":"1\u00a0\u00a0Required methods","text":""},{"location":"llm-instructions-time-series/#__init__","title":"<code>__init__</code>","text":"<p>Best practices</p> <ul> <li>Decorate the constructor with <code>@TimeSerie._post_init_routines</code>.</li> <li>Accept only these argument types: <code>str</code>, <code>int</code>, <code>list</code>, Pydantic model, or a list of Pydantic models.</li> <li>Instantiate any dependent <code>TimeSerie</code> objects inside the constructor.</li> <li>If the series receives a <code>ModelList</code> argument such as <code>asset_list</code>, add its name to <code>local_kwargs_to_ignore</code>.</li> <li><code>TimeSeries</code> can have direct dependencies which are initialized directly in the construction with its imported class or <code>APITimeSeries</code> which should be also initialized in the construction but are initialized only with <code>local_hash_id</code> and <code>data_source_id</code></li> <li>You may override the class constant <code>OFFSET_START</code> to set the earliest    permitted timestamp.</li> </ul>"},{"location":"llm-instructions-time-series/#example-of-a-timeserie-direct-dependency","title":"Example of A <code>TimeSerie</code> direct dependency","text":"<pre><code>from mainsequence.tdag import TimeSerie\nclass PriceSerie(TimeSerie):\n    @TimeSerie._post_init_routines\n    def __init__(self, arg1: str, *args, **kwargs):\n        self.arg1 = arg1\n        super().__init__(*args, **kwargs)\n\nclass ReturnSerie(TimeSerie):\n    @TimeSerie._post_init_routines\n    def __init__(self, arg1: str, *args, **kwargs):\n        self.price_serie = PriceSerie(arg1=arg1, *args, **kwargs)\n        super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"llm-instructions-time-series/#example-of-a-apitimeserie-direct-dependency","title":"Example of A <code>APITimeSerie</code> direct dependency","text":"<pre><code>from mainsequence.tdag import APITimeSerie\nclass ReturnSerie(TimeSerie):\n    @TimeSerie._post_init_routines\n    def __init__(self, arg1: str, *args, **kwargs):\n        self.price_serie = APITimeSerie(data_source_id=1,local_hash_id=\"local_hash_id_ghjkdf8347y5342\")\n        super().__init__(*args, **kwargs)\n</code></pre>"},{"location":"llm-instructions-time-series/#code-reference","title":"code reference","text":"<pre><code>def __init__(\n        self,\n        init_meta: Optional[TimeSerieInitMeta] = None,\n        build_meta_data: Optional[dict] = None,\n        local_kwargs_to_ignore: Optional[List[str]] = None,\n        *args,\n        **kwargs\n):\n    \"\"\"\n    Create a TimeSerie instance and provision its storage in the Main Sequence Data Engine.\n\n    This initializer prepares all metadata and configuration for a new time series, then:\n      1. Computes a unique table identifier by hashing all arguments **except**\n         `init_meta`, `build_meta_data`, and `local_kwargs_to_ignore`.\n      2. Computes a separate `local_hash_id` (and corresponding LocalTimeSerie) by\n         hashing the same inputs, but omitting any keys listed in `local_kwargs_to_ignore`.\n      3. Applies any `@TimeSerie._post_init_routines` decorators after setup.\n\n    Argument types must be one of:\n      - `str`, `int`, `list`,\n      - Pydantic model instances or lists thereof.\n\n    You may override the class constant `OFFSET_START` to define the earliest\n    timestamp into which new data will be inserted.\n\n    Parameters\n    ----------\n    init_meta : TimeSerieInitMeta, optional\n        Initial metadata for this time series (e.g. name, description).\n    build_meta_data : dict, optional\n        Metadata recorded during the build process (e.g. version, source tags).\n    local_kwargs_to_ignore : list of str, optional\n        Names of keyword args that should be excluded when computing `local_hash_id`.\n    *args\n        Positional arguments used to further parameterize the series.\n    **kwargs\n        Keyword arguments used to further parameterize the series.\n    \"\"\"\n</code></pre>"},{"location":"llm-instructions-time-series/#update","title":"update","text":"<p>Best practices</p> <ul> <li>Support both first-time ingestions and incremental updates.</li> <li>Dual-index tables ( <code>time_index</code>, <code>unique_identifier</code> ) do not require two   separate code paths as <code>update_statistics.unique_identifier</code> already references   <code>OFFSET_START</code>. for single-index get the last update from <code>update_statistics.get_max_latest_value</code></li> <li>Use <code>self.get_df_between_dates(\u2026)</code> to read from other time series;   for dual-index reads, prefer <code>unique_identifier_range_map</code>.</li> <li>Return a DataFrame and nothing else.</li> <li>The engine never calls <code>update()</code> directly, but every subclass must implement it.</li> </ul> <p>Functional contract (summary)</p> <ul> <li>For single-index series: fetch rows where <code>time_index</code> is greater than the   stored <code>max_time</code>.</li> <li>For dual-index series: fetch rows where <code>time_index</code> is greater than the   per-identifier checkpoint in <code>max_time_per_id</code>.</li> <li>All ingested <code>time_index</code> values must be UTC-aware <code>datetime</code>.</li> <li>Column names must be lowercase; value columns must not contain raw   <code>datetime</code> objects (store integers such as Unix epochs instead).</li> </ul> <pre><code>class DateInfo(TypedDict, total=False):\n    start_date: Optional[datetime.datetime]\n    start_date_operand: Optional[str]\n    end_date: Optional[datetime.datetime]\n    end_date_operand: Optional[str]\n\nUniqueIdentifierRangeMap = Dict[str, DateInfo]\n\nclass TimeSerie:\n            def get_df_between_dates(\n            self,\n            start_date: Union[datetime.datetime, None] = None,\n            end_date: Union[datetime.datetime, None] = None,\n            unique_identifier_list: Union[None, list] = None,\n            great_or_equal: bool = True,\n            less_or_equal: bool = True,\n            unique_identifier_range_map: Optional[UniqueIdentifierRangeMap] = None,\n    ) -&gt; pd.DataFrame:\n        \"\"\"\n        Retrieve rows from this TimeSerie whose `time_index` (and optional `unique_identifier`) fall within the specified date ranges.\n\n        **Note:** If `unique_identifier_range_map` is provided, **all** other filters\n        (`start_date`, `end_date`, `unique_identifier_list`, `great_or_equal`, `less_or_equal`)\n        are ignored, and only the per-identifier ranges in `unique_identifier_range_map` apply.\n\n        Filtering logic (when `unique_identifier_range_map` is None):\n          - If `start_date` is provided, include rows where\n            `time_index &gt; start_date` (if `great_or_equal=False`)\n            or `time_index &gt;= start_date` (if `great_or_equal=True`).\n          - If `end_date` is provided, include rows where\n            `time_index &lt; end_date` (if `less_or_equal=False`)\n            or `time_index &lt;= end_date` (if `less_or_equal=True`).\n          - If `unique_identifier_list` is provided, only include rows whose\n            `unique_identifier` is in that list.\n\n        Filtering logic (when `unique_identifier_range_map` is provided):\n          - For each `unique_identifier`, apply its own `start_date`/`end_date`\n            filters using the specified operands (`\"&gt;\"`, `\"&gt;=\"`, `\"&lt;\"`, `\"&lt;=\"`):\n            {\n              &lt;uid&gt;: {\n                \"start_date\": datetime,\n                \"start_date_operand\": \"&gt;=\" or \"&gt;\",\n                \"end_date\": datetime,\n                \"end_date_operand\": \"&lt;=\" or \"&lt;\"\n              },\n              ...\n            }\n\n        Parameters\n        ----------\n        start_date : datetime.datetime or None\n            Global lower bound for `time_index`. Ignored if `unique_identifier_range_map` is provided.\n        end_date : datetime.datetime or None\n            Global upper bound for `time_index`. Ignored if `unique_identifier_range_map` is provided.\n        unique_identifier_list : list or None\n            If provided, only include rows matching these IDs. Ignored if `unique_identifier_range_map` is provided.\n        great_or_equal : bool, default True\n            If True, use `&gt;=` when filtering by `start_date`; otherwise use `&gt;`. Ignored if `unique_identifier_range_map` is provided.\n        less_or_equal : bool, default True\n            If True, use `&lt;=` when filtering by `end_date`; otherwise use `&lt;`. Ignored if `unique_identifier_range_map` is provided.\n        unique_identifier_range_map : UniqueIdentifierRangeMap or None\n            Mapping of specific `unique_identifier` keys to their own sub-filters. When provided, this is the sole filter applied.\n\n        Returns\n        -------\n        pd.DataFrame\n            A DataFrame containing rows that satisfy the combined time and identifier filters.\n        \"\"\"\n</code></pre>"},{"location":"llm-instructions-time-series/#code-reference_1","title":"code reference","text":"<pre><code>    def update(self, update_statistics: DataUpdates) -&gt; pd.DataFrame:\n        \"\"\"\n        Fetch and ingest only the new rows for this TimeSerie based on prior update checkpoints.\n\n        DataUpdates provides the last-ingested positions:\n          - For a single-index series (time_index only), `update_statistics.max_time` is either:\n              - None: no prior data\u2014fetch all available rows.\n              - a datetime: fetch rows where `time_index &gt; max_time`.\n          - For a dual-index series (time_index, unique_identifier), `update_statistics.max_time_per_id` is either:\n              - None: single-index behavior applies.\n              - dict[str, datetime]: for each `unique_identifier` (matching `Asset.unique_identifier`), fetch rows where \n                `time_index &gt; max_time_per_id[unique_identifier]`.\n\n        Requirements:\n          - `time_index` **must** be a `datetime.datetime` instance with UTC timezone.\n          - Column names **must** be all lowercase.\n          - No column values may be Python `datetime` objects; if date/time storage is needed, convert to integer\n            timestamps (e.g., UNIX epoch in seconds or milliseconds).\n\n        After retrieving the incremental rows, this method inserts or upserts them into the Main Sequence Data Engine.\n\n        Parameters\n        ----------\n        update_statistics : DataUpdates\n            Object capturing the previous update state. Must expose:\n              - `max_time` (datetime | None)\n              - `max_time_per_id` (dict[str, datetime] | None)\n\n        Returns\n        -------\n        pd.DataFrame\n            A DataFrame containing only the newly added or updated records.\n        \"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"llm-instructions-time-series/#_get_column_metadata-listcolumnmetadata-recommended","title":"<code>_get_column_metadata() \u2192 list[ColumnMetaData]</code> (recommended)","text":"<p>While this method is not obligatory is also a best practice to have as it helps the Main Sequence Data Engine. Return a list that documents each column\u2019s name, data type, label, and description. This enriches downstream applications and is strongly encouraged for every new series.</p> <pre><code>    def _get_column_metadata(self)-&gt;list[ColumnMetaData]:\n        \"\"\"\n        This Method should return a list for ColumnMetaData to add extra context to each time series\n        Examples:\n            from mainsequence.client.models_tdag import ColumnMetaData\n        columns_metadata = [ColumnMetaData(column_name=\"instrument\",\n                                          dtype=\"str\",\n                                          label=\"Instrument\",\n                                          description=(\n                                              \"Unique identifier provided by Valmer; it\u2019s a composition of the \"\n                                              \"columns `tv_emisora_serie`, and is also used as a ticker for custom \"\n                                              \"assets in Valmer.\"\n                                          )\n                                          ),\n                            ColumnMetaData(column_name=\"currency\",\n                                           dtype=\"str\",\n                                           label=\"Currency\",\n                                           description=(\n                                               \"Corresponds to  code for curries be aware this may not match Figi Currency assets\"\n                                           )\n                                           ),\n\n                            ]\n\n\n        Returns:\n\n        \"\"\"\n</code></pre>"},{"location":"llm-instructions-time-series/#2-conditionally-required-methods","title":"2  Conditionally Required Methods","text":""},{"location":"llm-instructions-time-series/#_get_asset_list-optionallistasset","title":"<code>_get_asset_list() \u2192 Optional[List[Asset]]</code>","text":"<p>Implement this method only when both conditions hold:</p> <ol> <li>The series uses the dual index <code>(time_index, unique_identifier)</code>.</li> <li>No <code>asset_list</code> was provided in the constructor.</li> </ol> <p>Guidelines</p> <ul> <li>Prefer passing an asset category in <code>__init__</code>; compute the concrete list here.</li> <li>If <code>self.asset_list</code> exists, simply return it; otherwise assemble the list   dynamically (for example, from an <code>AssetCategory</code>).</li> </ul>"},{"location":"llm-instructions-time-series/#code-reference_2","title":"Code Reference","text":"<pre><code>    def _get_asset_list(self) -&gt; Optional[List[\"Asset\"]]:\n\n        \"\"\"\n        Provide the list of assets that this TimeSerie should include when updating.\n\n        By default, this method returns `self.asset_list` if defined.\n        Subclasses _must_ override this method when no `asset_list` attribute was set\n        during initialization, to supply a dynamic list of assets for update_statistics.\n\n        Use Case:\n          - For category-based series, return all Asset unique_identifiers in a given category\n            (e.g., `AssetCategory(unique_identifier=\"investable_assets\")`), so that only those\n            assets are updated in this TimeSerie.\n\n        Returns\n        -------\n        list or None\n            - A list of asset unique_identifiers to include in the update.\n            - `None` if no filtering by asset is required (update all assets by default).\n        \"\"\"\n        if hasattr(self, \"asset_list\"):\n            return self.asset_list\n\n        return None\n</code></pre>"},{"location":"llm-instructions-time-series/#3-creating-a-markettimeserie","title":"3  Creating a <code>MarketTimeSerie</code>","text":"<p>A <code>MarketTimeSerie</code> is a registry entry that exposes a <code>TimeSerie</code> in the Markets catalogue with a clean, user-friendly identifier. Create (or update) one whenever either of the following is true:</p> <ul> <li>The <code>TimeSerie</code> has an <code>asset_list</code> and should be easy to discover in the   Markets UI / API.</li> <li>The series is macro-level (factor, index, benchmark, etc.) and benefits from a   human-readable name.</li> </ul> <p>The preferred implementation site is the hook <code>_run_post_update_routines(self, error_on_last_update: bool, update_statistics: DataUpdates)</code>, which executes immediately after each successful <code>update()</code>.</p>"},{"location":"llm-instructions-time-series/#generic-pattern","title":"Generic pattern","text":"<pre><code>import mainsequence.client as ms_client\nfrom mainsequence.tdag import TimeSerie\nclass YourTimeSerie(TimeSerie):\n    ...\n\n    def _run_post_update_routines(\n        self,\n        error_on_last_update: bool,\n        update_statistics: DataUpdates,\n    ) -&gt; None:\n        \"\"\"\n        Register\u2014or refresh\u2014a MarketsTimeSeriesDetails record so this\n        TimeSerie is discoverable in the Markets platform.\n        \"\"\"\n        if error_on_last_update:      # Skip registration if the update failed\n            return\n\n        UNIQUE_ID    = \"&lt;your_unique_snake_case_id&gt;\"          # e.g. \"sp500_total_return\"\n        FREQUENCY_ID = ms_client.DataFrequency.one_d          # pick the correct enum\n        DESCRIPTION  = (\n            \"Plain-English description of what the data represents and \"\n            \"its provenance (source, methodology, units).\"\n        )\n\n        try:\n            mts = ms_client.MarketsTimeSeriesDetails.get(unique_identifier=UNIQUE_ID)\n\n            # Re-link if this TimeSerie was rebuilt and now has a new LocalTimeSerie\n            if mts.related_local_time_serie.id != self.local_time_serie.id:\n                mts.patch(related_local_time_serie__id=self.local_time_serie.id)\n\n        except ms_client.DoesNotExist:\n            ms_client.MarketsTimeSeriesDetails.update_or_create(\n                unique_identifier            = UNIQUE_ID,\n                related_local_time_serie__id = self.local_time_serie.id,\n                data_frequency_id            = FREQUENCY_ID,\n                description                  = DESCRIPTION,\n            )\n</code></pre>"},{"location":"llm-instructions-time-series/#4-data-retrieval-helper","title":"4  Data Retrieval Helper","text":"<p>Always use <code>get_df_between_dates(\u2026)</code> for inter-series reads. For dual-index filters, supply <code>unique_identifier_range_map</code> to achieve per-identifier date windows.</p>"},{"location":"llm-instructions-time-series/#5-general-conventions","title":"5  General Conventions","text":"<ul> <li>Column names: lowercase only.  </li> <li><code>time_index</code>: timezone-aware <code>datetime</code> in UTC.  </li> <li>Value-column datetimes: store as integers (e.g. Unix epoch).  </li> <li>Keep constructors minimal; move complex wiring into separate factories.  </li> <li>Provide thorough unit tests for constructor logic, <code>update</code>, and any   transformation utilities.</li> </ul>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/logconf/","title":"Logconf","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/logconf/#mainsequence.logconf","title":"<code>mainsequence.logconf</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/logconf/#mainsequence.logconf.build_application_logger","title":"<code>build_application_logger(application_name='ms-sdk', **metadata)</code>","text":"<p>Create a logger that logs to console and file in JSON format.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/logconf/#mainsequence.logconf.extract_from_record","title":"<code>extract_from_record(_, __, event_dict)</code>","text":"<p>Extract thread and process names and add them to the event dict.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/ai/","title":"Ai","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/ai/#mainsequence.client.ai","title":"<code>mainsequence.client.ai</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/base/","title":"Base","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/base/#mainsequence.client.base","title":"<code>mainsequence.client.base</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/base/#mainsequence.client.base.BaseObjectOrm","title":"<code>BaseObjectOrm</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/base/#mainsequence.client.base.BaseObjectOrm.filter","title":"<code>filter(timeout=None, **kwargs)</code>  <code>classmethod</code>","text":"<p>Fetches all pages from a DRF-paginated endpoint. Accumulates results from each page until 'next' is None.</p> <p>Returns a list of <code>cls</code> objects (not just one page).</p> <p>DRF's typical paginated response looks like:     {       \"count\": ,       \"next\": ,       \"previous\": ,       \"results\": [ ...items... ]     }"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/base/#mainsequence.client.base.BaseObjectOrm.get","title":"<code>get(pk=None, timeout=None, **filters)</code>  <code>classmethod</code>","text":"<p>Retrieves exactly one object by primary key: GET /base_url// Raises <code>DoesNotExist</code> if 404 or the response is empty. Raises Exception if multiple or unexpected data is returned."},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_helpers/","title":"Models helpers","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_helpers/#mainsequence.client.models_helpers","title":"<code>mainsequence.client.models_helpers</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_helpers/#mainsequence.client.models_helpers.AccountLatestHoldings","title":"<code>AccountLatestHoldings</code>","text":"<p>               Bases: <code>AccountHistoricalHoldingsMixin</code>, <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p> <p>Same as Account HistoricalHoldings but Does not include related account</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_helpers/#mainsequence.client.models_helpers.AssetCategory","title":"<code>AssetCategory</code>","text":"<p>               Bases: <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_helpers/#mainsequence.client.models_helpers.AssetCategory.append_assets","title":"<code>append_assets(asset_ids)</code>","text":"<p>Append the given asset IDs to this category. Expects a payload: {\"assets\": [, , ...]}"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_helpers/#mainsequence.client.models_helpers.AssetCategory.remove_assets","title":"<code>remove_assets(asset_ids)</code>","text":"<p>Remove the given asset IDs from this category. Expects a payload: {\"assets\": [, , ...]}"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_helpers/#mainsequence.client.models_helpers.AssetMixin","title":"<code>AssetMixin</code>","text":"<p>               Bases: <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_helpers/#mainsequence.client.models_helpers.AssetMixin.filter_with_asset_class","title":"<code>filter_with_asset_class(timeout=None, include_relationship_details_depth=None, *args, **kwargs)</code>  <code>classmethod</code>","text":"<p>Filters assets and returns instances with their correct asset class,</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_helpers/#mainsequence.client.models_helpers.AssetMixin.pretty_print","title":"<code>pretty_print()</code>","text":"<p>Print all asset properties in a neat, aligned table.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_helpers/#mainsequence.client.models_helpers.AssetTranslationTable","title":"<code>AssetTranslationTable</code>","text":"<p>               Bases: <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p> <p>Mirrors the Django model 'AssetTranslationTableModel' in the backend.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_helpers/#mainsequence.client.models_helpers.AssetTranslationTable.add_rules","title":"<code>add_rules(rules, open_for_everyone=False)</code>","text":"<p>Add each rule to the translation table by calling the backend's 'add_rule' endpoint. Prevents local duplication. If the server also rejects a duplicate, it returns an error which we silently ignore.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_helpers/#mainsequence.client.models_helpers.AssetTranslationTable.remove_rules","title":"<code>remove_rules(rules)</code>","text":"<p>Remove each rule from the translation table by calling the backend's 'remove_rule' endpoint. Once successfully removed on the server, remove it from the local list <code>self.rules</code>. If a rule is not found on the server, we skip silently.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_helpers/#mainsequence.client.models_helpers.BaseObjectOrm","title":"<code>BaseObjectOrm</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_helpers/#mainsequence.client.models_helpers.BaseObjectOrm.filter","title":"<code>filter(timeout=None, **kwargs)</code>  <code>classmethod</code>","text":"<p>Fetches all pages from a DRF-paginated endpoint. Accumulates results from each page until 'next' is None.</p> <p>Returns a list of <code>cls</code> objects (not just one page).</p> <p>DRF's typical paginated response looks like:     {       \"count\": ,       \"next\": ,       \"previous\": ,       \"results\": [ ...items... ]     }"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_helpers/#mainsequence.client.models_helpers.BaseObjectOrm.get","title":"<code>get(pk=None, timeout=None, **filters)</code>  <code>classmethod</code>","text":"<p>Retrieves exactly one object by primary key: GET /base_url// Raises <code>DoesNotExist</code> if 404 or the response is empty. Raises Exception if multiple or unexpected data is returned."},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_helpers/#mainsequence.client.models_helpers.HistoricalWeights","title":"<code>HistoricalWeights</code>","text":"<p>               Bases: <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_helpers/#mainsequence.client.models_helpers.HistoricalWeights.add_from_time_serie","title":"<code>add_from_time_serie(local_time_serie_id, positions_list, weights_date, comments=None, timeout=None)</code>  <code>classmethod</code>","text":"<p>:param session: :return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_helpers/#mainsequence.client.models_helpers.Order","title":"<code>Order</code>","text":"<p>               Bases: <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_helpers/#mainsequence.client.models_helpers.Order.create_or_update","title":"<code>create_or_update(order_time_stamp, *args, **kwargs)</code>  <code>classmethod</code>","text":"<p>Args:     order_time: timestamp     args:     *kwargs:</p> <p>Returns:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_helpers/#mainsequence.client.models_helpers.TranslationError","title":"<code>TranslationError</code>","text":"<p>               Bases: <code>RuntimeError</code></p> <p>Raised when no translation rule (or more than one) matches an asset.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_helpers/#mainsequence.client.models_helpers.get_model_class","title":"<code>get_model_class(model_class)</code>","text":"<p>Reverse look from model class by name</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_tdag/","title":"Models tdag","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_tdag/#mainsequence.client.models_tdag","title":"<code>mainsequence.client.models_tdag</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_tdag/#mainsequence.client.models_tdag.DataUpdates","title":"<code>DataUpdates</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>This class contains the  update details of the table in the main sequence engine</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_tdag/#mainsequence.client.models_tdag.DataUpdates.__iter__","title":"<code>__iter__()</code>","text":"<p>Iterate over keys.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_tdag/#mainsequence.client.models_tdag.DataUpdates.filter_df_by_latest_value","title":"<code>filter_df_by_latest_value(df)</code>","text":"<p>:param df: :return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_tdag/#mainsequence.client.models_tdag.DynamicTableDataSource","title":"<code>DynamicTableDataSource</code>","text":"<p>               Bases: <code>BasePydanticModel</code>, <code>BaseObjectOrm</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_tdag/#mainsequence.client.models_tdag.DynamicTableDataSource.model_dump_json","title":"<code>model_dump_json(**json_dumps_kwargs)</code>","text":"<p>Dump the current instance to a JSON string, ensuring that the dependent <code>related_resource</code> is also properly dumped.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_tdag/#mainsequence.client.models_tdag.DynamicTableHelpers","title":"<code>DynamicTableHelpers</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_tdag/#mainsequence.client.models_tdag.DynamicTableHelpers.get_update_statistics","title":"<code>get_update_statistics(hash_id)</code>","text":"<p>Gets latest value from Hash_id</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_tdag/#mainsequence.client.models_tdag.LocalTimeSerie","title":"<code>LocalTimeSerie</code>","text":"<p>               Bases: <code>BasePydanticModel</code>, <code>BaseObjectOrm</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_tdag/#mainsequence.client.models_tdag.LocalTimeSerie.get_data_between_dates_from_api","title":"<code>get_data_between_dates_from_api(start_date=None, end_date=None, great_or_equal=None, less_or_equal=None, unique_identifier_list=None, columns=None, unique_identifier_range_map=None)</code>","text":"<p>Helper function to make a single batch request (or multiple paged requests if next_offset).</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_tdag/#mainsequence.client.models_tdag.LocalTimeSerie.get_metadatas_and_set_updates","title":"<code>get_metadatas_and_set_updates(local_time_series_ids, update_details_kwargs, update_priority_dict)</code>  <code>classmethod</code>","text":"<p>{'local_hash_id__in': [{'local_hash_id': 'alpacaequitybarstest_97018e7280c1bad321b3f4153cc7e986', 'data_source_id': 1}, :param local_hash_id__in: :param multi_index_asset_symbols_filter: :param update_details_kwargs: :param update_priority_dict: :return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_tdag/#mainsequence.client.models_tdag.LocalTimeSerie.post_data_frame_in_chunks","title":"<code>post_data_frame_in_chunks(serialized_data_frame, chunk_size=50000, local_metadata=None, data_source=None, index_names=None, time_index_name='timestamp', overwrite=False)</code>  <code>classmethod</code>","text":"<p>Sends a large DataFrame to a Django backend in multiple chunks.</p> <p>:param serialized_data_frame: The DataFrame to upload. :param url: The endpoint URL (e.g. https://yourapi.com/upload-chunk/). :param chunk_size: Number of rows per chunk. :param local_metadata: General metadata dict you want to send with each chunk. :param data_source: Additional info about the source of the data. :param index_names: Index columns in the DataFrame. :param time_index_name: The column name used for time indexing. :param overwrite: Boolean indicating whether existing data should be overwritten.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_tdag/#mainsequence.client.models_tdag.LocalTimeSerie.verify_if_direct_dependencies_are_updated","title":"<code>verify_if_direct_dependencies_are_updated()</code>","text":"<p>Response({     \"error_on_update_dependencies\": False,     \"updated\": all_success, })</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_tdag/#mainsequence.client.models_tdag.Scheduler","title":"<code>Scheduler</code>","text":"<p>               Bases: <code>BasePydanticModel</code>, <code>BaseObjectOrm</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_tdag/#mainsequence.client.models_tdag.Scheduler.stop_heart_beat","title":"<code>stop_heart_beat()</code>","text":"<p>Stop the heartbeat gracefully.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_tdag/#mainsequence.client.models_tdag.SourceTableConfiguration","title":"<code>SourceTableConfiguration</code>","text":"<p>               Bases: <code>BasePydanticModel</code>, <code>BaseObjectOrm</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_tdag/#mainsequence.client.models_tdag.SourceTableConfiguration.set_or_update_columns_metadata","title":"<code>set_or_update_columns_metadata(columns_metadata, timeout=None)</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_vam/","title":"Models vam","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_vam/#mainsequence.client.models_vam","title":"<code>mainsequence.client.models_vam</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_vam/#mainsequence.client.models_vam.AccountLatestHoldings","title":"<code>AccountLatestHoldings</code>","text":"<p>               Bases: <code>AccountHistoricalHoldingsMixin</code>, <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p> <p>Same as Account HistoricalHoldings but Does not include related account</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_vam/#mainsequence.client.models_vam.AssetCategory","title":"<code>AssetCategory</code>","text":"<p>               Bases: <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_vam/#mainsequence.client.models_vam.AssetCategory.append_assets","title":"<code>append_assets(asset_ids)</code>","text":"<p>Append the given asset IDs to this category. Expects a payload: {\"assets\": [, , ...]}"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_vam/#mainsequence.client.models_vam.AssetCategory.remove_assets","title":"<code>remove_assets(asset_ids)</code>","text":"<p>Remove the given asset IDs from this category. Expects a payload: {\"assets\": [, , ...]}"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_vam/#mainsequence.client.models_vam.AssetMixin","title":"<code>AssetMixin</code>","text":"<p>               Bases: <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_vam/#mainsequence.client.models_vam.AssetMixin.filter_with_asset_class","title":"<code>filter_with_asset_class(timeout=None, include_relationship_details_depth=None, *args, **kwargs)</code>  <code>classmethod</code>","text":"<p>Filters assets and returns instances with their correct asset class,</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_vam/#mainsequence.client.models_vam.AssetMixin.pretty_print","title":"<code>pretty_print()</code>","text":"<p>Print all asset properties in a neat, aligned table.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_vam/#mainsequence.client.models_vam.AssetTranslationTable","title":"<code>AssetTranslationTable</code>","text":"<p>               Bases: <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p> <p>Mirrors the Django model 'AssetTranslationTableModel' in the backend.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_vam/#mainsequence.client.models_vam.AssetTranslationTable.add_rules","title":"<code>add_rules(rules, open_for_everyone=False)</code>","text":"<p>Add each rule to the translation table by calling the backend's 'add_rule' endpoint. Prevents local duplication. If the server also rejects a duplicate, it returns an error which we silently ignore.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_vam/#mainsequence.client.models_vam.AssetTranslationTable.remove_rules","title":"<code>remove_rules(rules)</code>","text":"<p>Remove each rule from the translation table by calling the backend's 'remove_rule' endpoint. Once successfully removed on the server, remove it from the local list <code>self.rules</code>. If a rule is not found on the server, we skip silently.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_vam/#mainsequence.client.models_vam.HistoricalWeights","title":"<code>HistoricalWeights</code>","text":"<p>               Bases: <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_vam/#mainsequence.client.models_vam.HistoricalWeights.add_from_time_serie","title":"<code>add_from_time_serie(local_time_serie_id, positions_list, weights_date, comments=None, timeout=None)</code>  <code>classmethod</code>","text":"<p>:param session: :return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_vam/#mainsequence.client.models_vam.Order","title":"<code>Order</code>","text":"<p>               Bases: <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_vam/#mainsequence.client.models_vam.Order.create_or_update","title":"<code>create_or_update(order_time_stamp, *args, **kwargs)</code>  <code>classmethod</code>","text":"<p>Args:     order_time: timestamp     args:     *kwargs:</p> <p>Returns:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_vam/#mainsequence.client.models_vam.TranslationError","title":"<code>TranslationError</code>","text":"<p>               Bases: <code>RuntimeError</code></p> <p>Raised when no translation rule (or more than one) matches an asset.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/models_vam/#mainsequence.client.models_vam.get_model_class","title":"<code>get_model_class(model_class)</code>","text":"<p>Reverse look from model class by name</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/utils/","title":"Utils","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/utils/#mainsequence.client.utils","title":"<code>mainsequence.client.utils</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/utils/#mainsequence.client.utils.LazyConstants","title":"<code>LazyConstants</code>","text":"<p>               Bases: <code>dict</code></p> <p>Class Method to load constants only once they are called. this minimizes the calls to the API</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/utils/#mainsequence.client.utils.LazyConstants.to_attr_dict","title":"<code>to_attr_dict(data)</code>","text":"<p>Recursively convert a Python dict into an object that allows dot-notation access. Non-dict values (e.g., int, str, list) are returned as-is; dicts become _AttrDict.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/utils/#mainsequence.client.utils.bios_uuid","title":"<code>bios_uuid()</code>","text":"<p>Best\u2011effort hardware/OS identifier that never returns None.</p> Order of preference <ol> <li><code>/sys/class/dmi/id/product_uuid</code>          (kernel\u2011exported, no root)</li> <li><code>dmidecode -s system-uuid</code>                (requires root and dmidecode)</li> <li><code>/etc/machine-id</code> or <code>/var/lib/dbus/machine-id</code></li> <li><code>uuid.getnode()</code> (MAC address as 48\u2011bit int, zero\u2011padded hex)</li> </ol> <p>The value is always lower\u2011case and stripped of whitespace.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/utils/#mainsequence.client.utils.is_process_running","title":"<code>is_process_running(pid)</code>","text":"<p>Check if a process with the given PID is running.</p> <p>Args:     pid (int): The process ID to check.</p> <p>Returns:     bool: True if the process is running, False otherwise.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/data_sources_interfaces/duckdb/","title":"Duckdb","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/data_sources_interfaces/duckdb/#mainsequence.client.data_sources_interfaces.duckdb","title":"<code>mainsequence.client.data_sources_interfaces.duckdb</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/data_sources_interfaces/duckdb/#mainsequence.client.data_sources_interfaces.duckdb.DuckDBInterface","title":"<code>DuckDBInterface</code>","text":"<p>Persist/serve (time_index, unique_identifier, \u2026) DataFrames in a DuckDB file.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/data_sources_interfaces/duckdb/#mainsequence.client.data_sources_interfaces.duckdb.DuckDBInterface.__init__","title":"<code>__init__(db_path=None)</code>","text":"<p>Initializes the interface with the path to the DuckDB database file.</p> <p>Args:     db_path (Optional[str | Path]): Path to the database file.                                      Defaults to the value of the DUCKDB_PATH                                      environment variable or 'analytics.duckdb'                                      in the current directory if the variable is not set.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/data_sources_interfaces/duckdb/#mainsequence.client.data_sources_interfaces.duckdb.DuckDBInterface.drop_table","title":"<code>drop_table(table)</code>","text":"<p>Drops the specified table from the database.</p> <p>Args:     table (str): The name of the table to drop.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/data_sources_interfaces/duckdb/#mainsequence.client.data_sources_interfaces.duckdb.DuckDBInterface.list_tables","title":"<code>list_tables()</code>","text":"<p>Lists all user-defined tables in the main schema of the database.</p> <p>Returns:     List[str]: A list of table names. Returns an empty list if the                database file does not exist or on error.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/data_sources_interfaces/duckdb/#mainsequence.client.data_sources_interfaces.duckdb.DuckDBInterface.read","title":"<code>read(table, *, start=None, end=None, great_or_equal=True, less_or_equal=True, ids=None, columns=None, unique_identifier_range_map=None)</code>","text":"<p>Reads data from the specified table, with optional filtering. Handles missing tables by returning an empty DataFrame.</p> <p>Args:     table (str): The name of the table to read from.     start (Optional[datetime.datetime]): Minimum time_index filter.     end (Optional[datetime.datetime]): Maximum time_index filter.     great_or_equal (bool): If True, use &gt;= for start date comparison. Defaults to True.     less_or_equal (bool): If True, use &lt;= for end date comparison. Defaults to True.     ids (Optional[List[str]]): List of specific unique_identifiers to include.     columns (Optional[List[str]]): Specific columns to select. Reads all if None.     unique_identifier_range_map (Optional[UniqueIdentifierRangeMap]):         A map where keys are unique_identifiers and values are dicts specifying         date ranges (start_date, end_date, start_date_operand, end_date_operand)         for that identifier. Mutually exclusive with 'ids'.</p> <p>Returns:     pd.DataFrame: The queried data, or an empty DataFrame if the table doesn't exist.</p> <p>Raises:     ValueError: If both <code>ids</code> and <code>unique_identifier_range_map</code> are provided.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/data_sources_interfaces/duckdb/#mainsequence.client.data_sources_interfaces.duckdb.DuckDBInterface.upsert","title":"<code>upsert(df, table)</code>","text":"<p>Idempotently writes a DataFrame into table using (time_index, uid) PK. Extra columns are added to the table automatically.</p> <p>Args:     df (pd.DataFrame): DataFrame to upsert.     table (str): Target table name.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/data_sources_interfaces/timescale/","title":"Timescale","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/data_sources_interfaces/timescale/#mainsequence.client.data_sources_interfaces.timescale","title":"<code>mainsequence.client.data_sources_interfaces.timescale</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/data_sources_interfaces/timescale/#mainsequence.client.data_sources_interfaces.timescale.direct_data_from_db","title":"<code>direct_data_from_db(local_metadata, connection_uri, start_date=None, great_or_equal=True, less_or_equal=True, end_date=None, columns=None, unique_identifier_list=None, unique_identifier_range_map=None)</code>","text":"<p>Connects directly to the DB without passing through the ORM to speed up calculations.</p> <p>Parameters:</p> Name Type Description Default <code>metadata</code> <code>dict</code> <p>Metadata containing table and column details.</p> required <code>connection_config</code> <code>dict</code> <p>Connection configuration for the database.</p> required <code>start_date</code> <code>datetime</code> <p>The start date for filtering. If None, no lower bound is applied.</p> <code>None</code> <code>great_or_equal</code> <code>bool</code> <p>Whether the start_date filter is inclusive (&gt;=). Defaults to True.</p> <code>True</code> <code>less_or_equal</code> <code>bool</code> <p>Whether the end_date filter is inclusive (&lt;=). Defaults to True.</p> <code>True</code> <code>end_date</code> <code>datetime</code> <p>The end date for filtering. If None, no upper bound is applied.</p> <code>None</code> <code>columns</code> <code>list</code> <p>Specific columns to select. If None, all columns are selected.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Data from the table as a pandas DataFrame, optionally filtered by date range.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/data_sources_interfaces/timescale/#mainsequence.client.data_sources_interfaces.timescale.direct_table_update","title":"<code>direct_table_update(metadata, serialized_data_frame, overwrite, grouped_dates, table_is_empty, time_series_orm_db_connection=None, use_chunks=True, num_threads=4)</code>","text":"<p>Updates the database table with the given DataFrame.</p> <p>Parameters: - table_name: Name of the database table. - serialized_data_frame: DataFrame containing the data to insert. - overwrite: If True, existing data in the date range will be deleted before insertion. - time_index_name: Name of the time index column. - index_names: List of index column names. - table_is_empty: If True, the table is empty. - time_series_orm_db_connection: Database connection string. - use_chunks: If True, data will be inserted in chunks using threads. - num_threads: Number of threads to use when use_chunks is True.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/data_sources_interfaces/timescale/#mainsequence.client.data_sources_interfaces.timescale.filter_by_assets_ranges","title":"<code>filter_by_assets_ranges(table_name, asset_ranges_map, index_names, data_source, column_types)</code>","text":"<p>Query time series data dynamically based on asset ranges.</p> <p>Args:     table_name (str): The name of the table to query.     asset_ranges_map (dict): A dictionary where keys are asset symbols and values are dictionaries containing:                              - 'start_date' (datetime): The start date of the range.                              - 'start_date_operand' (str): The SQL operand for the start date (e.g., '&gt;=' or '&gt;').                              - 'end_date' (datetime or None): The end date of the range.     index_names (list): List of column names to set as the DataFrame index.     data_source: A data source object with a method <code>get_connection_uri()</code> to get the database connection URI.</p> <p>Returns:     pd.DataFrame: A Pandas DataFrame with the queried data, indexed by the specified columns.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/client/data_sources_interfaces/timescale/#mainsequence.client.data_sources_interfaces.timescale.process_and_update_table","title":"<code>process_and_update_table(serialized_data_frame, local_metadata, grouped_dates, data_source, index_names, time_index_name, overwrite=False, JSON_COMPRESSED_PREFIX=None)</code>","text":"<p>Process a serialized DataFrame, handle overwriting, and update a database table.</p> <p>Args:     serialized_data_frame (pd.DataFrame): The DataFrame to process and update.     metadata (DynamicTableMetaData): Metadata about the table, including table configuration.     grouped_dates (list): List of grouped dates to assist with the update.     data_source (object): A data source object with a <code>get_connection_uri</code> method.     index_names (list): List of index column names.     time_index_name (str): The name of the time index column.     overwrite (bool): Whether to overwrite the table or not.     JSON_COMPRESSED_PREFIX (list): List of prefixes to identify JSON-compressed columns.</p> <p>Returns:     None</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/instrumentation/utils/","title":"Utils","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/instrumentation/utils/#mainsequence.instrumentation.utils","title":"<code>mainsequence.instrumentation.utils</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/instrumentation/utils/#mainsequence.instrumentation.utils.OTelJSONRenderer","title":"<code>OTelJSONRenderer</code>","text":"<p>               Bases: <code>JSONRenderer</code></p> <p>A custom JSON renderer that injects OTel trace/span fields immediately before serializing to JSON.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/instrumentation/utils/#mainsequence.instrumentation.utils.TracerInstrumentator","title":"<code>TracerInstrumentator</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/instrumentation/utils/#mainsequence.instrumentation.utils.TracerInstrumentator.build_tracer","title":"<code>build_tracer()</code>","text":"<p>buidl_tracer(\"Time Series\",name) :return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/instrumentation/utils/#mainsequence.instrumentation.utils.add_otel_trace_context","title":"<code>add_otel_trace_context(logger, method_name, event_dict)</code>","text":"<p>Enrich log records with OpenTelemetry trace context (trace_id, span_id).</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/config/","title":"Config","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/config/#mainsequence.tdag.config","title":"<code>mainsequence.tdag.config</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/future_registry/","title":"Future registry","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/future_registry/#mainsequence.tdag.future_registry","title":"<code>mainsequence.tdag.future_registry</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/future_registry/#mainsequence.tdag.future_registry.add_future","title":"<code>add_future(future)</code>","text":"<p>Add a future to the global registry.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/future_registry/#mainsequence.tdag.future_registry.remove_future","title":"<code>remove_future(future)</code>","text":"<p>Remove a future from the global registry.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/future_registry/#mainsequence.tdag.future_registry.wait_for_all_futures","title":"<code>wait_for_all_futures()</code>","text":"<p>Wait for all registered futures to complete.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/utils/","title":"Utils","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/utils/#mainsequence.tdag.utils","title":"<code>mainsequence.tdag.utils</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/utils/#mainsequence.tdag.utils.copy_drop_database","title":"<code>copy_drop_database(source_uri, target_uri, source_container_name)</code>","text":"<p>Copies database from one host to the other and guarantees  that  are no broken time series.</p> <p>Parameters:</p> Name Type Description Default <code>source_uri</code> <code>str</code> required <code>target_uri</code> <code>str</code> required <code>source_container_name</code> <code>str</code> required"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/distributed/time_series/","title":"Time series","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/distributed/time_series/#mainsequence.tdag.distributed.time_series","title":"<code>mainsequence.tdag.distributed.time_series</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/distributed/time_series/#mainsequence.tdag.distributed.time_series.MLflowTrackingRestApi","title":"<code>MLflowTrackingRestApi</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/distributed/time_series/#mainsequence.tdag.distributed.time_series.MLflowTrackingRestApi.get_all_finished_runs_df","title":"<code>get_all_finished_runs_df(experiment_name, include_running=False)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> required <code>include_running</code> <code>False</code>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/distributed/utils/","title":"Utils","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/distributed/utils/#mainsequence.tdag.distributed.utils","title":"<code>mainsequence.tdag.distributed.utils</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/distributed/utils/#mainsequence.tdag.distributed.utils.get_request_status_from_query","title":"<code>get_request_status_from_query(query, request_url)</code>","text":"<p>:param query: :type query: :return: :rtype:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/persist_managers/","title":"Persist managers","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/persist_managers/#mainsequence.tdag.time_series.persist_managers","title":"<code>mainsequence.tdag.time_series.persist_managers</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/persist_managers/#mainsequence.tdag.time_series.persist_managers.APIPersistManager","title":"<code>APIPersistManager</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/persist_managers/#mainsequence.tdag.time_series.persist_managers.APIPersistManager.local_metadata","title":"<code>local_metadata</code>  <code>property</code>","text":"<p>Lazily block and cache the result if needed.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/persist_managers/#mainsequence.tdag.time_series.persist_managers.PersistManager","title":"<code>PersistManager</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/persist_managers/#mainsequence.tdag.time_series.persist_managers.PersistManager.build_update_details","title":"<code>build_update_details(source_class_name)</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/persist_managers/#mainsequence.tdag.time_series.persist_managers.PersistManager.depends_on_connect","title":"<code>depends_on_connect(new_ts, is_api)</code>","text":"<p>Connects a time Serie as relationship in the DB</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/persist_managers/#mainsequence.tdag.time_series.persist_managers.PersistManager.get_persisted_ts","title":"<code>get_persisted_ts()</code>","text":"<p>full Request of the persisted data should always default to DB :return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/persist_managers/#mainsequence.tdag.time_series.persist_managers.PersistManager.local_persist_exist_set_config","title":"<code>local_persist_exist_set_config(remote_table_hashed_name, local_configuration, remote_configuration, data_source, time_serie_source_code_git_hash, time_serie_source_code, remote_build_metadata)</code>","text":"<p>This method runs on initialization of the TimeSerie class. We also use it to retrieve the table if is already persisted :param config:</p> <p>:return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/persist_managers/#mainsequence.tdag.time_series.persist_managers.PersistManager.patch_build_configuration","title":"<code>patch_build_configuration(local_configuration, remote_configuration, remote_build_metadata)</code>","text":"<p>This method can be threaded because it runs at the end of an init method Args:     local_configuration:     remote_configuration:</p> <p>Returns:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/persist_managers/#mainsequence.tdag.time_series.persist_managers.PersistManager.persist_updated_data","title":"<code>persist_updated_data(temp_df, historical_update_id, update_tracker=None, overwrite=False)</code>","text":"<p>Main update time series function, it is called from TimeSeries class</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/persist_managers/#mainsequence.tdag.time_series.persist_managers.TimeScaleLocalPersistManager","title":"<code>TimeScaleLocalPersistManager</code>","text":"<p>               Bases: <code>PersistManager</code></p> <p>Main Controler to interacti with TimeSerie ORM</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/persist_managers/#mainsequence.tdag.time_series.persist_managers.TimeScaleLocalPersistManager.get_full_source_data","title":"<code>get_full_source_data(remote_table_hash_id, engine='pandas')</code>","text":"<p>Returns full stored data, uses multiprocessing to achieve several queries by rows and speed :return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/","title":"Time series","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series","title":"<code>mainsequence.tdag.time_series.time_series</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.APITimeSerie","title":"<code>APITimeSerie</code>","text":"<p>               Bases: <code>CommonMethodsMixin</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.APITimeSerie.__init__","title":"<code>__init__(data_source_id, local_hash_id, data_source_local_lake=None)</code>","text":"<p>A time serie is uniquely identified in tdag by  data_source_id and table_name :param data_source_id: :param table_name:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.APITimeSerie.filter_by_assets_ranges","title":"<code>filter_by_assets_ranges(unique_identifier_range_map)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>asset_ranges</code> required"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.APITimeSerie.get_update_statistics","title":"<code>get_update_statistics(asset_symbols=None)</code>","text":"<p>getts latest value directly from querying the DB, args and kwargs are nedeed for datalake</p> <p>Parameters:</p> Name Type Description Default <code>args</code> required <code>kwargs</code> required"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.APITimeSerie.persist_data_to_local_lake","title":"<code>persist_data_to_local_lake(temp_df, update_tracker, latest_value, overwrite=False)</code>","text":"<p>Helper series to  persist data to a local lake for reading purposes :param temp_df: :param update_tracker: :param latest_value: :param overwrite: :return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.ConfigSerializer","title":"<code>ConfigSerializer</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.ConfigSerializer.deserialize_pickle_state","title":"<code>deserialize_pickle_state(state, include_vam_client_objects, data_source_id, graph_depth_limit, graph_depth)</code>  <code>classmethod</code>","text":"<p>Parameters:</p> Name Type Description Default <code>state</code> required <code>deserialize_pickle_state</code> required"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.ConfigSerializer.rebuild_config","title":"<code>rebuild_config(config, ignore_pydantic=False)</code>  <code>classmethod</code>","text":"<p>:param config: :return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.ConfigSerializer.rebuild_pydantic_model","title":"<code>rebuild_pydantic_model(details, state_kwargs=None)</code>  <code>classmethod</code>","text":"<p>If there is an state rebuild the configuration then the method to rebuild related objects is from state Args:     details:      state_kwargs: </p> <p>Returns:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.ConfigSerializer.rebuild_serialized_config","title":"<code>rebuild_serialized_config(config, time_serie_class_name)</code>  <code>classmethod</code>","text":"<p>rebulds configuration from config file, particularly Assets :param config:</p> <p>:param time_serie_class_name: :return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.ConfigSerializer.rebuild_serialized_wrapper_dict","title":"<code>rebuild_serialized_wrapper_dict(time_series_dict_config)</code>  <code>classmethod</code>","text":"<p>rebuilds configuration from time_series Wrapper :param time_series_dict_config:</p> <p>:return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.ConfigSerializer.serialize_init_kwargs","title":"<code>serialize_init_kwargs(kwargs)</code>","text":"<p>serializes  TimeSeries init_kwargs to be able to  persist in local configuration :param kwargs: :return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.DataPersistanceMethods","title":"<code>DataPersistanceMethods</code>","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.DataPersistanceMethods.filter_by_assets_ranges","title":"<code>filter_by_assets_ranges(asset_ranges_map)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>asset_ranges</code> required"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.DataPersistanceMethods.get_df_between_dates","title":"<code>get_df_between_dates(start_date=None, end_date=None, unique_identifier_list=None, great_or_equal=True, less_or_equal=True, unique_identifier_range_map=None)</code>","text":"<p>Retrieve rows from this TimeSerie whose <code>time_index</code> (and optional <code>unique_identifier</code>) fall within the specified date ranges.</p> <p>Note: If <code>unique_identifier_range_map</code> is provided, all other filters (<code>start_date</code>, <code>end_date</code>, <code>unique_identifier_list</code>, <code>great_or_equal</code>, <code>less_or_equal</code>) are ignored, and only the per-identifier ranges in <code>unique_identifier_range_map</code> apply.</p> <p>Filtering logic (when <code>unique_identifier_range_map</code> is None):   - If <code>start_date</code> is provided, include rows where     <code>time_index &gt; start_date</code> (if <code>great_or_equal=False</code>)     or <code>time_index &gt;= start_date</code> (if <code>great_or_equal=True</code>).   - If <code>end_date</code> is provided, include rows where     <code>time_index &lt; end_date</code> (if <code>less_or_equal=False</code>)     or <code>time_index &lt;= end_date</code> (if <code>less_or_equal=True</code>).   - If <code>unique_identifier_list</code> is provided, only include rows whose     <code>unique_identifier</code> is in that list.</p> <p>Filtering logic (when <code>unique_identifier_range_map</code> is provided):   - For each <code>unique_identifier</code>, apply its own <code>start_date</code>/<code>end_date</code>     filters using the specified operands (<code>\"&gt;\"</code>, <code>\"&gt;=\"</code>, <code>\"&lt;\"</code>, <code>\"&lt;=\"</code>):     {       : {         \"start_date\": datetime,         \"start_date_operand\": \"&gt;=\" or \"&gt;\",         \"end_date\": datetime,         \"end_date_operand\": \"&lt;=\" or \"&lt;\"       },       ...     } <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>datetime or None</code> <p>Global lower bound for <code>time_index</code>. Ignored if <code>unique_identifier_range_map</code> is provided.</p> <code>None</code> <code>end_date</code> <code>datetime or None</code> <p>Global upper bound for <code>time_index</code>. Ignored if <code>unique_identifier_range_map</code> is provided.</p> <code>None</code> <code>unique_identifier_list</code> <code>list or None</code> <p>If provided, only include rows matching these IDs. Ignored if <code>unique_identifier_range_map</code> is provided.</p> <code>None</code> <code>great_or_equal</code> <code>bool</code> <p>If True, use <code>&gt;=</code> when filtering by <code>start_date</code>; otherwise use <code>&gt;</code>. Ignored if <code>unique_identifier_range_map</code> is provided.</p> <code>True</code> <code>less_or_equal</code> <code>bool</code> <p>If True, use <code>&lt;=</code> when filtering by <code>end_date</code>; otherwise use <code>&lt;</code>. Ignored if <code>unique_identifier_range_map</code> is provided.</p> <code>True</code> <code>unique_identifier_range_map</code> <code>UniqueIdentifierRangeMap or None</code> <p>Mapping of specific <code>unique_identifier</code> keys to their own sub-filters. When provided, this is the sole filter applied.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A DataFrame containing rows that satisfy the combined time and identifier filters.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.DataPersistanceMethods.get_last_observation","title":"<code>get_last_observation(unique_identifier_list=None)</code>","text":"<p>(1) Requests last observatiion from local persist manager (3) evaluates if last observation is consistent</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.DataPersistanceMethods.get_latest_update_by_assets_filter","title":"<code>get_latest_update_by_assets_filter(asset_symbols, last_update_per_asset)</code>","text":"<p>Gets the latest update from a symbol list :param asset_symbols: :return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.DataPersistanceMethods.get_update_statistics","title":"<code>get_update_statistics(unique_identifier_list=None)</code>","text":"<p>gets latest value directly from querying the DB, args and kwargs are nedeed for datalake</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.DataPersistanceMethods.update_details_in_dependecy_tree","title":"<code>update_details_in_dependecy_tree(set_relation_tree=True, include_head=False, *args, **kwargs)</code>","text":"<p>updates schedule from all tree related time series :param schedule: :return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.DataPersistanceMethods.upsert_data","title":"<code>upsert_data(data_df)</code>","text":"<p>Updates and Insert data into DB :param data_df: :return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.GraphNodeMethods","title":"<code>GraphNodeMethods</code>","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.GraphNodeMethods.get_all_local_dependencies","title":"<code>get_all_local_dependencies()</code>","text":"<p>get relation tree by ids in the graph :return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.GraphNodeMethods.get_update_map","title":"<code>get_update_map(dependecy_map=None)</code>","text":"<p>Obtain all local time_series in the dependency graph by introspecting the code class members. Dicts are allowed to have timeseries. :return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.GraphNodeMethods.set_relation_tree","title":"<code>set_relation_tree()</code>","text":"<p>Sets node relationship in the backend :return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.ModelList","title":"<code>ModelList</code>","text":"<p>               Bases: <code>list</code></p> <p>Necessary for configuration</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerie","title":"<code>TimeSerie</code>","text":"<p>               Bases: <code>CommonMethodsMixin</code>, <code>DataPersistanceMethods</code>, <code>GraphNodeMethods</code>, <code>TimeSerieRebuildMethods</code></p> <p>Base TimeSerie class</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerie.hash_id","title":"<code>hash_id</code>  <code>property</code>","text":"<p>Returns:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerie.__init__","title":"<code>__init__(init_meta=None, build_meta_data=None, local_kwargs_to_ignore=None, *args, **kwargs)</code>","text":"<p>Initializes the TimeSerie object with the provided metadata and configurations. For extension of the method the method should always be decorated by TimeSerie._post_init_routines</p> <p>This method sets up the time series object, loading the necessary configurations and metadata.</p> <p>Each TimeSerie instance will create a table in the Main Sequence Data Engine by uniquely hashing the arguments with exception of:</p> <ul> <li>init_meta</li> <li>build_meta_data</li> <li>local_kwargs_to_ignore</li> </ul> <p>Each TimeSerie instance will create a local_hash_id and a LocalTimeSerie instance in the Data Engine by uniquely hashing the same arguments as the table but excluding the arguments inside local_kwargs_to_ignore</p> <p>allowed type of arguments can only be str,list, int or  Pydantic objects inlcuding lists of Pydantic Objects.</p> <p>The OFFSET_START property can be overridend and markts the minimum date value where the table will insert data</p> <p>Parameters:</p> Name Type Description Default <code>init_meta</code> <code>dict</code> <p>Metadata for initializing the time series instance.</p> <code>None</code> <code>build_meta_data</code> <code>dict</code> <p>Metadata related to the building process of the time series.</p> <code>None</code> <code>local_kwargs_to_ignore</code> <code>list</code> <p>List of keyword arguments to ignore during configuration.</p> <code>None</code> <code>*args</code> <code>tuple</code> <p>Additional arguments.</p> <code>()</code> <code>**kwargs</code> <code>dict</code> <p>Additional keyword arguments.</p> <code>{}</code>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerie.get_html_description","title":"<code>get_html_description()</code>","text":"<p>must return a descript on html tags so it can be readable and rendedered Returns:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerie.get_time_serie_source_code_git_hash","title":"<code>get_time_serie_source_code_git_hash(TimeSerieClass)</code>  <code>staticmethod</code>","text":"<p>Hashes a time serie source code</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerie.patch_build_configuration","title":"<code>patch_build_configuration()</code>","text":"<p>This method comes in handy when there is a change in VAM models extra configuration. This method will properly update the models on all the tree</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerie.pre_update_setting_routines","title":"<code>pre_update_setting_routines(scheduler, set_time_serie_queue_status, update_tree, metadata=None, local_metadata=None)</code>","text":"<p>Routines to execute previous to an update</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerie.run","title":"<code>run(debug_mode, *, update_tree=True, force_update=False, update_only_tree=False, remote_scheduler=None)</code>","text":"<p>Args:     debug_mode: if the time serie is run in debug mode the DAG will be run node by node in the same process     update_tree: if set to False then only the selected time series will be run, default is True     force_update: Force an update even if the time serie schedule does not require an update     update_only_tree: If set to True then only the dependency graph of the selected time serie will be updated     remote_scheduler:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerie.set_data_source","title":"<code>set_data_source(data_source=None)</code>","text":"<p>:return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerie.set_dependencies_df","title":"<code>set_dependencies_df()</code>","text":"<p>:return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerie.set_update_statistics","title":"<code>set_update_statistics(update_statistics)</code>","text":"<p>Default method to narrow down update statistics un local time series, the method will filter using asset_list if the attribute exists as well as the init fallback date :param update_statistics: :return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerie.update","title":"<code>update(update_statistics)</code>","text":"<p>Fetch and ingest only the new rows for this TimeSerie based on prior update checkpoints.</p> <p>DataUpdates provides the last-ingested positions:   - For a single-index series (time_index only), <code>update_statistics.max_time</code> is either:       - None: no prior data\u2014fetch all available rows.       - a datetime: fetch rows where <code>time_index &gt; max_time</code>.   - For a dual-index series (time_index, unique_identifier), <code>update_statistics.max_time_per_id</code> is either:       - None: single-index behavior applies.       - dict[str, datetime]: for each <code>unique_identifier</code> (matching <code>Asset.unique_identifier</code>), fetch rows where         <code>time_index &gt; max_time_per_id[unique_identifier]</code>.</p> <p>Requirements:   - <code>time_index</code> must be a <code>datetime.datetime</code> instance with UTC timezone.   - Column names must be all lowercase.   - No column values may be Python <code>datetime</code> objects; if date/time storage is needed, convert to integer     timestamps (e.g., UNIX epoch in seconds or milliseconds).</p> <p>After retrieving the incremental rows, this method inserts or upserts them into the Main Sequence Data Engine.</p> <p>Parameters:</p> Name Type Description Default <code>update_statistics</code> <code>DataUpdates</code> <p>Object capturing the previous update state. Must expose:   - <code>max_time</code> (datetime | None)   - <code>max_time_per_id</code> (dict[str, datetime] | None)</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A DataFrame containing only the newly added or updated records.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerieConfigKwargs","title":"<code>TimeSerieConfigKwargs</code>","text":"<p>               Bases: <code>dict</code></p> <p>Necessary class for configuration</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerieRebuildMethods","title":"<code>TimeSerieRebuildMethods</code>","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerieRebuildMethods.get_minimum_required_depth_for_update","title":"<code>get_minimum_required_depth_for_update()</code>","text":"<p>Controls the minimum depth that needs to be rebuil</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerieRebuildMethods.persist_to_pickle","title":"<code>persist_to_pickle(overwrite=False)</code>","text":"<p>:return: :rtype:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerieRebuildMethods.rebuild_from_configuration","title":"<code>rebuild_from_configuration(local_hash_id, data_source)</code>  <code>classmethod</code>","text":"<p>:param serie_data_folder:</p> <p>:return: TimeSerie</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerieRebuildMethods.run_in_debug_scheduler","title":"<code>run_in_debug_scheduler(break_after_one_update=True, run_head_in_main_process=True, wait_for_update=True, force_update=True, debug=True, update_tree=True, raise_exception_on_error=True)</code>","text":"<p>Args:     break_after_one_update:     run_head_in_main_process:     wait_for_update:     force_update:     debug:     update_tree:</p> <p>Returns:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerieRebuildMethods.set_state_with_sessions","title":"<code>set_state_with_sessions(include_vam_client_objects=True, graph_depth_limit=1000, graph_depth=0)</code>","text":"<p>Method to set state after it was loaded from pickle.</p> <p>Parameters:</p> Name Type Description Default <code>include_vam_client_objects</code> <code>True</code> <code>graph_depth_limit</code> <code>1000</code> <code>metadatas</code> <code>pre-requestd dictionary of metadatas to speed calculation of rebuild of state</code> required <code>graph_depth</code> <code>0</code>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerieRebuildMethods.start_time_serie_update","title":"<code>start_time_serie_update(update_tracker, debug_mode, raise_exceptions=True, update_tree=False, local_time_series_map=None, update_only_tree=False, force_update=False, use_state_for_update=False)</code>","text":"<p>Main update method for time series that interacts with Graph node. Time series should be updated through this method only :param update_tree_kwargs: :param raise_exceptions: :param update_tree: :param scheduler: models.Scheduler :param metadatas: pre-requested metadatas to speed initiation of ts :return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.WrapperTimeSerie","title":"<code>WrapperTimeSerie</code>","text":"<p>               Bases: <code>TimeSerie</code></p> <p>A wrapper class for managing multiple TimeSerie objects.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.WrapperTimeSerie.__init__","title":"<code>__init__(translation_table, *args, **kwargs)</code>","text":"<p>Initialize the WrapperTimeSerie.</p> <p>Args:     time_series_dict: Dictionary of TimeSerie objects.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.WrapperTimeSerie.children_is_updating","title":"<code>children_is_updating()</code>","text":"<p>Check if any wrapped TimeSerie is currently updating.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.WrapperTimeSerie.get_pandas_df_list_data_greater_than","title":"<code>get_pandas_df_list_data_greater_than(target_value, great_or_equal, thread=True)</code>","text":"<p>Get DataFrames from all wrapped TimeSeries greater than a target value.</p> <p>Args:     target_value: The target datetime value to compare against.     great_or_equal: Whether to include the target value (True) or not (False).     thread: Whether to use threading for parallel processing.</p> <p>Returns:     A dictionary with TimeSerie keys and their corresponding DataFrames or error messages.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.WrapperTimeSerie.get_wrapped","title":"<code>get_wrapped()</code>","text":"<p>Get all wrapped TimeSeries, including nested ones.</p> <p>Returns:     A list of all wrapped TimeSerie objects, including those nested in other WrapperTimeSeries.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.WrapperTimeSerie.items","title":"<code>items()</code>","text":"<p>Get items of wrapped TimeSeries.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.WrapperTimeSerie.pandas_df_concat_on_rows_by_key_between_dates","title":"<code>pandas_df_concat_on_rows_by_key_between_dates(start_date=None, great_or_equal=None, end_date=None, less_or_equal=None, thread=False, unique_identifier_list=None, return_as_list=False, key_date_filter=None, unique_identifier_range_map=None)</code>","text":"<p>Concatenate DataFrames from all wrapped TimeSeries between given dates.</p> <p>Args:     start_date: The start date for the data range.     great_or_equal: Whether to include the start date (True) or not (False).     end_date: The end date for the data range.     less_or_equal: Whether to include the end date (True) or not (False).     thread: Whether to use threading for parallel processing.     unique_identifier_list: asset_symbol filter     return_as_list: If True, return a dictionary of DataFrames instead of concatenating.    key_date_filter: Concatenate DataFrames only for key date filter. Returns:     A concatenated DataFrame or a dictionary of DataFrames if return_as_list is True.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.WrapperTimeSerie.pandas_df_concat_on_rows_by_key_greater_than","title":"<code>pandas_df_concat_on_rows_by_key_greater_than(target_value, great_or_equal, thread=False, return_as_list=False, columns=None, *args, **kwargs)</code>","text":"<p>Concatenate DataFrames from all wrapped TimeSeries greater than a target value.</p> <p>Args:     target_value: The latest datetime value to compare against.     great_or_equal: Whether to include the target value (True) or not (False).     thread: Whether to use threading for parallel processing.     return_as_list: If True, return a dictionary of DataFrames instead of concatenating.     columns: Optional list of columns to include.</p> <p>Returns:     A concatenated DataFrame or a dictionary of DataFrames if return_as_list is True.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.WrapperTimeSerie.update","title":"<code>update(update_statistics)</code>","text":"<p>Implemented in the wrapped nodes</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.WrapperTimeSerie.values","title":"<code>values()</code>","text":"<p>Get values of wrapped TimeSeries.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.hash_signature","title":"<code>hash_signature(dictionary)</code>","text":"<p>MD5 hash of a dictionary used to hash the local annd remote configuration of tables :param dictionary: :return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/utils/","title":"Utils","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/utils/#mainsequence.tdag.time_series.utils","title":"<code>mainsequence.tdag.time_series.utils</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/update/api/","title":"Api","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/update/api/#mainsequence.tdag.time_series.update.api","title":"<code>mainsequence.tdag.time_series.update.api</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/update/ray_manager/","title":"Ray manager","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/update/ray_manager/#mainsequence.tdag.time_series.update.ray_manager","title":"<code>mainsequence.tdag.time_series.update.ray_manager</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/update/ray_manager/#mainsequence.tdag.time_series.update.ray_manager.RayUpdateManager","title":"<code>RayUpdateManager</code>","text":"<p>Controller for interactions with ray cluster</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/update/ray_manager/#mainsequence.tdag.time_series.update.ray_manager.RayUpdateManager.get_results_from_futures_list","title":"<code>get_results_from_futures_list(futures)</code>","text":"<p>should be a list of futures objects ray.remote() Args:     futures ():</p> <p>Returns:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/update/scheduler/","title":"Scheduler","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/update/scheduler/#mainsequence.tdag.time_series.update.scheduler","title":"<code>mainsequence.tdag.time_series.update.scheduler</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/update/scheduler/#mainsequence.tdag.time_series.update.scheduler.SchedulerUpdater","title":"<code>SchedulerUpdater</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/update/scheduler/#mainsequence.tdag.time_series.update.scheduler.SchedulerUpdater.start","title":"<code>start(debug=False, update_tree=True, break_after_one_update=False, raise_exception_on_error=False, update_extra_kwargs=None, run_head_in_main_process=False, force_update=False, sequential_update=False, update_only_tree=False, api_port=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>debug</code> <code>bool</code> <p>If True, all dependencies of a time series run in the same process. Defaults to False.</p> <code>False</code> <code>update_tree</code> <code>bool or dict</code> <p>If True, updates the tree of dependent tasks.</p> <code>True</code> <code>break_after_one_update</code> <code>bool</code> <p>If True, the process stops after the first update cycle. Defaults to False.</p> <code>False</code> <code>raise_exception_on_error</code> <code>bool</code> <p>If True, raises an exception on encountering an error during execution. Otherwise, errors are handled silently. Defaults to False.</p> <code>False</code> <code>update_extra_kwargs</code> <code>dict or None</code> <p>Additional parameters (if any) to pass along when updating. Defaults to None.</p> <code>None</code> <code>run_head_in_main_process</code> <code>bool</code> <p>If True, each \"head\" time series is run in the main scheduler process. Useful for debugging. Defaults to False.</p> <code>False</code> <code>force_update</code> <code>bool</code> <p>If True, forces an update run even if it's not required. Defaults to False.</p> <code>False</code> <code>sequential_update</code> <code>bool</code> <p>If True, runs each \"head\" time series one by one instead of in parallel. Defaults to False.</p> <code>False</code> <code>update_only_tree</code> <code>bool</code> <p>If True, only the dependency tree is updated without fully processing every step. Defaults to False.</p> <code>False</code> <code>api_port</code> <code>int or None</code> <p>The port on which any exposed APIs should run. If None, no API is exposed. Defaults to None.</p> <code>None</code>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/update/scheduler/#mainsequence.tdag.time_series.update.scheduler.TimeSerieHeadUpdateActor","title":"<code>TimeSerieHeadUpdateActor</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/update/scheduler/#mainsequence.tdag.time_series.update.scheduler.TimeSerieHeadUpdateActor.__init__","title":"<code>__init__(local_hash_id, data_source_id, scheduler, debug, update_tree, update_extra_kwargs, remote_table_hashed_name)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>hash_id</code> required <code>scheduler</code> <code>Scheduler</code> required <code>debug</code> required <code>update_tree</code> required <code>update_extra_kwargs</code> required"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/update/scheduler/#mainsequence.tdag.time_series.update.scheduler.TimeSerieHeadUpdateActor.run_one_step_update","title":"<code>run_one_step_update(force_update=False, update_only_tree=False)</code>","text":"<p>Main update Method for a time serie Head</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/update/scheduler/#mainsequence.tdag.time_series.update.scheduler.set_data_source","title":"<code>set_data_source(pod_source=None, tdag_detached=False, override_all=False)</code>","text":"<p>:param override_all: :return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/update/update_methods/","title":"Update methods","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/update/update_methods/#mainsequence.tdag.time_series.update.update_methods","title":"<code>mainsequence.tdag.time_series.update.update_methods</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/update/update_methods/#mainsequence.tdag.time_series.update.update_methods.TimeSerieUpdater","title":"<code>TimeSerieUpdater</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/update/update_methods/#mainsequence.tdag.time_series.update.update_methods.update_remote_from_hash_id","title":"<code>update_remote_from_hash_id(*args, **kwargs)</code>","text":"<p>Ray wrapper for session update :param args: :param kwargs: :return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/update/update_methods/#mainsequence.tdag.time_series.update.update_methods.update_remote_from_hash_id_local","title":"<code>update_remote_from_hash_id_local(telemetry_carrier, scheduler_uid, local_time_serie_id, data_source_id, local_hash_id)</code>","text":"<p>Args:     in_update_tree_node_uid ():     update_tree_kwargs ():     execution_start ():     telemtry_carrier ():     update_priority ():     hash_id ():</p> <p>Returns:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/update/utils/","title":"Utils","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/update/utils/#mainsequence.tdag.time_series.update.utils","title":"<code>mainsequence.tdag.time_series.update.utils</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/update/utils/#mainsequence.tdag.time_series.update.utils.UpdateInterface","title":"<code>UpdateInterface</code>","text":"<p>Helper class to avoid calling ray in other modules</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/update/utils/#mainsequence.tdag.time_series.update.utils.get_available_port","title":"<code>get_available_port(port_range=(8000, 8090))</code>","text":"<p>Check if the given port is free, and if not, find an available port within the range.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/tdag/time_series/update/utils/#mainsequence.tdag.time_series.update.utils.is_port_free","title":"<code>is_port_free(port)</code>","text":"<p>Check if the port is free on the local machine.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/agent_interface/","title":"Agent interface","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/agent_interface/#mainsequence.virtualfundbuilder.agent_interface","title":"<code>mainsequence.virtualfundbuilder.agent_interface</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/config_handling/","title":"Config handling","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling","title":"<code>mainsequence.virtualfundbuilder.config_handling</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.AssetMixin","title":"<code>AssetMixin</code>","text":"<p>               Bases: <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.AssetMixin.filter_with_asset_class","title":"<code>filter_with_asset_class(timeout=None, include_relationship_details_depth=None, *args, **kwargs)</code>  <code>classmethod</code>","text":"<p>Filters assets and returns instances with their correct asset class,</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.AssetMixin.pretty_print","title":"<code>pretty_print()</code>","text":"<p>Print all asset properties in a neat, aligned table.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.AssetMixinOverwrite","title":"<code>AssetMixinOverwrite</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>The Asset for evaluating the portfolio.</p> <p>Attributes:     unique_identifier (str): The unique_identifier of the asset.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.AssetsConfiguration","title":"<code>AssetsConfiguration</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>Configuration for assets included in a portfolio.</p> <p>Attributes:     assets_category_unique_id (str):         Unique Identifier of assets category     price_type (PriceTypeNames): Type of price used for backtesting.     prices_configuration (PricesConfiguration): Configuration for price data handling.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.BacktestingWeightsConfig","title":"<code>BacktestingWeightsConfig</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>Configuration for backtesting weights.</p> <p>Attributes:     rebalance_strategy_name (str): Strategy used for rebalancing.     rebalance_strategy_configuration (Dict): Placeholder dict for the rebalance strategy configuration.     signal_weights_name (str): Type of signal weights strategy.     signal_weights_configuration (Dict): Placeholder dict for the signal weights configuration.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.MarketsTimeSeries","title":"<code>MarketsTimeSeries</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>MarketsTimeSeries based on their unique id. Used as the data sources for the prices. Values include alpaca_1d_bars, binance_1d_bars etc.</p> <p>Attributes:     unique_identifier (str): Identfier of the MarketsTimeSeries.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.ModelList","title":"<code>ModelList</code>","text":"<p>               Bases: <code>list</code></p> <p>Necessary for configuration</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.PortfolioBuildConfiguration","title":"<code>PortfolioBuildConfiguration</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>Main class for configuring and building a portfolio.</p> <p>This class defines the configuration parameters needed for building a portfolio, including asset configurations, backtesting weights, and execution parameters.</p> <p>Attributes:     assets_configuration (AssetsConfiguration): Configuration details for assets.     portfolio_prices_frequency (str): Frequency to upsample portoflio. Optional.     backtesting_weights_configuration (BacktestingWeightsConfig): Weights configuration used for backtesting.     execution_configuration (PortfolioExecutionConfiguration): Execution settings for the portfolio.     valuation_asset (AssetMixin): The Asset for evaluating the portfolio.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.PortfolioConfiguration","title":"<code>PortfolioConfiguration</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <pre><code>Configuration for a complete portfolio, including build configuration,\nTDAG updates, and VAM settings.\n\nThis class aggregates different configurations required for the\nmanagement and operation of a portfolio.\n</code></pre> <p>Attributes:     portfolio_build_configuration (PortfolioBuildConfiguration): Configuration for building the portfolio.     portfolio_markets_configuration (PortfolioMarketsConfig): VAM execution configuration.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.PortfolioExecutionConfiguration","title":"<code>PortfolioExecutionConfiguration</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>Configuration for portfolio execution.</p> <p>Attributes:     commission_fee (float): Commission fee percentage.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.PortfolioMarketsConfig","title":"<code>PortfolioMarketsConfig</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>Configuration for Virtual Asset Management (VAM) portfolio.</p> <p>Attributes:     portfolio_name (str): Name of the portfolio.     execution_configuration (VAMExecutionConfiguration): Execution configuration for VAM.     tracking_funds_expected_exposure_from_latest_holdings (bool): If tracking funds should get the expected exposure from weights or from latest holdings.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.PricesConfiguration","title":"<code>PricesConfiguration</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>Configuration for price data handling in a portfolio.</p> <p>Attributes:     bar_frequency_id (str): The frequency of price bars.     upsample_frequency_id (str): Frequency to upsample intraday data to.     intraday_bar_interpolation_rule (str): Rule for interpolating missing intraday bars.     is_live (bool): Boolean flag indicating if the price feed is live.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.TemplateFactory","title":"<code>TemplateFactory</code>","text":"<p>A factory for creating template-based objects, for example, market indices.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.TemplateFactory.create_market_index","title":"<code>create_market_index(index_name)</code>  <code>staticmethod</code>","text":"<p>Creates a market index portfolio object based on a predefined template configuration.</p> <p>Args:     index_name (str): The name of the index to create, which corresponds to a specific template configuration.</p> <p>Returns:     PortfolioStrategy: A PortfolioStrategy object configured according to the template.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.configuration_sanitizer","title":"<code>configuration_sanitizer(configuration)</code>","text":"<p>Verifies that a configuration has all the required attributes. Args:     configuration (dict): The configuration dictionary to sanitize. Returns:     PortfolioConfiguration: The sanitized portfolio configuration.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.replace_none_and_empty_dict_with_python_none","title":"<code>replace_none_and_empty_dict_with_python_none(config)</code>","text":"<p>Recursively replace all string 'None' with Python None in the given dictionary and log the path where replacements occur.</p> <p>Args:     config (dict): The configuration dictionary.</p> <p>Returns:     dict: Updated dictionary with 'None' replaced by Python None.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/enums/","title":"Enums","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/enums/#mainsequence.virtualfundbuilder.enums","title":"<code>mainsequence.virtualfundbuilder.enums</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/models/","title":"Models","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/models/#mainsequence.virtualfundbuilder.models","title":"<code>mainsequence.virtualfundbuilder.models</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/models/#mainsequence.virtualfundbuilder.models.AssetMixinOverwrite","title":"<code>AssetMixinOverwrite</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>The Asset for evaluating the portfolio.</p> <p>Attributes:     unique_identifier (str): The unique_identifier of the asset.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/models/#mainsequence.virtualfundbuilder.models.AssetsConfiguration","title":"<code>AssetsConfiguration</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>Configuration for assets included in a portfolio.</p> <p>Attributes:     assets_category_unique_id (str):         Unique Identifier of assets category     price_type (PriceTypeNames): Type of price used for backtesting.     prices_configuration (PricesConfiguration): Configuration for price data handling.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/models/#mainsequence.virtualfundbuilder.models.BacktestingWeightsConfig","title":"<code>BacktestingWeightsConfig</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>Configuration for backtesting weights.</p> <p>Attributes:     rebalance_strategy_name (str): Strategy used for rebalancing.     rebalance_strategy_configuration (Dict): Placeholder dict for the rebalance strategy configuration.     signal_weights_name (str): Type of signal weights strategy.     signal_weights_configuration (Dict): Placeholder dict for the signal weights configuration.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/models/#mainsequence.virtualfundbuilder.models.MarketsTimeSeries","title":"<code>MarketsTimeSeries</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>MarketsTimeSeries based on their unique id. Used as the data sources for the prices. Values include alpaca_1d_bars, binance_1d_bars etc.</p> <p>Attributes:     unique_identifier (str): Identfier of the MarketsTimeSeries.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/models/#mainsequence.virtualfundbuilder.models.PortfolioBuildConfiguration","title":"<code>PortfolioBuildConfiguration</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>Main class for configuring and building a portfolio.</p> <p>This class defines the configuration parameters needed for building a portfolio, including asset configurations, backtesting weights, and execution parameters.</p> <p>Attributes:     assets_configuration (AssetsConfiguration): Configuration details for assets.     portfolio_prices_frequency (str): Frequency to upsample portoflio. Optional.     backtesting_weights_configuration (BacktestingWeightsConfig): Weights configuration used for backtesting.     execution_configuration (PortfolioExecutionConfiguration): Execution settings for the portfolio.     valuation_asset (AssetMixin): The Asset for evaluating the portfolio.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/models/#mainsequence.virtualfundbuilder.models.PortfolioConfiguration","title":"<code>PortfolioConfiguration</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <pre><code>Configuration for a complete portfolio, including build configuration,\nTDAG updates, and VAM settings.\n\nThis class aggregates different configurations required for the\nmanagement and operation of a portfolio.\n</code></pre> <p>Attributes:     portfolio_build_configuration (PortfolioBuildConfiguration): Configuration for building the portfolio.     portfolio_markets_configuration (PortfolioMarketsConfig): VAM execution configuration.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/models/#mainsequence.virtualfundbuilder.models.PortfolioExecutionConfiguration","title":"<code>PortfolioExecutionConfiguration</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>Configuration for portfolio execution.</p> <p>Attributes:     commission_fee (float): Commission fee percentage.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/models/#mainsequence.virtualfundbuilder.models.PortfolioMarketsConfig","title":"<code>PortfolioMarketsConfig</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>Configuration for Virtual Asset Management (VAM) portfolio.</p> <p>Attributes:     portfolio_name (str): Name of the portfolio.     execution_configuration (VAMExecutionConfiguration): Execution configuration for VAM.     tracking_funds_expected_exposure_from_latest_holdings (bool): If tracking funds should get the expected exposure from weights or from latest holdings.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/models/#mainsequence.virtualfundbuilder.models.PricesConfiguration","title":"<code>PricesConfiguration</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>Configuration for price data handling in a portfolio.</p> <p>Attributes:     bar_frequency_id (str): The frequency of price bars.     upsample_frequency_id (str): Frequency to upsample intraday data to.     intraday_bar_interpolation_rule (str): Rule for interpolating missing intraday bars.     is_live (bool): Boolean flag indicating if the price feed is live.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/notebook_handling/","title":"Notebook handling","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/notebook_handling/#mainsequence.virtualfundbuilder.notebook_handling","title":"<code>mainsequence.virtualfundbuilder.notebook_handling</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/notebook_handling/#mainsequence.virtualfundbuilder.notebook_handling.convert_notebook_to_python_file","title":"<code>convert_notebook_to_python_file(notebook_path)</code>","text":"<p>Converts a Jupyter notebook to a Python file in a temporary directory.</p> <p>Args:     notebook_path (str or pathlib.Path): The path to the Jupyter notebook (.ipynb) file.</p> <p>Returns:     pathlib.Path: The path to the generated Python file in the temporary directory.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/portfolio_interface/","title":"Portfolio interface","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/portfolio_interface/#mainsequence.virtualfundbuilder.portfolio_interface","title":"<code>mainsequence.virtualfundbuilder.portfolio_interface</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/portfolio_interface/#mainsequence.virtualfundbuilder.portfolio_interface.PortfolioInterface","title":"<code>PortfolioInterface</code>","text":"<p>Manages the overall strategy of investing. It initializes the tree and runs it either within the scheduler or directly with a full tree update.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/portfolio_interface/#mainsequence.virtualfundbuilder.portfolio_interface.PortfolioInterface.__init__","title":"<code>__init__(portfolio_config_template, build_purpose=CONSTANTS.PORTFOLIO_BUILD_FOR_BACKTEST, configuration_name=None)</code>","text":"<p>Initializes the portfolio strategy with the necessary configurations.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/portfolio_interface/#mainsequence.virtualfundbuilder.portfolio_interface.PortfolioInterface.build_target_portfolio_in_backend","title":"<code>build_target_portfolio_in_backend(portfolio_tags=None)</code>","text":"<p>This method creates a portfolio in VAM with configm file settings.</p> <p>Returns:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/portfolio_interface/#mainsequence.virtualfundbuilder.portfolio_interface.PortfolioInterface.delete_portfolio","title":"<code>delete_portfolio()</code>","text":"<p>Deletes the portfolio from vam :return:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/portfolio_interface/#mainsequence.virtualfundbuilder.portfolio_interface.PortfolioInterface.delete_stored_configuration","title":"<code>delete_stored_configuration()</code>","text":"<p>Removes a saved configuration file from the configuration folder</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/portfolio_interface/#mainsequence.virtualfundbuilder.portfolio_interface.PortfolioInterface.list_configurations","title":"<code>list_configurations()</code>  <code>classmethod</code>","text":"<p>Lists all YAML configuration files found in the configuration_path.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/portfolio_interface/#mainsequence.virtualfundbuilder.portfolio_interface.PortfolioInterface.store_configuration","title":"<code>store_configuration(configuration_name=None)</code>","text":"<p>Stores the current configuration as a YAML file under the configuration_name</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/time_series/","title":"Time series","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/time_series/#mainsequence.virtualfundbuilder.time_series","title":"<code>mainsequence.virtualfundbuilder.time_series</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/time_series/#mainsequence.virtualfundbuilder.time_series.PortfolioStrategy","title":"<code>PortfolioStrategy</code>","text":"<p>               Bases: <code>TimeSerie</code></p> <p>Manages the rebalancing of asset weights within a portfolio over time, considering transaction fees and rebalancing strategies. Calculates portfolio values and returns while accounting for execution-specific fees.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/time_series/#mainsequence.virtualfundbuilder.time_series.PortfolioStrategy.__init__","title":"<code>__init__(portfolio_build_configuration, *args, **kwargs)</code>","text":"<p>Initializes the PortfolioStrategy class with the necessary configurations.</p> <p>Args:     portfolio_build_configuration (PortfolioBuildConfiguration): Configuration for building the portfolio,         including assets, execution parameters, and backtesting weights.     is_live (bool): Flag indicating whether the strategy is running in live mode.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/time_series/#mainsequence.virtualfundbuilder.time_series.PortfolioStrategy.get_portfolio_about_text","title":"<code>get_portfolio_about_text()</code>","text":"<p>Constructs the portfolio about text.</p> <p>Returns:     str: Portfolio description.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/time_series/#mainsequence.virtualfundbuilder.time_series.PortfolioStrategy.update","title":"<code>update(update_statistics)</code>","text":"<p>Updates the portfolio weights based on the latest available data.</p> <p>Args:     latest_value (datetime): The timestamp of the latest available data.</p> <p>Returns:     pd.DataFrame: Updated portfolio values with and without fees and returns.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/time_series/#mainsequence.virtualfundbuilder.time_series.translate_to_pandas_freq","title":"<code>translate_to_pandas_freq(custom_freq)</code>","text":"<p>Translate custom datetime frequency strings to Pandas frequency strings.</p> <p>Args:     custom_freq (str): Custom frequency string (e.g., '1d', '1m', '1mo').</p> <p>Returns:     str: Pandas frequency string (e.g., 'D', 'T', 'M').</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/utils/","title":"Utils","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/utils/#mainsequence.virtualfundbuilder.utils","title":"<code>mainsequence.virtualfundbuilder.utils</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/utils/#mainsequence.virtualfundbuilder.utils.build_markdown","title":"<code>build_markdown(root_class, persist=True, elements_to_exclude=None, children_to_exclude=None)</code>","text":"<p>Builds standards portfolio configuration documentation Returns:</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/utils/#mainsequence.virtualfundbuilder.utils.build_rolling_regression_from_df","title":"<code>build_rolling_regression_from_df(x, y, rolling_window, column_names, threads=5)</code>","text":"<p>Builds rolling regressions for multiple variables in parallel using a specified rolling window.</p> <p>Args:     x (NDArray): An array of independent variables.     y (NDArray): An array of dependent variables.     rolling_window (int): The size of the rolling window for each regression.     column_names (list): Names of the dependent variables, used for labeling the output.     threads (int): Number of threads to use for parallel processing.</p> <p>Returns:     pd.DataFrame: A DataFrame containing the regression results for all variables.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/utils/#mainsequence.virtualfundbuilder.utils.convert_to_binance_frequency","title":"<code>convert_to_binance_frequency(freq)</code>","text":"<p>Converts a generic frequency format to a format compatible with Binance API requirements.</p> <p>Args:     freq (str): The generic frequency format (e.g., '1m', '1h').</p> <p>Returns:     str: A frequency string adapted for Binance API (e.g., '1m', '1h').</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/utils/#mainsequence.virtualfundbuilder.utils.default_config_to_dict","title":"<code>default_config_to_dict(default_config)</code>","text":"<p>Convert the default configuration into a Python dictionary.</p> <p>Args:     default_config (dict): Default configuration from the VFB tool.</p> <p>Returns:     dict: Processed configuration dictionary.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/utils/#mainsequence.virtualfundbuilder.utils.do_single_regression","title":"<code>do_single_regression(xx, XTX_inv_list, rolling_window, col_name, tmp_y, XTX_inv_diag)</code>","text":"<p>Performs a single regression analysis on a sliding window of data points for a specific column.</p> <p>Args:     xx (NDArray): An array of independent variable data with a sliding window applied.     XTX_inv_list (list): A list of precomputed inverse matrices of X.T @ X for each window.     rolling_window (int): The number of observations per window.     col_name (str): The name of the column being analyzed, used for labeling the output.     tmp_y (NDArray): The dependent variable data.     XTX_inv_diag (list): Diagonals of the precomputed inverse matrices, used for standard error calculation.</p> <p>Returns:     pd.DataFrame: A DataFrame containing the regression results with coefficients, R-squared, and t-statistics.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/utils/#mainsequence.virtualfundbuilder.utils.filter_assets","title":"<code>filter_assets(df, asset_list)</code>","text":"<p>Filters a DataFrame to include only rows that have asset symbols contained in a given asset list.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/utils/#mainsequence.virtualfundbuilder.utils.get_last_query_times_per_asset","title":"<code>get_last_query_times_per_asset(latest_value, metadata, asset_list, max_lookback_time, current_time, query_frequency)</code>","text":"<p>Determines the last query times for each asset based on metadata, a specified lookback limit, and a query frequency.</p> <p>Args:     latest_value (datetime|None): Timestamp of the last value in the database for each asset.     metadata (dict): Metadata containing previous query information for each coin.     asset_list (List[Asset]): List of asset objects to process.     max_lookback_time (datetime): Maximum historical lookback time allowed for the node.     current_time (datetime): Current time to consider for the calculations.     query_frequency (str): Query frequency as a pandas-parseable string to determine if new data needs fetching.</p> <p>Returns:     Dict[str, Optional[float]]: A dictionary mapping asset IDs to their respective last query times expressed in UNIX timestamp.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/utils/#mainsequence.virtualfundbuilder.utils.object_signature_to_markdown","title":"<code>object_signature_to_markdown(root_dict, level=1, elements_to_exclude=None, children_to_exclude=None)</code>","text":"<p>Convert a nested dictionary structure into a markdown formatted string.</p> <p>Args: - root_dict (dict): The nested dictionary to convert. - level (int): The current markdown header level.</p> <p>Returns: - str: The markdown formatted string.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/utils/#mainsequence.virtualfundbuilder.utils.object_signature_to_yaml","title":"<code>object_signature_to_yaml(default_config)</code>","text":"<p>Convert the default configuration dictionary to a YAML string.</p> <p>Args:     default_config (dict): Default configuration from the VFB tool.</p> <p>Returns:     str: YAML formatted string of the configuration.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/utils/#mainsequence.virtualfundbuilder.utils.reindex_df","title":"<code>reindex_df(df, start_time, end_time, freq)</code>","text":"<p>Aligns two DataFrames on a new index based on a specified frequency, filling missing entries with the last known values.</p> <p>Args:     df (pd.DataFrame): Reference DataFrame used to determine the new index range.     start_time (datetime): start of index     end_time (datetime): end of index     freq (str): Frequency string (e.g., '1T' for one minute) to define the interval of the new index.</p> <p>Returns:     pd.DataFrame: The df_to_align DataFrame reindexed to match the new timeline and filled with forward filled values.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/apps/generate_report/","title":"Generate report","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/apps/generate_report/#mainsequence.virtualfundbuilder.contrib.apps.generate_report","title":"<code>mainsequence.virtualfundbuilder.contrib.apps.generate_report</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/apps/generate_report/#mainsequence.virtualfundbuilder.contrib.apps.generate_report.ExampleReportApp","title":"<code>ExampleReportApp</code>","text":"<p>               Bases: <code>BaseApp</code></p> <p>Minimal example of a 'ReportApp' that can: 1) Generate dummy data and create charts (line + heatmap). 2) Embed those charts into an HTML template. 3) Optionally export the HTML to PDF using WeasyPrint.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/apps/generate_report/#mainsequence.virtualfundbuilder.contrib.apps.generate_report.ExampleReportApp.run","title":"<code>run()</code>","text":"<p>Generates an HTML report (and optional PDF) in a minimal, self-contained way.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/apps/generate_report/#mainsequence.virtualfundbuilder.contrib.apps.generate_report.ExampleReportConfig","title":"<code>ExampleReportConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Pydantic model defining the parameters for report generation.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/apps/generate_report/#mainsequence.virtualfundbuilder.contrib.apps.generate_report.example_data","title":"<code>example_data(assets)</code>","text":"<p>Fetch real data from the 'api_ts.get_df_between_dates()' call, then:   1) Build a time-series chart of 'Revenue' vs. time for each asset (ticker).   2) Build a correlation heatmap of 'Revenue' vs. 'EPS' for the latest time period.   3) Return both figures as Base64-encoded PNGs.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/apps/load_external_portfolio/","title":"Load external portfolio","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/apps/load_external_portfolio/#mainsequence.virtualfundbuilder.contrib.apps.load_external_portfolio","title":"<code>mainsequence.virtualfundbuilder.contrib.apps.load_external_portfolio</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/apps/news_app/","title":"News app","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/apps/news_app/#mainsequence.virtualfundbuilder.contrib.apps.news_app","title":"<code>mainsequence.virtualfundbuilder.contrib.apps.news_app</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/apps/news_app/#mainsequence.virtualfundbuilder.contrib.apps.news_app.SentimentReport","title":"<code>SentimentReport</code>","text":"<p>               Bases: <code>BaseApp</code></p> <p>Generates an HTML report summarizing news sentiment and headlines for a list of stock tickers using data from Polygon.io. Additionally, fetches the first 100 words of each article (if possible) and generates a single combined summary displayed below the combined chart.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/apps/news_app/#mainsequence.virtualfundbuilder.contrib.apps.news_app.SentimentReport.run","title":"<code>run()</code>","text":"<p>Orchestrates the report generation process:   1. Fetch data,   2. Create plots,   3. Attempt to retrieve article text (first 100 words) for all articles,   4. Generate a single combined summary from those snippets,   5. Render HTML,   6. Upload artifact.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/apps/news_app/#mainsequence.virtualfundbuilder.contrib.apps.news_app.SentimentReportConfig","title":"<code>SentimentReportConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Pydantic model defining parameters for the Sentiment Report.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/apps/portfolio_report_app/","title":"Portfolio report app","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/apps/portfolio_report_app/#mainsequence.virtualfundbuilder.contrib.apps.portfolio_report_app","title":"<code>mainsequence.virtualfundbuilder.contrib.apps.portfolio_report_app</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/apps/portfolio_table/","title":"Portfolio table","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/apps/portfolio_table/#mainsequence.virtualfundbuilder.contrib.apps.portfolio_table","title":"<code>mainsequence.virtualfundbuilder.contrib.apps.portfolio_table</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/apps/run_named_portfolio/","title":"Run named portfolio","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/apps/run_named_portfolio/#mainsequence.virtualfundbuilder.contrib.apps.run_named_portfolio","title":"<code>mainsequence.virtualfundbuilder.contrib.apps.run_named_portfolio</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/apps/run_portfolio/","title":"Run portfolio","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/apps/run_portfolio/#mainsequence.virtualfundbuilder.contrib.apps.run_portfolio","title":"<code>mainsequence.virtualfundbuilder.contrib.apps.run_portfolio</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/prices/time_series/","title":"Time series","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series","title":"<code>mainsequence.virtualfundbuilder.contrib.prices.time_series</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.ExternalPrices","title":"<code>ExternalPrices</code>","text":"<p>               Bases: <code>TimeSerie</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.InterpolatedPrices","title":"<code>InterpolatedPrices</code>","text":"<p>               Bases: <code>TimeSerie</code></p> <p>Handles interpolated prices for assets.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.InterpolatedPrices.__init__","title":"<code>__init__(asset_category_unique_id, bar_frequency_id, intraday_bar_interpolation_rule, upsample_frequency_id=None, asset_filter=None, local_kwargs_to_ignore=['asset_category_unique_id'], *args, **kwargs)</code>","text":"<p>Initializes the InterpolatedPrices object.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.InterpolatedPrices.get_upsampled_data","title":"<code>get_upsampled_data(update_statistics)</code>","text":"<p>Main method to get upsampled data for prices.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.InterpolatedPrices.update","title":"<code>update(update_statistics)</code>","text":"<p>Updates the series from the source based on the latest value.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.InterpolatedPricesLive","title":"<code>InterpolatedPricesLive</code>","text":"<p>Handles interpolated prices for assets.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.InterpolatedPricesLive.__init__","title":"<code>__init__(asset_list, bar_frequency_id, intraday_bar_interpolation_rule, upsample_frequency_id=None, local_kwargs_to_ignore=['asset_list'], *args, **kwargs)</code>","text":"<p>Initializes the InterpolatedPricesLive object.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.InterpolatedPricesLive.get_earliest_value_for_initial_update","title":"<code>get_earliest_value_for_initial_update()</code>","text":"<p>Get the earliest value for the initial update.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.InterpolatedPricesLive.update","title":"<code>update(update_statistics)</code>","text":"<p>Updates the series from the source based on the latest value.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.UpsampleAndInterpolation","title":"<code>UpsampleAndInterpolation</code>","text":"<p>Handles upsampling and interpolation of bar data.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.UpsampleAndInterpolation.get_interpolated_upsampled_bars","title":"<code>get_interpolated_upsampled_bars(calendar, tmp_df, last_observation=None)</code>","text":"<p>Gets interpolated and upsampled bars based on the given parameters. First interpolates the data to fill any gaps, then upsamples it to the desired frequency.</p> <p>Args:     calendar (str): Trading calendar for interpolation and upsampling.     tmp_df (pd.DataFrame): Dataframe containing the bars to be processed.     last_observation (Union[None, pd.Series], optional): Last observed data to fill gaps.</p> <p>Returns:     pd.DataFrame: Interpolated and upsampled bars dataframe.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.UpsampleAndInterpolation.upsample_bars","title":"<code>upsample_bars(bars_df, upsample_frequency_obs, upsample_frequency_td, calendar, open_to_close_time_delta, is_portfolio=False)</code>  <code>staticmethod</code>","text":"<p>Upsamples the bars dataframe based on the given parameters. For example, it can convert 5-minute bars to 1-minute bars. Note that this method works on iloc as the underlying data should be already interpolated so should be completed</p> <p>Args:     bars_df (pd.DataFrame): The bars data to be upsampled.     upsample_frequency_obs (int): Frequency for upsampling.     upsample_frequency_td (object): Time delta for upsampling.     calendar (str): Trading calendar to account for trading hours.     open_to_close_time_delta (datetime.timedelta): Time delta between open and close.     is_portfolio (bool): Whether the data is for a portfolio or a single asset.</p> <p>Returns:     pd.DataFrame: The upsampled bars dataframe.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.get_interpolated_prices_timeseries","title":"<code>get_interpolated_prices_timeseries(assets_configuration)</code>","text":"<p>Creates a Wrapper Timeseries for an asset configuration.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.interpolate_intraday_bars","title":"<code>interpolate_intraday_bars(bars_df, interpolation_rule, bars_frequency_min, calendar, last_observation=None)</code>","text":"<p>Interpolates intraday bars based on the given parameters. Fills in missing data points in intraday bar data in case of gaps.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/prices/utils/","title":"Utils","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/prices/utils/#mainsequence.virtualfundbuilder.contrib.prices.utils","title":"<code>mainsequence.virtualfundbuilder.contrib.prices.utils</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/rebalance_strategies/rebalance_strategies/","title":"Rebalance strategies","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/rebalance_strategies/rebalance_strategies/#mainsequence.virtualfundbuilder.contrib.rebalance_strategies.rebalance_strategies","title":"<code>mainsequence.virtualfundbuilder.contrib.rebalance_strategies.rebalance_strategies</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/rebalance_strategies/rebalance_strategies/#mainsequence.virtualfundbuilder.contrib.rebalance_strategies.rebalance_strategies.ImmediateSignal","title":"<code>ImmediateSignal</code>","text":"<p>               Bases: <code>RebalanceStrategyBase</code></p> <p>This rebalance strategy 'immediately' rebalances the weights. This is equivalent to just using the signal weights.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/rebalance_strategies/rebalance_strategies/#mainsequence.virtualfundbuilder.contrib.rebalance_strategies.rebalance_strategies.ImmediateSignal.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>Initialize the immediate rebalance strategy.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/rebalance_strategies/rebalance_strategies/#mainsequence.virtualfundbuilder.contrib.rebalance_strategies.rebalance_strategies.TimeWeighted","title":"<code>TimeWeighted</code>","text":"<p>               Bases: <code>RebalanceStrategyBase</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/rebalance_strategies/rebalance_strategies/#mainsequence.virtualfundbuilder.contrib.rebalance_strategies.rebalance_strategies.TimeWeighted.__init__","title":"<code>__init__(rebalance_start='9:00', rebalance_end='23:00', rebalance_frequency_strategy=RebalanceFrequencyStrategyName.DAILY, *args, **kwargs)</code>","text":"<p>Initialize the time weighted rebalance strategy.</p> <p>Attributes:     rebalance_start (str): Start time for rebalancing, in \"hh:mm\" format.     rebalance_end (str): End time for rebalancing, in \"hh:mm\" format.     rebalance_frequency_strategy (RebalanceFrequencyStrategyName): Rebalance frequency.     max_percent_volume_in_bar (float): Maximum percentage of volume to trade in a bar.     total_notional (int): Initial notional invested in the strategy.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/rebalance_strategies/rebalance_strategies/#mainsequence.virtualfundbuilder.contrib.rebalance_strategies.rebalance_strategies.TimeWeighted.apply_rebalance_logic","title":"<code>apply_rebalance_logic(last_rebalance_weights, start_date, end_date, signal_weights, prices_df, price_type)</code>","text":"<p>Rebalance weights are set at start_time of rebalancing</p> <p>Parameters:</p> Name Type Description Default <code>signal_weights</code> <code>DataFrame</code> required <code>rebalance_dates</code> required"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/rebalance_strategies/rebalance_strategies/#mainsequence.virtualfundbuilder.contrib.rebalance_strategies.rebalance_strategies.VolumeParticipation","title":"<code>VolumeParticipation</code>","text":"<p>               Bases: <code>RebalanceStrategyBase</code></p> <p>This rebalance strategy implies volume participation with no market impact. i.e. that the execution price will be vwap and it will never execute more than max_percent_volume_in_bar</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/rebalance_strategies/rebalance_strategies/#mainsequence.virtualfundbuilder.contrib.rebalance_strategies.rebalance_strategies.VolumeParticipation.__init__","title":"<code>__init__(rebalance_start='9:00', rebalance_end='23:00', rebalance_frequency_strategy=RebalanceFrequencyStrategyName.DAILY, max_percent_volume_in_bar=0.01, total_notional=50000000, *args, **kwargs)</code>","text":"<p>Initializes the VolumeParticipation strategy.</p> <p>Attributes:     rebalance_start (str): Start time for rebalancing, in \"hh:mm\" format.     rebalance_end (str): End time for rebalancing, in \"hh:mm\" format.     rebalance_frequency_strategy (RebalanceFrequencyStrategyName): Rebalance frequency.     max_percent_volume_in_bar (float): Maximum percentage of volume to trade in a bar.     total_notional (int): Initial notional invested in the strategy.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/rebalance_strategies/rebalance_strategies/#mainsequence.virtualfundbuilder.contrib.rebalance_strategies.rebalance_strategies.VolumeParticipation.apply_rebalance_logic","title":"<code>apply_rebalance_logic(last_rebalance_weights, start_date, end_date, signal_weights, prices_df, price_type)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>signal_weights</code> <code>DataFrame</code> required <code>rebalance_dates</code> required"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/external_weights/","title":"External weights","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/external_weights/#mainsequence.virtualfundbuilder.contrib.time_series.external_weights","title":"<code>mainsequence.virtualfundbuilder.contrib.time_series.external_weights</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/import_valmer/","title":"Import valmer","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/import_valmer/#mainsequence.virtualfundbuilder.contrib.time_series.import_valmer","title":"<code>mainsequence.virtualfundbuilder.contrib.time_series.import_valmer</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/intraday_trend/","title":"Intraday trend","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/intraday_trend/#mainsequence.virtualfundbuilder.contrib.time_series.intraday_trend","title":"<code>mainsequence.virtualfundbuilder.contrib.time_series.intraday_trend</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/intraday_trend/#mainsequence.virtualfundbuilder.contrib.time_series.intraday_trend.IntradayTrend","title":"<code>IntradayTrend</code>","text":"<p>               Bases: <code>WeightsBase</code>, <code>TimeSerie</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/intraday_trend/#mainsequence.virtualfundbuilder.contrib.time_series.intraday_trend.IntradayTrend.__init__","title":"<code>__init__(calendar, source_frequency='1d', *args, **kwargs)</code>","text":"<p>Signal Weights</p> <p>Arguments     source_frequency (str): Frequency of market cap source</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/intraday_trend/#mainsequence.virtualfundbuilder.contrib.time_series.intraday_trend.IntradayTrend.update","title":"<code>update(latest_value, params_for_tree_run=None, *args, **kwargs)</code>","text":"<p>Updates the weights considering rebalance periods and execution frequency.</p> <p>Args:     latest_value Union[datetime, None]: The timestamp of the latest available data.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/market_cap/","title":"Market cap","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/market_cap/#mainsequence.virtualfundbuilder.contrib.time_series.market_cap","title":"<code>mainsequence.virtualfundbuilder.contrib.time_series.market_cap</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/market_cap/#mainsequence.virtualfundbuilder.contrib.time_series.market_cap.FixedWeights","title":"<code>FixedWeights</code>","text":"<p>               Bases: <code>WeightsBase</code>, <code>TimeSerie</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/market_cap/#mainsequence.virtualfundbuilder.contrib.time_series.market_cap.FixedWeights.__init__","title":"<code>__init__(asset_symbol_weights, *args, **kwargs)</code>","text":"<p>Args:     asset_symbol_weights (List[SymbolWeight]): List of SymbolWeights that map asset symbols to weights</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/market_cap/#mainsequence.virtualfundbuilder.contrib.time_series.market_cap.MarketCap","title":"<code>MarketCap</code>","text":"<p>               Bases: <code>WeightsBase</code>, <code>TimeSerie</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/market_cap/#mainsequence.virtualfundbuilder.contrib.time_series.market_cap.MarketCap.__init__","title":"<code>__init__(volatility_control_configuration, minimum_atvr_ratio=0.1, rolling_atvr_volume_windows=[60, 360], frequency_trading_percent=0.9, source_frequency='1d', min_number_of_assets=3, num_top_assets=None, *args, **kwargs)</code>","text":"<p>Signal Weights using weighting by Market Capitalization or Equal Weights</p> <p>Args:     source_frequency (str): Frequency of market cap source.     num_top_assets (Optional[int]): Number of largest assets by market cap to use for signals. Leave empty to include all assets.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/market_cap/#mainsequence.virtualfundbuilder.contrib.time_series.market_cap.MarketCap.update","title":"<code>update(update_statistics)</code>","text":"<p>Args:     latest_value (Union[datetime, None]): The timestamp of the most recent data point.</p> <p>Returns:     DataFrame: A DataFrame containing updated signal weights, indexed by time and asset symbol.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/mock_signal/","title":"Mock signal","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/mock_signal/#mainsequence.virtualfundbuilder.contrib.time_series.mock_signal","title":"<code>mainsequence.virtualfundbuilder.contrib.time_series.mock_signal</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/mock_signal/#mainsequence.virtualfundbuilder.contrib.time_series.mock_signal.MockSignal","title":"<code>MockSignal</code>","text":"<p>               Bases: <code>WeightsBase</code>, <code>TimeSerie</code></p> <p>Mock Signal to test strategies. Creates a signal with long/short of ETH and BTC in frequency.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/mock_signal/#mainsequence.virtualfundbuilder.contrib.time_series.mock_signal.MockSignal.update","title":"<code>update(latest_value, *args, **kwargs)</code>","text":"<p>Args:     latest_value (Union[datetime, None]): The timestamp of the most recent data point.</p> <p>Returns:     DataFrame: A DataFrame containing updated signal weights, indexed by time and asset symbol.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/portfolio_replicator/","title":"Portfolio replicator","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/portfolio_replicator/#mainsequence.virtualfundbuilder.contrib.time_series.portfolio_replicator","title":"<code>mainsequence.virtualfundbuilder.contrib.time_series.portfolio_replicator</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/portfolio_replicator/#mainsequence.virtualfundbuilder.contrib.time_series.portfolio_replicator.ETFReplicator","title":"<code>ETFReplicator</code>","text":"<p>               Bases: <code>WeightsBase</code>, <code>TimeSerie</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/portfolio_replicator/#mainsequence.virtualfundbuilder.contrib.time_series.portfolio_replicator.ETFReplicator.__init__","title":"<code>__init__(symbol_to_replicate, tracking_strategy_configuration, in_window=60, tracking_strategy=TrackingStrategy.LASSO, *args, **kwargs)</code>","text":"<p>Initialize the ETFReplicator.</p> <p>Args:     symbol_to_replicate (str): Symbol of the asset to replicate. Must be included in the signals asset universe.     tracking_strategy_configuration (TrackingStrategyConfiguration): Configuration parameters for the tracking strategy.     in_window (int, optional): The size of the rolling window for regression. Defaults to 60.     tracking_strategy (TrackingStrategy, optional): The regression strategy to use for tracking. Defaults to TrackingStrategy.LASSO.     args: Variable length argument list.     *kwargs: Arbitrary keyword arguments.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/portfolio_replicator/#mainsequence.virtualfundbuilder.contrib.time_series.portfolio_replicator.rolling_elastic_net","title":"<code>rolling_elastic_net(y, X, window, alpha=1.0, l1_ratio=0.5)</code>","text":"<p>Perform rolling Elastic Net regression and return the coefficients.</p> <p>Parameters:     y (pd.Series): Target variable.     X (pd.DataFrame): Feature variables.     window (int): Size of the rolling window.     alpha (float, optional): Regularization strength. Defaults to 1.0.     l1_ratio (float, optional): The ElasticNet mixing parameter. Defaults to 0.5.</p> <p>Returns:     np.ndarray: Array of coefficients for each rolling window.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/portfolio_replicator/#mainsequence.virtualfundbuilder.contrib.time_series.portfolio_replicator.rolling_lasso_regression","title":"<code>rolling_lasso_regression(y, X, window, alpha=1.0, *args, **kwargs)</code>","text":"<p>Perform rolling Lasso regression and return the coefficients.</p> <p>Parameters:     y (pd.Series): Target variable.     X (pd.DataFrame): Feature variables.     window (int): Size of the rolling window.     alpha (float, optional): Regularization strength. Defaults to 1.0.</p> <p>Returns:     list: List of DataFrames containing the coefficients for each rolling window.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/portfolio_replicator/#mainsequence.virtualfundbuilder.contrib.time_series.portfolio_replicator.rolling_pca_betas","title":"<code>rolling_pca_betas(X, window, n_components=5, *args, **kwargs)</code>","text":"<p>Perform rolling PCA and return the betas (normalized principal component weights).</p> <p>Parameters:     X (pd.DataFrame): DataFrame of stock returns or feature data (rows are time, columns are assets).     window (int): The size of the rolling window.     n_components (int, optional): The number of principal components to extract. Defaults to 5.</p> <p>Returns:     np.ndarray: An array of normalized PCA weights for each rolling window.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/sentiment_signal/","title":"Sentiment signal","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/sentiment_signal/#mainsequence.virtualfundbuilder.contrib.time_series.sentiment_signal","title":"<code>mainsequence.virtualfundbuilder.contrib.time_series.sentiment_signal</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/sentiment_signal/#mainsequence.virtualfundbuilder.contrib.time_series.sentiment_signal.SentimentSignal","title":"<code>SentimentSignal</code>","text":"<p>               Bases: <code>WeightsBase</code>, <code>TimeSerie</code></p> <p>Calculates portfolio weights based on aggregated news sentiment from Polygon.io. Weights are proportional to a score calculated as (Positive Articles - Negative Articles). Assets with insufficient recent news sentiment are excluded. This class acts as a TimeSerie node providing daily sentiment-based signal weights, starting from OFFSET_START on the first run.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/sentiment_signal/#mainsequence.virtualfundbuilder.contrib.time_series.sentiment_signal.SentimentSignal.maximum_forward_fill","title":"<code>maximum_forward_fill()</code>","text":"<p>Signal is daily, so valid for slightly less than a day.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/contrib/time_series/sentiment_signal/#mainsequence.virtualfundbuilder.contrib.time_series.sentiment_signal.SentimentSignal.update","title":"<code>update(update_statistics)</code>","text":"<p>Calculates daily sentiment weights for the required date range.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/portfolio_templates/crypto_index_template/","title":"Crypto index template","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/portfolio_templates/crypto_index_template/#mainsequence.virtualfundbuilder.portfolio_templates.crypto_index_template","title":"<code>mainsequence.virtualfundbuilder.portfolio_templates.crypto_index_template</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/portfolio_templates/momentum_portfolio/","title":"Momentum portfolio","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/portfolio_templates/momentum_portfolio/#mainsequence.virtualfundbuilder.portfolio_templates.momentum_portfolio","title":"<code>mainsequence.virtualfundbuilder.portfolio_templates.momentum_portfolio</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/app_factory/","title":"App factory","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/app_factory/#mainsequence.virtualfundbuilder.resource_factory.app_factory","title":"<code>mainsequence.virtualfundbuilder.resource_factory.app_factory</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/app_factory/#mainsequence.virtualfundbuilder.resource_factory.app_factory.HtmlApp","title":"<code>HtmlApp</code>","text":"<p>               Bases: <code>BaseApp</code></p> <p>A base class for apps that generate HTML output.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/app_factory/#mainsequence.virtualfundbuilder.resource_factory.app_factory.HtmlApp.__init_subclass__","title":"<code>__init_subclass__(**kwargs)</code>","text":"<p>Wraps the subclass's <code>run</code> method to add validation and saving logic.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/app_factory/#mainsequence.virtualfundbuilder.resource_factory.app_factory.HtmlApp.run","title":"<code>run()</code>  <code>abstractmethod</code>","text":"<p>This method should be implemented by subclasses to return HTML content as a string. The base class will handle saving the output.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/app_factory/#mainsequence.virtualfundbuilder.resource_factory.app_factory.register_app","title":"<code>register_app(name=None, register_in_agent=True)</code>","text":"<p>Decorator to register a model class in the factory. If <code>name</code> is not provided, the class's name is used as the key.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/base_factory/","title":"Base factory","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/base_factory/#mainsequence.virtualfundbuilder.resource_factory.base_factory","title":"<code>mainsequence.virtualfundbuilder.resource_factory.base_factory</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/base_factory/#mainsequence.virtualfundbuilder.resource_factory.base_factory.BaseResource","title":"<code>BaseResource</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/base_factory/#mainsequence.virtualfundbuilder.resource_factory.base_factory.BaseResource.get_source_notebook","title":"<code>get_source_notebook()</code>  <code>classmethod</code>","text":"<p>Retrieve the exact source code of the class from notebook cells.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/base_factory/#mainsequence.virtualfundbuilder.resource_factory.base_factory.insert_in_registry","title":"<code>insert_in_registry(registry, cls, register_in_agent, name=None, attributes=None)</code>","text":"<p>helper for strategy decorators</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/base_factory/#mainsequence.virtualfundbuilder.resource_factory.base_factory.send_resource_to_backend","title":"<code>send_resource_to_backend(resource_class, attributes=None)</code>","text":"<p>Helper function to send the strategy payload to the registry. Parses the arguments of the classes init function and the init functions of the parent classes</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/rebalance_factory/","title":"Rebalance factory","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/rebalance_factory/#mainsequence.virtualfundbuilder.resource_factory.rebalance_factory","title":"<code>mainsequence.virtualfundbuilder.resource_factory.rebalance_factory</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/rebalance_factory/#mainsequence.virtualfundbuilder.resource_factory.rebalance_factory.RebalanceStrategyBase","title":"<code>RebalanceStrategyBase</code>","text":"<p>               Bases: <code>BaseResource</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/rebalance_factory/#mainsequence.virtualfundbuilder.resource_factory.rebalance_factory.RebalanceStrategyBase.calendar","title":"<code>calendar</code>  <code>property</code>","text":"<p>Workaround due to error when pickleing the calendar</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/rebalance_factory/#mainsequence.virtualfundbuilder.resource_factory.rebalance_factory.RebalanceStrategyBase.__init__","title":"<code>__init__(calendar='24/7', *args, **kwargs)</code>","text":"<p>Args:     calendar (str): Trading calendar. The string should must be valid calendar from the pandas_market_calendars (like '24/7' or 'NYSE')</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/rebalance_factory/#mainsequence.virtualfundbuilder.resource_factory.rebalance_factory.RebalanceStrategyBase.calculate_rebalance_dates","title":"<code>calculate_rebalance_dates(start, end, calendar, rebalance_frequency_strategy)</code>","text":"<p>Determines the dates on which portfolio rebalancing should be executed based on the specified rebalancing strategy. This calculation takes into account the start time of the rebalancing window and the execution frequency.</p> <p>Args:     start (pd.DataFrame): A datetime containing the start time</p> <p>Returns:     pd.DatetimeIndex: A DatetimeIndex containing all the dates when rebalancing should occur.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/rebalance_factory/#mainsequence.virtualfundbuilder.resource_factory.rebalance_factory.register_rebalance_class","title":"<code>register_rebalance_class(name=None, register_in_agent=True)</code>","text":"<p>Decorator to register a model class in the factory. If <code>name</code> is not provided, the class's name is used as the key.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/signal_factory/","title":"Signal factory","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/signal_factory/#mainsequence.virtualfundbuilder.resource_factory.signal_factory","title":"<code>mainsequence.virtualfundbuilder.resource_factory.signal_factory</code>","text":""},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/signal_factory/#mainsequence.virtualfundbuilder.resource_factory.signal_factory.SignalWeightsFactory","title":"<code>SignalWeightsFactory</code>","text":"<p>               Bases: <code>BaseFactory</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/signal_factory/#mainsequence.virtualfundbuilder.resource_factory.signal_factory.SignalWeightsFactory.get_signal_weights_strategies","title":"<code>get_signal_weights_strategies()</code>  <code>staticmethod</code>","text":"<p>Scans the given directory for Python files, imports the classes, and returns all classes that are subclasses of WeightsBase.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/signal_factory/#mainsequence.virtualfundbuilder.resource_factory.signal_factory.SignalWeightsFactory.get_signal_weights_strategy","title":"<code>get_signal_weights_strategy(signal_weights_name)</code>  <code>staticmethod</code>","text":"<p>Creates an instance of the appropriate SignalWeights class based on the provided name.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/signal_factory/#mainsequence.virtualfundbuilder.resource_factory.signal_factory.WeightsBase","title":"<code>WeightsBase</code>","text":"<p>               Bases: <code>BaseResource</code></p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/signal_factory/#mainsequence.virtualfundbuilder.resource_factory.signal_factory.WeightsBase.__init__","title":"<code>__init__(signal_assets_configuration, *args, **kwargs)</code>","text":"<p>Base Class for all signal weights</p> <p>Attributes:     assets_configuration (AssetsConfiguration): Configuration details for signal assets.</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/signal_factory/#mainsequence.virtualfundbuilder.resource_factory.signal_factory.WeightsBase.interpolate_index","title":"<code>interpolate_index(new_index)</code>","text":"<p>Get interpolated weights for a time index. Weights are only valid for a certain time, therefore forward fill is limited. Especially needed for gaps within the weights</p>"},{"location":"/home/jose/code/MainSequenceClientSide/mainsequence-sdk/docs/reference/virtualfundbuilder/resource_factory/signal_factory/#mainsequence.virtualfundbuilder.resource_factory.signal_factory.register_signal_class","title":"<code>register_signal_class(name=None, register_in_agent=True)</code>","text":"<p>Decorator to register a model class in the factory. If <code>name</code> is not provided, the class's name is used as the key.</p>"},{"location":"examples/","title":"Examples","text":"<p>This repository contains a collection of independent Jupyter notebooks designed to clearly illustrate the functionality of the Main Sequence SDK. Each notebook demonstrates a specific use case, providing practical insights into the SDK's capabilities.</p> <p>You can explore the full set of examples here: Main Sequence SDK Examples Repository</p> <p>Below are categorized examples for easier navigation.</p>"},{"location":"examples/#root","title":"Root","text":""},{"location":"examples/#getting_started","title":"getting_started","text":"<ul> <li>Getting Started.ipynb</li> <li>Portfolio Mock Execution.ipynb</li> </ul>"},{"location":"examples/#markets","title":"markets","text":""},{"location":"examples/#accounts","title":"accounts","text":"<ul> <li>accounts_tutorial.ipynb</li> </ul>"},{"location":"examples/#assets","title":"assets","text":"<ul> <li>asset_category_tutorial.ipynb</li> <li>assets_tutorial.ipynb</li> </ul>"},{"location":"examples/#portfolios","title":"portfolios","text":"<ul> <li>create_portfolio_with_agent.ipynb</li> <li>portfolio_building_tutorial.ipynb</li> </ul>"},{"location":"examples/#time_series_details","title":"time_series_details","text":"<ul> <li>data_sources_tutorial.ipynb</li> </ul>"},{"location":"examples/#time_series","title":"time_series","text":""},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>client<ul> <li>ai</li> <li>base</li> <li>data_sources_interfaces<ul> <li>duckdb</li> <li>timescale</li> </ul> </li> <li>models_helpers</li> <li>models_tdag</li> <li>models_vam</li> <li>utils</li> </ul> </li> <li>instrumentation<ul> <li>utils</li> </ul> </li> <li>logconf</li> <li>tdag<ul> <li>config</li> <li>distributed<ul> <li>time_series</li> <li>utils</li> </ul> </li> <li>future_registry</li> <li>time_series<ul> <li>persist_managers</li> <li>time_series</li> <li>update<ul> <li>api</li> <li>ray_manager</li> <li>scheduler</li> <li>update_methods</li> <li>utils</li> </ul> </li> <li>utils</li> </ul> </li> <li>utils</li> </ul> </li> <li>virtualfundbuilder<ul> <li>agent_interface</li> <li>config_handling</li> <li>contrib<ul> <li>apps<ul> <li>generate_report</li> <li>load_external_portfolio</li> <li>news_app</li> <li>portfolio_report_app</li> <li>portfolio_table</li> <li>run_named_portfolio</li> <li>run_portfolio</li> </ul> </li> <li>prices<ul> <li>time_series</li> <li>utils</li> </ul> </li> <li>rebalance_strategies<ul> <li>rebalance_strategies</li> </ul> </li> <li>time_series<ul> <li>external_weights</li> <li>import_valmer</li> <li>intraday_trend</li> <li>market_cap</li> <li>mock_signal</li> <li>portfolio_replicator</li> <li>sentiment_signal</li> </ul> </li> </ul> </li> <li>enums</li> <li>models</li> <li>notebook_handling</li> <li>portfolio_interface</li> <li>portfolio_templates<ul> <li>crypto_index_template</li> <li>momentum_portfolio</li> </ul> </li> <li>resource_factory<ul> <li>app_factory</li> <li>base_factory</li> <li>rebalance_factory</li> <li>signal_factory</li> </ul> </li> <li>time_series</li> <li>utils</li> </ul> </li> </ul>"},{"location":"reference/logconf/","title":"logconf","text":""},{"location":"reference/logconf/#mainsequence.logconf","title":"<code>mainsequence.logconf</code>","text":""},{"location":"reference/logconf/#mainsequence.logconf.build_application_logger","title":"<code>build_application_logger(application_name='ms-sdk', **metadata)</code>","text":"<p>Create a logger that logs to console and file in JSON format.</p>"},{"location":"reference/logconf/#mainsequence.logconf.extract_from_record","title":"<code>extract_from_record(_, __, event_dict)</code>","text":"<p>Extract thread and process names and add them to the event dict.</p>"},{"location":"reference/client/ai/","title":"ai","text":""},{"location":"reference/client/ai/#mainsequence.client.ai","title":"<code>mainsequence.client.ai</code>","text":""},{"location":"reference/client/base/","title":"base","text":""},{"location":"reference/client/base/#mainsequence.client.base","title":"<code>mainsequence.client.base</code>","text":""},{"location":"reference/client/base/#mainsequence.client.base.BaseObjectOrm","title":"<code>BaseObjectOrm</code>","text":""},{"location":"reference/client/base/#mainsequence.client.base.BaseObjectOrm.filter","title":"<code>filter(timeout=None, **kwargs)</code>  <code>classmethod</code>","text":"<p>Fetches all pages from a DRF-paginated endpoint. Accumulates results from each page until 'next' is None.</p> <p>Returns a list of <code>cls</code> objects (not just one page).</p> <p>DRF's typical paginated response looks like:     {       \"count\": ,       \"next\": ,       \"previous\": ,       \"results\": [ ...items... ]     }"},{"location":"reference/client/base/#mainsequence.client.base.BaseObjectOrm.get","title":"<code>get(pk=None, timeout=None, **filters)</code>  <code>classmethod</code>","text":"<p>Retrieves exactly one object by primary key: GET /base_url// Raises <code>DoesNotExist</code> if 404 or the response is empty. Raises Exception if multiple or unexpected data is returned."},{"location":"reference/client/models_helpers/","title":"models_helpers","text":""},{"location":"reference/client/models_helpers/#mainsequence.client.models_helpers","title":"<code>mainsequence.client.models_helpers</code>","text":""},{"location":"reference/client/models_helpers/#mainsequence.client.models_helpers.AccountLatestHoldings","title":"<code>AccountLatestHoldings</code>","text":"<p>               Bases: <code>AccountHistoricalHoldingsMixin</code>, <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p> <p>Same as Account HistoricalHoldings but Does not include related account</p>"},{"location":"reference/client/models_helpers/#mainsequence.client.models_helpers.AssetCategory","title":"<code>AssetCategory</code>","text":"<p>               Bases: <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p>"},{"location":"reference/client/models_helpers/#mainsequence.client.models_helpers.AssetCategory.append_assets","title":"<code>append_assets(asset_ids)</code>","text":"<p>Append the given asset IDs to this category. Expects a payload: {\"assets\": [, , ...]}"},{"location":"reference/client/models_helpers/#mainsequence.client.models_helpers.AssetCategory.remove_assets","title":"<code>remove_assets(asset_ids)</code>","text":"<p>Remove the given asset IDs from this category. Expects a payload: {\"assets\": [, , ...]}"},{"location":"reference/client/models_helpers/#mainsequence.client.models_helpers.AssetMixin","title":"<code>AssetMixin</code>","text":"<p>               Bases: <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p>"},{"location":"reference/client/models_helpers/#mainsequence.client.models_helpers.AssetMixin.filter_with_asset_class","title":"<code>filter_with_asset_class(timeout=None, include_relationship_details_depth=None, *args, **kwargs)</code>  <code>classmethod</code>","text":"<p>Filters assets and returns instances with their correct asset class,</p>"},{"location":"reference/client/models_helpers/#mainsequence.client.models_helpers.AssetMixin.pretty_print","title":"<code>pretty_print()</code>","text":"<p>Print all asset properties in a neat, aligned table.</p>"},{"location":"reference/client/models_helpers/#mainsequence.client.models_helpers.AssetTranslationTable","title":"<code>AssetTranslationTable</code>","text":"<p>               Bases: <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p> <p>Mirrors the Django model 'AssetTranslationTableModel' in the backend.</p>"},{"location":"reference/client/models_helpers/#mainsequence.client.models_helpers.AssetTranslationTable.add_rules","title":"<code>add_rules(rules, open_for_everyone=False)</code>","text":"<p>Add each rule to the translation table by calling the backend's 'add_rule' endpoint. Prevents local duplication. If the server also rejects a duplicate, it returns an error which we silently ignore.</p>"},{"location":"reference/client/models_helpers/#mainsequence.client.models_helpers.AssetTranslationTable.remove_rules","title":"<code>remove_rules(rules)</code>","text":"<p>Remove each rule from the translation table by calling the backend's 'remove_rule' endpoint. Once successfully removed on the server, remove it from the local list <code>self.rules</code>. If a rule is not found on the server, we skip silently.</p>"},{"location":"reference/client/models_helpers/#mainsequence.client.models_helpers.BaseObjectOrm","title":"<code>BaseObjectOrm</code>","text":""},{"location":"reference/client/models_helpers/#mainsequence.client.models_helpers.BaseObjectOrm.filter","title":"<code>filter(timeout=None, **kwargs)</code>  <code>classmethod</code>","text":"<p>Fetches all pages from a DRF-paginated endpoint. Accumulates results from each page until 'next' is None.</p> <p>Returns a list of <code>cls</code> objects (not just one page).</p> <p>DRF's typical paginated response looks like:     {       \"count\": ,       \"next\": ,       \"previous\": ,       \"results\": [ ...items... ]     }"},{"location":"reference/client/models_helpers/#mainsequence.client.models_helpers.BaseObjectOrm.get","title":"<code>get(pk=None, timeout=None, **filters)</code>  <code>classmethod</code>","text":"<p>Retrieves exactly one object by primary key: GET /base_url// Raises <code>DoesNotExist</code> if 404 or the response is empty. Raises Exception if multiple or unexpected data is returned."},{"location":"reference/client/models_helpers/#mainsequence.client.models_helpers.HistoricalWeights","title":"<code>HistoricalWeights</code>","text":"<p>               Bases: <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p>"},{"location":"reference/client/models_helpers/#mainsequence.client.models_helpers.HistoricalWeights.add_from_time_serie","title":"<code>add_from_time_serie(local_time_serie_id, positions_list, weights_date, comments=None, timeout=None)</code>  <code>classmethod</code>","text":"<p>:param session: :return:</p>"},{"location":"reference/client/models_helpers/#mainsequence.client.models_helpers.Order","title":"<code>Order</code>","text":"<p>               Bases: <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p>"},{"location":"reference/client/models_helpers/#mainsequence.client.models_helpers.Order.create_or_update","title":"<code>create_or_update(order_time_stamp, *args, **kwargs)</code>  <code>classmethod</code>","text":"<p>Args:     order_time: timestamp     args:     *kwargs:</p> <p>Returns:</p>"},{"location":"reference/client/models_helpers/#mainsequence.client.models_helpers.TranslationError","title":"<code>TranslationError</code>","text":"<p>               Bases: <code>RuntimeError</code></p> <p>Raised when no translation rule (or more than one) matches an asset.</p>"},{"location":"reference/client/models_helpers/#mainsequence.client.models_helpers.get_model_class","title":"<code>get_model_class(model_class)</code>","text":"<p>Reverse look from model class by name</p>"},{"location":"reference/client/models_tdag/","title":"models_tdag","text":""},{"location":"reference/client/models_tdag/#mainsequence.client.models_tdag","title":"<code>mainsequence.client.models_tdag</code>","text":""},{"location":"reference/client/models_tdag/#mainsequence.client.models_tdag.DataUpdates","title":"<code>DataUpdates</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>This class contains the  update details of the table in the main sequence engine</p>"},{"location":"reference/client/models_tdag/#mainsequence.client.models_tdag.DataUpdates.__iter__","title":"<code>__iter__()</code>","text":"<p>Iterate over keys.</p>"},{"location":"reference/client/models_tdag/#mainsequence.client.models_tdag.DataUpdates.filter_df_by_latest_value","title":"<code>filter_df_by_latest_value(df)</code>","text":"<p>:param df: :return:</p>"},{"location":"reference/client/models_tdag/#mainsequence.client.models_tdag.DynamicTableDataSource","title":"<code>DynamicTableDataSource</code>","text":"<p>               Bases: <code>BasePydanticModel</code>, <code>BaseObjectOrm</code></p>"},{"location":"reference/client/models_tdag/#mainsequence.client.models_tdag.DynamicTableDataSource.model_dump_json","title":"<code>model_dump_json(**json_dumps_kwargs)</code>","text":"<p>Dump the current instance to a JSON string, ensuring that the dependent <code>related_resource</code> is also properly dumped.</p>"},{"location":"reference/client/models_tdag/#mainsequence.client.models_tdag.DynamicTableHelpers","title":"<code>DynamicTableHelpers</code>","text":""},{"location":"reference/client/models_tdag/#mainsequence.client.models_tdag.DynamicTableHelpers.get_update_statistics","title":"<code>get_update_statistics(hash_id)</code>","text":"<p>Gets latest value from Hash_id</p>"},{"location":"reference/client/models_tdag/#mainsequence.client.models_tdag.LocalTimeSerie","title":"<code>LocalTimeSerie</code>","text":"<p>               Bases: <code>BasePydanticModel</code>, <code>BaseObjectOrm</code></p>"},{"location":"reference/client/models_tdag/#mainsequence.client.models_tdag.LocalTimeSerie.get_data_between_dates_from_api","title":"<code>get_data_between_dates_from_api(start_date=None, end_date=None, great_or_equal=None, less_or_equal=None, unique_identifier_list=None, columns=None, unique_identifier_range_map=None)</code>","text":"<p>Helper function to make a single batch request (or multiple paged requests if next_offset).</p>"},{"location":"reference/client/models_tdag/#mainsequence.client.models_tdag.LocalTimeSerie.get_metadatas_and_set_updates","title":"<code>get_metadatas_and_set_updates(local_time_series_ids, update_details_kwargs, update_priority_dict)</code>  <code>classmethod</code>","text":"<p>{'local_hash_id__in': [{'local_hash_id': 'alpacaequitybarstest_97018e7280c1bad321b3f4153cc7e986', 'data_source_id': 1}, :param local_hash_id__in: :param multi_index_asset_symbols_filter: :param update_details_kwargs: :param update_priority_dict: :return:</p>"},{"location":"reference/client/models_tdag/#mainsequence.client.models_tdag.LocalTimeSerie.post_data_frame_in_chunks","title":"<code>post_data_frame_in_chunks(serialized_data_frame, chunk_size=50000, local_metadata=None, data_source=None, index_names=None, time_index_name='timestamp', overwrite=False)</code>  <code>classmethod</code>","text":"<p>Sends a large DataFrame to a Django backend in multiple chunks.</p> <p>:param serialized_data_frame: The DataFrame to upload. :param url: The endpoint URL (e.g. https://yourapi.com/upload-chunk/). :param chunk_size: Number of rows per chunk. :param local_metadata: General metadata dict you want to send with each chunk. :param data_source: Additional info about the source of the data. :param index_names: Index columns in the DataFrame. :param time_index_name: The column name used for time indexing. :param overwrite: Boolean indicating whether existing data should be overwritten.</p>"},{"location":"reference/client/models_tdag/#mainsequence.client.models_tdag.LocalTimeSerie.verify_if_direct_dependencies_are_updated","title":"<code>verify_if_direct_dependencies_are_updated()</code>","text":"<p>Response({     \"error_on_update_dependencies\": False,     \"updated\": all_success, })</p>"},{"location":"reference/client/models_tdag/#mainsequence.client.models_tdag.Scheduler","title":"<code>Scheduler</code>","text":"<p>               Bases: <code>BasePydanticModel</code>, <code>BaseObjectOrm</code></p>"},{"location":"reference/client/models_tdag/#mainsequence.client.models_tdag.Scheduler.stop_heart_beat","title":"<code>stop_heart_beat()</code>","text":"<p>Stop the heartbeat gracefully.</p>"},{"location":"reference/client/models_tdag/#mainsequence.client.models_tdag.SourceTableConfiguration","title":"<code>SourceTableConfiguration</code>","text":"<p>               Bases: <code>BasePydanticModel</code>, <code>BaseObjectOrm</code></p>"},{"location":"reference/client/models_tdag/#mainsequence.client.models_tdag.SourceTableConfiguration.set_or_update_columns_metadata","title":"<code>set_or_update_columns_metadata(columns_metadata, timeout=None)</code>","text":""},{"location":"reference/client/models_vam/","title":"models_vam","text":""},{"location":"reference/client/models_vam/#mainsequence.client.models_vam","title":"<code>mainsequence.client.models_vam</code>","text":""},{"location":"reference/client/models_vam/#mainsequence.client.models_vam.AccountLatestHoldings","title":"<code>AccountLatestHoldings</code>","text":"<p>               Bases: <code>AccountHistoricalHoldingsMixin</code>, <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p> <p>Same as Account HistoricalHoldings but Does not include related account</p>"},{"location":"reference/client/models_vam/#mainsequence.client.models_vam.AssetCategory","title":"<code>AssetCategory</code>","text":"<p>               Bases: <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p>"},{"location":"reference/client/models_vam/#mainsequence.client.models_vam.AssetCategory.append_assets","title":"<code>append_assets(asset_ids)</code>","text":"<p>Append the given asset IDs to this category. Expects a payload: {\"assets\": [, , ...]}"},{"location":"reference/client/models_vam/#mainsequence.client.models_vam.AssetCategory.remove_assets","title":"<code>remove_assets(asset_ids)</code>","text":"<p>Remove the given asset IDs from this category. Expects a payload: {\"assets\": [, , ...]}"},{"location":"reference/client/models_vam/#mainsequence.client.models_vam.AssetMixin","title":"<code>AssetMixin</code>","text":"<p>               Bases: <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p>"},{"location":"reference/client/models_vam/#mainsequence.client.models_vam.AssetMixin.filter_with_asset_class","title":"<code>filter_with_asset_class(timeout=None, include_relationship_details_depth=None, *args, **kwargs)</code>  <code>classmethod</code>","text":"<p>Filters assets and returns instances with their correct asset class,</p>"},{"location":"reference/client/models_vam/#mainsequence.client.models_vam.AssetMixin.pretty_print","title":"<code>pretty_print()</code>","text":"<p>Print all asset properties in a neat, aligned table.</p>"},{"location":"reference/client/models_vam/#mainsequence.client.models_vam.AssetTranslationTable","title":"<code>AssetTranslationTable</code>","text":"<p>               Bases: <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p> <p>Mirrors the Django model 'AssetTranslationTableModel' in the backend.</p>"},{"location":"reference/client/models_vam/#mainsequence.client.models_vam.AssetTranslationTable.add_rules","title":"<code>add_rules(rules, open_for_everyone=False)</code>","text":"<p>Add each rule to the translation table by calling the backend's 'add_rule' endpoint. Prevents local duplication. If the server also rejects a duplicate, it returns an error which we silently ignore.</p>"},{"location":"reference/client/models_vam/#mainsequence.client.models_vam.AssetTranslationTable.remove_rules","title":"<code>remove_rules(rules)</code>","text":"<p>Remove each rule from the translation table by calling the backend's 'remove_rule' endpoint. Once successfully removed on the server, remove it from the local list <code>self.rules</code>. If a rule is not found on the server, we skip silently.</p>"},{"location":"reference/client/models_vam/#mainsequence.client.models_vam.HistoricalWeights","title":"<code>HistoricalWeights</code>","text":"<p>               Bases: <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p>"},{"location":"reference/client/models_vam/#mainsequence.client.models_vam.HistoricalWeights.add_from_time_serie","title":"<code>add_from_time_serie(local_time_serie_id, positions_list, weights_date, comments=None, timeout=None)</code>  <code>classmethod</code>","text":"<p>:param session: :return:</p>"},{"location":"reference/client/models_vam/#mainsequence.client.models_vam.Order","title":"<code>Order</code>","text":"<p>               Bases: <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p>"},{"location":"reference/client/models_vam/#mainsequence.client.models_vam.Order.create_or_update","title":"<code>create_or_update(order_time_stamp, *args, **kwargs)</code>  <code>classmethod</code>","text":"<p>Args:     order_time: timestamp     args:     *kwargs:</p> <p>Returns:</p>"},{"location":"reference/client/models_vam/#mainsequence.client.models_vam.TranslationError","title":"<code>TranslationError</code>","text":"<p>               Bases: <code>RuntimeError</code></p> <p>Raised when no translation rule (or more than one) matches an asset.</p>"},{"location":"reference/client/models_vam/#mainsequence.client.models_vam.get_model_class","title":"<code>get_model_class(model_class)</code>","text":"<p>Reverse look from model class by name</p>"},{"location":"reference/client/utils/","title":"utils","text":""},{"location":"reference/client/utils/#mainsequence.client.utils","title":"<code>mainsequence.client.utils</code>","text":""},{"location":"reference/client/utils/#mainsequence.client.utils.LazyConstants","title":"<code>LazyConstants</code>","text":"<p>               Bases: <code>dict</code></p> <p>Class Method to load constants only once they are called. this minimizes the calls to the API</p>"},{"location":"reference/client/utils/#mainsequence.client.utils.LazyConstants.to_attr_dict","title":"<code>to_attr_dict(data)</code>","text":"<p>Recursively convert a Python dict into an object that allows dot-notation access. Non-dict values (e.g., int, str, list) are returned as-is; dicts become _AttrDict.</p>"},{"location":"reference/client/utils/#mainsequence.client.utils.bios_uuid","title":"<code>bios_uuid()</code>","text":"<p>Best\u2011effort hardware/OS identifier that never returns None.</p> Order of preference <ol> <li><code>/sys/class/dmi/id/product_uuid</code>          (kernel\u2011exported, no root)</li> <li><code>dmidecode -s system-uuid</code>                (requires root and dmidecode)</li> <li><code>/etc/machine-id</code> or <code>/var/lib/dbus/machine-id</code></li> <li><code>uuid.getnode()</code> (MAC address as 48\u2011bit int, zero\u2011padded hex)</li> </ol> <p>The value is always lower\u2011case and stripped of whitespace.</p>"},{"location":"reference/client/utils/#mainsequence.client.utils.is_process_running","title":"<code>is_process_running(pid)</code>","text":"<p>Check if a process with the given PID is running.</p> <p>Args:     pid (int): The process ID to check.</p> <p>Returns:     bool: True if the process is running, False otherwise.</p>"},{"location":"reference/client/data_sources_interfaces/duckdb/","title":"duckdb","text":""},{"location":"reference/client/data_sources_interfaces/duckdb/#mainsequence.client.data_sources_interfaces.duckdb","title":"<code>mainsequence.client.data_sources_interfaces.duckdb</code>","text":""},{"location":"reference/client/data_sources_interfaces/duckdb/#mainsequence.client.data_sources_interfaces.duckdb.DuckDBInterface","title":"<code>DuckDBInterface</code>","text":"<p>Persist/serve (time_index, unique_identifier, \u2026) DataFrames in a DuckDB file.</p>"},{"location":"reference/client/data_sources_interfaces/duckdb/#mainsequence.client.data_sources_interfaces.duckdb.DuckDBInterface.__init__","title":"<code>__init__(db_path=None)</code>","text":"<p>Initializes the interface with the path to the DuckDB database file.</p> <p>Args:     db_path (Optional[str | Path]): Path to the database file.                                      Defaults to the value of the DUCKDB_PATH                                      environment variable or 'analytics.duckdb'                                      in the current directory if the variable is not set.</p>"},{"location":"reference/client/data_sources_interfaces/duckdb/#mainsequence.client.data_sources_interfaces.duckdb.DuckDBInterface.drop_table","title":"<code>drop_table(table)</code>","text":"<p>Drops the specified table from the database.</p> <p>Args:     table (str): The name of the table to drop.</p>"},{"location":"reference/client/data_sources_interfaces/duckdb/#mainsequence.client.data_sources_interfaces.duckdb.DuckDBInterface.list_tables","title":"<code>list_tables()</code>","text":"<p>Lists all user-defined tables in the main schema of the database.</p> <p>Returns:     List[str]: A list of table names. Returns an empty list if the                database file does not exist or on error.</p>"},{"location":"reference/client/data_sources_interfaces/duckdb/#mainsequence.client.data_sources_interfaces.duckdb.DuckDBInterface.read","title":"<code>read(table, *, start=None, end=None, great_or_equal=True, less_or_equal=True, ids=None, columns=None, unique_identifier_range_map=None)</code>","text":"<p>Reads data from the specified table, with optional filtering. Handles missing tables by returning an empty DataFrame.</p> <p>Args:     table (str): The name of the table to read from.     start (Optional[datetime.datetime]): Minimum time_index filter.     end (Optional[datetime.datetime]): Maximum time_index filter.     great_or_equal (bool): If True, use &gt;= for start date comparison. Defaults to True.     less_or_equal (bool): If True, use &lt;= for end date comparison. Defaults to True.     ids (Optional[List[str]]): List of specific unique_identifiers to include.     columns (Optional[List[str]]): Specific columns to select. Reads all if None.     unique_identifier_range_map (Optional[UniqueIdentifierRangeMap]):         A map where keys are unique_identifiers and values are dicts specifying         date ranges (start_date, end_date, start_date_operand, end_date_operand)         for that identifier. Mutually exclusive with 'ids'.</p> <p>Returns:     pd.DataFrame: The queried data, or an empty DataFrame if the table doesn't exist.</p> <p>Raises:     ValueError: If both <code>ids</code> and <code>unique_identifier_range_map</code> are provided.</p>"},{"location":"reference/client/data_sources_interfaces/duckdb/#mainsequence.client.data_sources_interfaces.duckdb.DuckDBInterface.upsert","title":"<code>upsert(df, table)</code>","text":"<p>Idempotently writes a DataFrame into table using (time_index, uid) PK. Extra columns are added to the table automatically.</p> <p>Args:     df (pd.DataFrame): DataFrame to upsert.     table (str): Target table name.</p>"},{"location":"reference/client/data_sources_interfaces/timescale/","title":"timescale","text":""},{"location":"reference/client/data_sources_interfaces/timescale/#mainsequence.client.data_sources_interfaces.timescale","title":"<code>mainsequence.client.data_sources_interfaces.timescale</code>","text":""},{"location":"reference/client/data_sources_interfaces/timescale/#mainsequence.client.data_sources_interfaces.timescale.direct_data_from_db","title":"<code>direct_data_from_db(local_metadata, connection_uri, start_date=None, great_or_equal=True, less_or_equal=True, end_date=None, columns=None, unique_identifier_list=None, unique_identifier_range_map=None)</code>","text":"<p>Connects directly to the DB without passing through the ORM to speed up calculations.</p> <p>Parameters:</p> Name Type Description Default <code>metadata</code> <code>dict</code> <p>Metadata containing table and column details.</p> required <code>connection_config</code> <code>dict</code> <p>Connection configuration for the database.</p> required <code>start_date</code> <code>datetime</code> <p>The start date for filtering. If None, no lower bound is applied.</p> <code>None</code> <code>great_or_equal</code> <code>bool</code> <p>Whether the start_date filter is inclusive (&gt;=). Defaults to True.</p> <code>True</code> <code>less_or_equal</code> <code>bool</code> <p>Whether the end_date filter is inclusive (&lt;=). Defaults to True.</p> <code>True</code> <code>end_date</code> <code>datetime</code> <p>The end date for filtering. If None, no upper bound is applied.</p> <code>None</code> <code>columns</code> <code>list</code> <p>Specific columns to select. If None, all columns are selected.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>Data from the table as a pandas DataFrame, optionally filtered by date range.</p>"},{"location":"reference/client/data_sources_interfaces/timescale/#mainsequence.client.data_sources_interfaces.timescale.direct_table_update","title":"<code>direct_table_update(metadata, serialized_data_frame, overwrite, grouped_dates, table_is_empty, time_series_orm_db_connection=None, use_chunks=True, num_threads=4)</code>","text":"<p>Updates the database table with the given DataFrame.</p> <p>Parameters: - table_name: Name of the database table. - serialized_data_frame: DataFrame containing the data to insert. - overwrite: If True, existing data in the date range will be deleted before insertion. - time_index_name: Name of the time index column. - index_names: List of index column names. - table_is_empty: If True, the table is empty. - time_series_orm_db_connection: Database connection string. - use_chunks: If True, data will be inserted in chunks using threads. - num_threads: Number of threads to use when use_chunks is True.</p>"},{"location":"reference/client/data_sources_interfaces/timescale/#mainsequence.client.data_sources_interfaces.timescale.filter_by_assets_ranges","title":"<code>filter_by_assets_ranges(table_name, asset_ranges_map, index_names, data_source, column_types)</code>","text":"<p>Query time series data dynamically based on asset ranges.</p> <p>Args:     table_name (str): The name of the table to query.     asset_ranges_map (dict): A dictionary where keys are asset symbols and values are dictionaries containing:                              - 'start_date' (datetime): The start date of the range.                              - 'start_date_operand' (str): The SQL operand for the start date (e.g., '&gt;=' or '&gt;').                              - 'end_date' (datetime or None): The end date of the range.     index_names (list): List of column names to set as the DataFrame index.     data_source: A data source object with a method <code>get_connection_uri()</code> to get the database connection URI.</p> <p>Returns:     pd.DataFrame: A Pandas DataFrame with the queried data, indexed by the specified columns.</p>"},{"location":"reference/client/data_sources_interfaces/timescale/#mainsequence.client.data_sources_interfaces.timescale.process_and_update_table","title":"<code>process_and_update_table(serialized_data_frame, local_metadata, grouped_dates, data_source, index_names, time_index_name, overwrite=False, JSON_COMPRESSED_PREFIX=None)</code>","text":"<p>Process a serialized DataFrame, handle overwriting, and update a database table.</p> <p>Args:     serialized_data_frame (pd.DataFrame): The DataFrame to process and update.     metadata (DynamicTableMetaData): Metadata about the table, including table configuration.     grouped_dates (list): List of grouped dates to assist with the update.     data_source (object): A data source object with a <code>get_connection_uri</code> method.     index_names (list): List of index column names.     time_index_name (str): The name of the time index column.     overwrite (bool): Whether to overwrite the table or not.     JSON_COMPRESSED_PREFIX (list): List of prefixes to identify JSON-compressed columns.</p> <p>Returns:     None</p>"},{"location":"reference/instrumentation/utils/","title":"utils","text":""},{"location":"reference/instrumentation/utils/#mainsequence.instrumentation.utils","title":"<code>mainsequence.instrumentation.utils</code>","text":""},{"location":"reference/instrumentation/utils/#mainsequence.instrumentation.utils.OTelJSONRenderer","title":"<code>OTelJSONRenderer</code>","text":"<p>               Bases: <code>JSONRenderer</code></p> <p>A custom JSON renderer that injects OTel trace/span fields immediately before serializing to JSON.</p>"},{"location":"reference/instrumentation/utils/#mainsequence.instrumentation.utils.TracerInstrumentator","title":"<code>TracerInstrumentator</code>","text":""},{"location":"reference/instrumentation/utils/#mainsequence.instrumentation.utils.TracerInstrumentator.build_tracer","title":"<code>build_tracer()</code>","text":"<p>buidl_tracer(\"Time Series\",name) :return:</p>"},{"location":"reference/instrumentation/utils/#mainsequence.instrumentation.utils.add_otel_trace_context","title":"<code>add_otel_trace_context(logger, method_name, event_dict)</code>","text":"<p>Enrich log records with OpenTelemetry trace context (trace_id, span_id).</p>"},{"location":"reference/tdag/config/","title":"config","text":""},{"location":"reference/tdag/config/#mainsequence.tdag.config","title":"<code>mainsequence.tdag.config</code>","text":""},{"location":"reference/tdag/future_registry/","title":"future_registry","text":""},{"location":"reference/tdag/future_registry/#mainsequence.tdag.future_registry","title":"<code>mainsequence.tdag.future_registry</code>","text":""},{"location":"reference/tdag/future_registry/#mainsequence.tdag.future_registry.add_future","title":"<code>add_future(future)</code>","text":"<p>Add a future to the global registry.</p>"},{"location":"reference/tdag/future_registry/#mainsequence.tdag.future_registry.remove_future","title":"<code>remove_future(future)</code>","text":"<p>Remove a future from the global registry.</p>"},{"location":"reference/tdag/future_registry/#mainsequence.tdag.future_registry.wait_for_all_futures","title":"<code>wait_for_all_futures()</code>","text":"<p>Wait for all registered futures to complete.</p>"},{"location":"reference/tdag/utils/","title":"utils","text":""},{"location":"reference/tdag/utils/#mainsequence.tdag.utils","title":"<code>mainsequence.tdag.utils</code>","text":""},{"location":"reference/tdag/utils/#mainsequence.tdag.utils.copy_drop_database","title":"<code>copy_drop_database(source_uri, target_uri, source_container_name)</code>","text":"<p>Copies database from one host to the other and guarantees  that  are no broken time series.</p> <p>Parameters:</p> Name Type Description Default <code>source_uri</code> <code>str</code> required <code>target_uri</code> <code>str</code> required <code>source_container_name</code> <code>str</code> required"},{"location":"reference/tdag/distributed/time_series/","title":"time_series","text":""},{"location":"reference/tdag/distributed/time_series/#mainsequence.tdag.distributed.time_series","title":"<code>mainsequence.tdag.distributed.time_series</code>","text":""},{"location":"reference/tdag/distributed/time_series/#mainsequence.tdag.distributed.time_series.MLflowTrackingRestApi","title":"<code>MLflowTrackingRestApi</code>","text":""},{"location":"reference/tdag/distributed/time_series/#mainsequence.tdag.distributed.time_series.MLflowTrackingRestApi.get_all_finished_runs_df","title":"<code>get_all_finished_runs_df(experiment_name, include_running=False)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> required <code>include_running</code> <code>False</code>"},{"location":"reference/tdag/distributed/utils/","title":"utils","text":""},{"location":"reference/tdag/distributed/utils/#mainsequence.tdag.distributed.utils","title":"<code>mainsequence.tdag.distributed.utils</code>","text":""},{"location":"reference/tdag/distributed/utils/#mainsequence.tdag.distributed.utils.get_request_status_from_query","title":"<code>get_request_status_from_query(query, request_url)</code>","text":"<p>:param query: :type query: :return: :rtype:</p>"},{"location":"reference/tdag/time_series/persist_managers/","title":"persist_managers","text":""},{"location":"reference/tdag/time_series/persist_managers/#mainsequence.tdag.time_series.persist_managers","title":"<code>mainsequence.tdag.time_series.persist_managers</code>","text":""},{"location":"reference/tdag/time_series/persist_managers/#mainsequence.tdag.time_series.persist_managers.APIPersistManager","title":"<code>APIPersistManager</code>","text":""},{"location":"reference/tdag/time_series/persist_managers/#mainsequence.tdag.time_series.persist_managers.APIPersistManager.local_metadata","title":"<code>local_metadata</code>  <code>property</code>","text":"<p>Lazily block and cache the result if needed.</p>"},{"location":"reference/tdag/time_series/persist_managers/#mainsequence.tdag.time_series.persist_managers.PersistManager","title":"<code>PersistManager</code>","text":""},{"location":"reference/tdag/time_series/persist_managers/#mainsequence.tdag.time_series.persist_managers.PersistManager.build_update_details","title":"<code>build_update_details(source_class_name)</code>","text":""},{"location":"reference/tdag/time_series/persist_managers/#mainsequence.tdag.time_series.persist_managers.PersistManager.depends_on_connect","title":"<code>depends_on_connect(new_ts, is_api)</code>","text":"<p>Connects a time Serie as relationship in the DB</p>"},{"location":"reference/tdag/time_series/persist_managers/#mainsequence.tdag.time_series.persist_managers.PersistManager.get_persisted_ts","title":"<code>get_persisted_ts()</code>","text":"<p>full Request of the persisted data should always default to DB :return:</p>"},{"location":"reference/tdag/time_series/persist_managers/#mainsequence.tdag.time_series.persist_managers.PersistManager.local_persist_exist_set_config","title":"<code>local_persist_exist_set_config(remote_table_hashed_name, local_configuration, remote_configuration, data_source, time_serie_source_code_git_hash, time_serie_source_code, remote_build_metadata)</code>","text":"<p>This method runs on initialization of the TimeSerie class. We also use it to retrieve the table if is already persisted :param config:</p> <p>:return:</p>"},{"location":"reference/tdag/time_series/persist_managers/#mainsequence.tdag.time_series.persist_managers.PersistManager.patch_build_configuration","title":"<code>patch_build_configuration(local_configuration, remote_configuration, remote_build_metadata)</code>","text":"<p>This method can be threaded because it runs at the end of an init method Args:     local_configuration:     remote_configuration:</p> <p>Returns:</p>"},{"location":"reference/tdag/time_series/persist_managers/#mainsequence.tdag.time_series.persist_managers.PersistManager.persist_updated_data","title":"<code>persist_updated_data(temp_df, historical_update_id, update_tracker=None, overwrite=False)</code>","text":"<p>Main update time series function, it is called from TimeSeries class</p>"},{"location":"reference/tdag/time_series/persist_managers/#mainsequence.tdag.time_series.persist_managers.TimeScaleLocalPersistManager","title":"<code>TimeScaleLocalPersistManager</code>","text":"<p>               Bases: <code>PersistManager</code></p> <p>Main Controler to interacti with TimeSerie ORM</p>"},{"location":"reference/tdag/time_series/persist_managers/#mainsequence.tdag.time_series.persist_managers.TimeScaleLocalPersistManager.get_full_source_data","title":"<code>get_full_source_data(remote_table_hash_id, engine='pandas')</code>","text":"<p>Returns full stored data, uses multiprocessing to achieve several queries by rows and speed :return:</p>"},{"location":"reference/tdag/time_series/time_series/","title":"time_series","text":""},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series","title":"<code>mainsequence.tdag.time_series.time_series</code>","text":""},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.APITimeSerie","title":"<code>APITimeSerie</code>","text":"<p>               Bases: <code>CommonMethodsMixin</code></p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.APITimeSerie.__init__","title":"<code>__init__(data_source_id, local_hash_id, data_source_local_lake=None)</code>","text":"<p>A time serie is uniquely identified in tdag by  data_source_id and table_name :param data_source_id: :param table_name:</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.APITimeSerie.filter_by_assets_ranges","title":"<code>filter_by_assets_ranges(unique_identifier_range_map)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>asset_ranges</code> required"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.APITimeSerie.get_update_statistics","title":"<code>get_update_statistics(asset_symbols=None)</code>","text":"<p>getts latest value directly from querying the DB, args and kwargs are nedeed for datalake</p> <p>Parameters:</p> Name Type Description Default <code>args</code> required <code>kwargs</code> required"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.APITimeSerie.persist_data_to_local_lake","title":"<code>persist_data_to_local_lake(temp_df, update_tracker, latest_value, overwrite=False)</code>","text":"<p>Helper series to  persist data to a local lake for reading purposes :param temp_df: :param update_tracker: :param latest_value: :param overwrite: :return:</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.ConfigSerializer","title":"<code>ConfigSerializer</code>","text":""},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.ConfigSerializer.deserialize_pickle_state","title":"<code>deserialize_pickle_state(state, include_vam_client_objects, data_source_id, graph_depth_limit, graph_depth)</code>  <code>classmethod</code>","text":"<p>Parameters:</p> Name Type Description Default <code>state</code> required <code>deserialize_pickle_state</code> required"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.ConfigSerializer.rebuild_config","title":"<code>rebuild_config(config, ignore_pydantic=False)</code>  <code>classmethod</code>","text":"<p>:param config: :return:</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.ConfigSerializer.rebuild_pydantic_model","title":"<code>rebuild_pydantic_model(details, state_kwargs=None)</code>  <code>classmethod</code>","text":"<p>If there is an state rebuild the configuration then the method to rebuild related objects is from state Args:     details:      state_kwargs: </p> <p>Returns:</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.ConfigSerializer.rebuild_serialized_config","title":"<code>rebuild_serialized_config(config, time_serie_class_name)</code>  <code>classmethod</code>","text":"<p>rebulds configuration from config file, particularly Assets :param config:</p> <p>:param time_serie_class_name: :return:</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.ConfigSerializer.rebuild_serialized_wrapper_dict","title":"<code>rebuild_serialized_wrapper_dict(time_series_dict_config)</code>  <code>classmethod</code>","text":"<p>rebuilds configuration from time_series Wrapper :param time_series_dict_config:</p> <p>:return:</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.ConfigSerializer.serialize_init_kwargs","title":"<code>serialize_init_kwargs(kwargs)</code>","text":"<p>serializes  TimeSeries init_kwargs to be able to  persist in local configuration :param kwargs: :return:</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.DataPersistanceMethods","title":"<code>DataPersistanceMethods</code>","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.DataPersistanceMethods.filter_by_assets_ranges","title":"<code>filter_by_assets_ranges(asset_ranges_map)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>asset_ranges</code> required"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.DataPersistanceMethods.get_df_between_dates","title":"<code>get_df_between_dates(start_date=None, end_date=None, unique_identifier_list=None, great_or_equal=True, less_or_equal=True, unique_identifier_range_map=None)</code>","text":"<p>Retrieve rows from this TimeSerie whose <code>time_index</code> (and optional <code>unique_identifier</code>) fall within the specified date ranges.</p> <p>Note: If <code>unique_identifier_range_map</code> is provided, all other filters (<code>start_date</code>, <code>end_date</code>, <code>unique_identifier_list</code>, <code>great_or_equal</code>, <code>less_or_equal</code>) are ignored, and only the per-identifier ranges in <code>unique_identifier_range_map</code> apply.</p> <p>Filtering logic (when <code>unique_identifier_range_map</code> is None):   - If <code>start_date</code> is provided, include rows where     <code>time_index &gt; start_date</code> (if <code>great_or_equal=False</code>)     or <code>time_index &gt;= start_date</code> (if <code>great_or_equal=True</code>).   - If <code>end_date</code> is provided, include rows where     <code>time_index &lt; end_date</code> (if <code>less_or_equal=False</code>)     or <code>time_index &lt;= end_date</code> (if <code>less_or_equal=True</code>).   - If <code>unique_identifier_list</code> is provided, only include rows whose     <code>unique_identifier</code> is in that list.</p> <p>Filtering logic (when <code>unique_identifier_range_map</code> is provided):   - For each <code>unique_identifier</code>, apply its own <code>start_date</code>/<code>end_date</code>     filters using the specified operands (<code>\"&gt;\"</code>, <code>\"&gt;=\"</code>, <code>\"&lt;\"</code>, <code>\"&lt;=\"</code>):     {       : {         \"start_date\": datetime,         \"start_date_operand\": \"&gt;=\" or \"&gt;\",         \"end_date\": datetime,         \"end_date_operand\": \"&lt;=\" or \"&lt;\"       },       ...     } <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>datetime or None</code> <p>Global lower bound for <code>time_index</code>. Ignored if <code>unique_identifier_range_map</code> is provided.</p> <code>None</code> <code>end_date</code> <code>datetime or None</code> <p>Global upper bound for <code>time_index</code>. Ignored if <code>unique_identifier_range_map</code> is provided.</p> <code>None</code> <code>unique_identifier_list</code> <code>list or None</code> <p>If provided, only include rows matching these IDs. Ignored if <code>unique_identifier_range_map</code> is provided.</p> <code>None</code> <code>great_or_equal</code> <code>bool</code> <p>If True, use <code>&gt;=</code> when filtering by <code>start_date</code>; otherwise use <code>&gt;</code>. Ignored if <code>unique_identifier_range_map</code> is provided.</p> <code>True</code> <code>less_or_equal</code> <code>bool</code> <p>If True, use <code>&lt;=</code> when filtering by <code>end_date</code>; otherwise use <code>&lt;</code>. Ignored if <code>unique_identifier_range_map</code> is provided.</p> <code>True</code> <code>unique_identifier_range_map</code> <code>UniqueIdentifierRangeMap or None</code> <p>Mapping of specific <code>unique_identifier</code> keys to their own sub-filters. When provided, this is the sole filter applied.</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A DataFrame containing rows that satisfy the combined time and identifier filters.</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.DataPersistanceMethods.get_last_observation","title":"<code>get_last_observation(unique_identifier_list=None)</code>","text":"<p>(1) Requests last observatiion from local persist manager (3) evaluates if last observation is consistent</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.DataPersistanceMethods.get_latest_update_by_assets_filter","title":"<code>get_latest_update_by_assets_filter(asset_symbols, last_update_per_asset)</code>","text":"<p>Gets the latest update from a symbol list :param asset_symbols: :return:</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.DataPersistanceMethods.get_update_statistics","title":"<code>get_update_statistics(unique_identifier_list=None)</code>","text":"<p>gets latest value directly from querying the DB, args and kwargs are nedeed for datalake</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.DataPersistanceMethods.update_details_in_dependecy_tree","title":"<code>update_details_in_dependecy_tree(set_relation_tree=True, include_head=False, *args, **kwargs)</code>","text":"<p>updates schedule from all tree related time series :param schedule: :return:</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.DataPersistanceMethods.upsert_data","title":"<code>upsert_data(data_df)</code>","text":"<p>Updates and Insert data into DB :param data_df: :return:</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.GraphNodeMethods","title":"<code>GraphNodeMethods</code>","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.GraphNodeMethods.get_all_local_dependencies","title":"<code>get_all_local_dependencies()</code>","text":"<p>get relation tree by ids in the graph :return:</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.GraphNodeMethods.get_update_map","title":"<code>get_update_map(dependecy_map=None)</code>","text":"<p>Obtain all local time_series in the dependency graph by introspecting the code class members. Dicts are allowed to have timeseries. :return:</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.GraphNodeMethods.set_relation_tree","title":"<code>set_relation_tree()</code>","text":"<p>Sets node relationship in the backend :return:</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.ModelList","title":"<code>ModelList</code>","text":"<p>               Bases: <code>list</code></p> <p>Necessary for configuration</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerie","title":"<code>TimeSerie</code>","text":"<p>               Bases: <code>CommonMethodsMixin</code>, <code>DataPersistanceMethods</code>, <code>GraphNodeMethods</code>, <code>TimeSerieRebuildMethods</code></p> <p>Base TimeSerie class</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerie.hash_id","title":"<code>hash_id</code>  <code>property</code>","text":"<p>Returns:</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerie.__init__","title":"<code>__init__(init_meta=None, build_meta_data=None, local_kwargs_to_ignore=None, *args, **kwargs)</code>","text":"<p>Initializes the TimeSerie object with the provided metadata and configurations. For extension of the method the method should always be decorated by TimeSerie._post_init_routines</p> <p>This method sets up the time series object, loading the necessary configurations and metadata.</p> <p>Each TimeSerie instance will create a table in the Main Sequence Data Engine by uniquely hashing the arguments with exception of:</p> <ul> <li>init_meta</li> <li>build_meta_data</li> <li>local_kwargs_to_ignore</li> </ul> <p>Each TimeSerie instance will create a local_hash_id and a LocalTimeSerie instance in the Data Engine by uniquely hashing the same arguments as the table but excluding the arguments inside local_kwargs_to_ignore</p> <p>allowed type of arguments can only be str,list, int or  Pydantic objects inlcuding lists of Pydantic Objects.</p> <p>The OFFSET_START property can be overridend and markts the minimum date value where the table will insert data</p> <p>Parameters:</p> Name Type Description Default <code>init_meta</code> <code>dict</code> <p>Metadata for initializing the time series instance.</p> <code>None</code> <code>build_meta_data</code> <code>dict</code> <p>Metadata related to the building process of the time series.</p> <code>None</code> <code>local_kwargs_to_ignore</code> <code>list</code> <p>List of keyword arguments to ignore during configuration.</p> <code>None</code> <code>*args</code> <code>tuple</code> <p>Additional arguments.</p> <code>()</code> <code>**kwargs</code> <code>dict</code> <p>Additional keyword arguments.</p> <code>{}</code>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerie.get_html_description","title":"<code>get_html_description()</code>","text":"<p>must return a descript on html tags so it can be readable and rendedered Returns:</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerie.get_time_serie_source_code_git_hash","title":"<code>get_time_serie_source_code_git_hash(TimeSerieClass)</code>  <code>staticmethod</code>","text":"<p>Hashes a time serie source code</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerie.patch_build_configuration","title":"<code>patch_build_configuration()</code>","text":"<p>This method comes in handy when there is a change in VAM models extra configuration. This method will properly update the models on all the tree</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerie.pre_update_setting_routines","title":"<code>pre_update_setting_routines(scheduler, set_time_serie_queue_status, update_tree, metadata=None, local_metadata=None)</code>","text":"<p>Routines to execute previous to an update</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerie.run","title":"<code>run(debug_mode, *, update_tree=True, force_update=False, update_only_tree=False, remote_scheduler=None)</code>","text":"<p>Args:     debug_mode: if the time serie is run in debug mode the DAG will be run node by node in the same process     update_tree: if set to False then only the selected time series will be run, default is True     force_update: Force an update even if the time serie schedule does not require an update     update_only_tree: If set to True then only the dependency graph of the selected time serie will be updated     remote_scheduler:</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerie.set_data_source","title":"<code>set_data_source(data_source=None)</code>","text":"<p>:return:</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerie.set_dependencies_df","title":"<code>set_dependencies_df()</code>","text":"<p>:return:</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerie.set_update_statistics","title":"<code>set_update_statistics(update_statistics)</code>","text":"<p>Default method to narrow down update statistics un local time series, the method will filter using asset_list if the attribute exists as well as the init fallback date :param update_statistics: :return:</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerie.update","title":"<code>update(update_statistics)</code>","text":"<p>Fetch and ingest only the new rows for this TimeSerie based on prior update checkpoints.</p> <p>DataUpdates provides the last-ingested positions:   - For a single-index series (time_index only), <code>update_statistics.max_time</code> is either:       - None: no prior data\u2014fetch all available rows.       - a datetime: fetch rows where <code>time_index &gt; max_time</code>.   - For a dual-index series (time_index, unique_identifier), <code>update_statistics.max_time_per_id</code> is either:       - None: single-index behavior applies.       - dict[str, datetime]: for each <code>unique_identifier</code> (matching <code>Asset.unique_identifier</code>), fetch rows where         <code>time_index &gt; max_time_per_id[unique_identifier]</code>.</p> <p>Requirements:   - <code>time_index</code> must be a <code>datetime.datetime</code> instance with UTC timezone.   - Column names must be all lowercase.   - No column values may be Python <code>datetime</code> objects; if date/time storage is needed, convert to integer     timestamps (e.g., UNIX epoch in seconds or milliseconds).</p> <p>After retrieving the incremental rows, this method inserts or upserts them into the Main Sequence Data Engine.</p> <p>Parameters:</p> Name Type Description Default <code>update_statistics</code> <code>DataUpdates</code> <p>Object capturing the previous update state. Must expose:   - <code>max_time</code> (datetime | None)   - <code>max_time_per_id</code> (dict[str, datetime] | None)</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>A DataFrame containing only the newly added or updated records.</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerieConfigKwargs","title":"<code>TimeSerieConfigKwargs</code>","text":"<p>               Bases: <code>dict</code></p> <p>Necessary class for configuration</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerieRebuildMethods","title":"<code>TimeSerieRebuildMethods</code>","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerieRebuildMethods.get_minimum_required_depth_for_update","title":"<code>get_minimum_required_depth_for_update()</code>","text":"<p>Controls the minimum depth that needs to be rebuil</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerieRebuildMethods.persist_to_pickle","title":"<code>persist_to_pickle(overwrite=False)</code>","text":"<p>:return: :rtype:</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerieRebuildMethods.rebuild_from_configuration","title":"<code>rebuild_from_configuration(local_hash_id, data_source)</code>  <code>classmethod</code>","text":"<p>:param serie_data_folder:</p> <p>:return: TimeSerie</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerieRebuildMethods.run_in_debug_scheduler","title":"<code>run_in_debug_scheduler(break_after_one_update=True, run_head_in_main_process=True, wait_for_update=True, force_update=True, debug=True, update_tree=True, raise_exception_on_error=True)</code>","text":"<p>Args:     break_after_one_update:     run_head_in_main_process:     wait_for_update:     force_update:     debug:     update_tree:</p> <p>Returns:</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerieRebuildMethods.set_state_with_sessions","title":"<code>set_state_with_sessions(include_vam_client_objects=True, graph_depth_limit=1000, graph_depth=0)</code>","text":"<p>Method to set state after it was loaded from pickle.</p> <p>Parameters:</p> Name Type Description Default <code>include_vam_client_objects</code> <code>True</code> <code>graph_depth_limit</code> <code>1000</code> <code>metadatas</code> <code>pre-requestd dictionary of metadatas to speed calculation of rebuild of state</code> required <code>graph_depth</code> <code>0</code>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.TimeSerieRebuildMethods.start_time_serie_update","title":"<code>start_time_serie_update(update_tracker, debug_mode, raise_exceptions=True, update_tree=False, local_time_series_map=None, update_only_tree=False, force_update=False, use_state_for_update=False)</code>","text":"<p>Main update method for time series that interacts with Graph node. Time series should be updated through this method only :param update_tree_kwargs: :param raise_exceptions: :param update_tree: :param scheduler: models.Scheduler :param metadatas: pre-requested metadatas to speed initiation of ts :return:</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.WrapperTimeSerie","title":"<code>WrapperTimeSerie</code>","text":"<p>               Bases: <code>TimeSerie</code></p> <p>A wrapper class for managing multiple TimeSerie objects.</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.WrapperTimeSerie.__init__","title":"<code>__init__(translation_table, *args, **kwargs)</code>","text":"<p>Initialize the WrapperTimeSerie.</p> <p>Args:     time_series_dict: Dictionary of TimeSerie objects.</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.WrapperTimeSerie.children_is_updating","title":"<code>children_is_updating()</code>","text":"<p>Check if any wrapped TimeSerie is currently updating.</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.WrapperTimeSerie.get_pandas_df_list_data_greater_than","title":"<code>get_pandas_df_list_data_greater_than(target_value, great_or_equal, thread=True)</code>","text":"<p>Get DataFrames from all wrapped TimeSeries greater than a target value.</p> <p>Args:     target_value: The target datetime value to compare against.     great_or_equal: Whether to include the target value (True) or not (False).     thread: Whether to use threading for parallel processing.</p> <p>Returns:     A dictionary with TimeSerie keys and their corresponding DataFrames or error messages.</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.WrapperTimeSerie.get_wrapped","title":"<code>get_wrapped()</code>","text":"<p>Get all wrapped TimeSeries, including nested ones.</p> <p>Returns:     A list of all wrapped TimeSerie objects, including those nested in other WrapperTimeSeries.</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.WrapperTimeSerie.items","title":"<code>items()</code>","text":"<p>Get items of wrapped TimeSeries.</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.WrapperTimeSerie.pandas_df_concat_on_rows_by_key_between_dates","title":"<code>pandas_df_concat_on_rows_by_key_between_dates(start_date=None, great_or_equal=None, end_date=None, less_or_equal=None, thread=False, unique_identifier_list=None, return_as_list=False, key_date_filter=None, unique_identifier_range_map=None)</code>","text":"<p>Concatenate DataFrames from all wrapped TimeSeries between given dates.</p> <p>Args:     start_date: The start date for the data range.     great_or_equal: Whether to include the start date (True) or not (False).     end_date: The end date for the data range.     less_or_equal: Whether to include the end date (True) or not (False).     thread: Whether to use threading for parallel processing.     unique_identifier_list: asset_symbol filter     return_as_list: If True, return a dictionary of DataFrames instead of concatenating.    key_date_filter: Concatenate DataFrames only for key date filter. Returns:     A concatenated DataFrame or a dictionary of DataFrames if return_as_list is True.</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.WrapperTimeSerie.pandas_df_concat_on_rows_by_key_greater_than","title":"<code>pandas_df_concat_on_rows_by_key_greater_than(target_value, great_or_equal, thread=False, return_as_list=False, columns=None, *args, **kwargs)</code>","text":"<p>Concatenate DataFrames from all wrapped TimeSeries greater than a target value.</p> <p>Args:     target_value: The latest datetime value to compare against.     great_or_equal: Whether to include the target value (True) or not (False).     thread: Whether to use threading for parallel processing.     return_as_list: If True, return a dictionary of DataFrames instead of concatenating.     columns: Optional list of columns to include.</p> <p>Returns:     A concatenated DataFrame or a dictionary of DataFrames if return_as_list is True.</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.WrapperTimeSerie.update","title":"<code>update(update_statistics)</code>","text":"<p>Implemented in the wrapped nodes</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.WrapperTimeSerie.values","title":"<code>values()</code>","text":"<p>Get values of wrapped TimeSeries.</p>"},{"location":"reference/tdag/time_series/time_series/#mainsequence.tdag.time_series.time_series.hash_signature","title":"<code>hash_signature(dictionary)</code>","text":"<p>MD5 hash of a dictionary used to hash the local annd remote configuration of tables :param dictionary: :return:</p>"},{"location":"reference/tdag/time_series/utils/","title":"utils","text":""},{"location":"reference/tdag/time_series/utils/#mainsequence.tdag.time_series.utils","title":"<code>mainsequence.tdag.time_series.utils</code>","text":""},{"location":"reference/tdag/time_series/update/api/","title":"api","text":""},{"location":"reference/tdag/time_series/update/api/#mainsequence.tdag.time_series.update.api","title":"<code>mainsequence.tdag.time_series.update.api</code>","text":""},{"location":"reference/tdag/time_series/update/ray_manager/","title":"ray_manager","text":""},{"location":"reference/tdag/time_series/update/ray_manager/#mainsequence.tdag.time_series.update.ray_manager","title":"<code>mainsequence.tdag.time_series.update.ray_manager</code>","text":""},{"location":"reference/tdag/time_series/update/ray_manager/#mainsequence.tdag.time_series.update.ray_manager.RayUpdateManager","title":"<code>RayUpdateManager</code>","text":"<p>Controller for interactions with ray cluster</p>"},{"location":"reference/tdag/time_series/update/ray_manager/#mainsequence.tdag.time_series.update.ray_manager.RayUpdateManager.get_results_from_futures_list","title":"<code>get_results_from_futures_list(futures)</code>","text":"<p>should be a list of futures objects ray.remote() Args:     futures ():</p> <p>Returns:</p>"},{"location":"reference/tdag/time_series/update/scheduler/","title":"scheduler","text":""},{"location":"reference/tdag/time_series/update/scheduler/#mainsequence.tdag.time_series.update.scheduler","title":"<code>mainsequence.tdag.time_series.update.scheduler</code>","text":""},{"location":"reference/tdag/time_series/update/scheduler/#mainsequence.tdag.time_series.update.scheduler.SchedulerUpdater","title":"<code>SchedulerUpdater</code>","text":""},{"location":"reference/tdag/time_series/update/scheduler/#mainsequence.tdag.time_series.update.scheduler.SchedulerUpdater.start","title":"<code>start(debug=False, update_tree=True, break_after_one_update=False, raise_exception_on_error=False, update_extra_kwargs=None, run_head_in_main_process=False, force_update=False, sequential_update=False, update_only_tree=False, api_port=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>debug</code> <code>bool</code> <p>If True, all dependencies of a time series run in the same process. Defaults to False.</p> <code>False</code> <code>update_tree</code> <code>bool or dict</code> <p>If True, updates the tree of dependent tasks.</p> <code>True</code> <code>break_after_one_update</code> <code>bool</code> <p>If True, the process stops after the first update cycle. Defaults to False.</p> <code>False</code> <code>raise_exception_on_error</code> <code>bool</code> <p>If True, raises an exception on encountering an error during execution. Otherwise, errors are handled silently. Defaults to False.</p> <code>False</code> <code>update_extra_kwargs</code> <code>dict or None</code> <p>Additional parameters (if any) to pass along when updating. Defaults to None.</p> <code>None</code> <code>run_head_in_main_process</code> <code>bool</code> <p>If True, each \"head\" time series is run in the main scheduler process. Useful for debugging. Defaults to False.</p> <code>False</code> <code>force_update</code> <code>bool</code> <p>If True, forces an update run even if it's not required. Defaults to False.</p> <code>False</code> <code>sequential_update</code> <code>bool</code> <p>If True, runs each \"head\" time series one by one instead of in parallel. Defaults to False.</p> <code>False</code> <code>update_only_tree</code> <code>bool</code> <p>If True, only the dependency tree is updated without fully processing every step. Defaults to False.</p> <code>False</code> <code>api_port</code> <code>int or None</code> <p>The port on which any exposed APIs should run. If None, no API is exposed. Defaults to None.</p> <code>None</code>"},{"location":"reference/tdag/time_series/update/scheduler/#mainsequence.tdag.time_series.update.scheduler.TimeSerieHeadUpdateActor","title":"<code>TimeSerieHeadUpdateActor</code>","text":""},{"location":"reference/tdag/time_series/update/scheduler/#mainsequence.tdag.time_series.update.scheduler.TimeSerieHeadUpdateActor.__init__","title":"<code>__init__(local_hash_id, data_source_id, scheduler, debug, update_tree, update_extra_kwargs, remote_table_hashed_name)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>hash_id</code> required <code>scheduler</code> <code>Scheduler</code> required <code>debug</code> required <code>update_tree</code> required <code>update_extra_kwargs</code> required"},{"location":"reference/tdag/time_series/update/scheduler/#mainsequence.tdag.time_series.update.scheduler.TimeSerieHeadUpdateActor.run_one_step_update","title":"<code>run_one_step_update(force_update=False, update_only_tree=False)</code>","text":"<p>Main update Method for a time serie Head</p>"},{"location":"reference/tdag/time_series/update/scheduler/#mainsequence.tdag.time_series.update.scheduler.set_data_source","title":"<code>set_data_source(pod_source=None, tdag_detached=False, override_all=False)</code>","text":"<p>:param override_all: :return:</p>"},{"location":"reference/tdag/time_series/update/update_methods/","title":"update_methods","text":""},{"location":"reference/tdag/time_series/update/update_methods/#mainsequence.tdag.time_series.update.update_methods","title":"<code>mainsequence.tdag.time_series.update.update_methods</code>","text":""},{"location":"reference/tdag/time_series/update/update_methods/#mainsequence.tdag.time_series.update.update_methods.TimeSerieUpdater","title":"<code>TimeSerieUpdater</code>","text":""},{"location":"reference/tdag/time_series/update/update_methods/#mainsequence.tdag.time_series.update.update_methods.update_remote_from_hash_id","title":"<code>update_remote_from_hash_id(*args, **kwargs)</code>","text":"<p>Ray wrapper for session update :param args: :param kwargs: :return:</p>"},{"location":"reference/tdag/time_series/update/update_methods/#mainsequence.tdag.time_series.update.update_methods.update_remote_from_hash_id_local","title":"<code>update_remote_from_hash_id_local(telemetry_carrier, scheduler_uid, local_time_serie_id, data_source_id, local_hash_id)</code>","text":"<p>Args:     in_update_tree_node_uid ():     update_tree_kwargs ():     execution_start ():     telemtry_carrier ():     update_priority ():     hash_id ():</p> <p>Returns:</p>"},{"location":"reference/tdag/time_series/update/utils/","title":"utils","text":""},{"location":"reference/tdag/time_series/update/utils/#mainsequence.tdag.time_series.update.utils","title":"<code>mainsequence.tdag.time_series.update.utils</code>","text":""},{"location":"reference/tdag/time_series/update/utils/#mainsequence.tdag.time_series.update.utils.UpdateInterface","title":"<code>UpdateInterface</code>","text":"<p>Helper class to avoid calling ray in other modules</p>"},{"location":"reference/tdag/time_series/update/utils/#mainsequence.tdag.time_series.update.utils.get_available_port","title":"<code>get_available_port(port_range=(8000, 8090))</code>","text":"<p>Check if the given port is free, and if not, find an available port within the range.</p>"},{"location":"reference/tdag/time_series/update/utils/#mainsequence.tdag.time_series.update.utils.is_port_free","title":"<code>is_port_free(port)</code>","text":"<p>Check if the port is free on the local machine.</p>"},{"location":"reference/virtualfundbuilder/agent_interface/","title":"agent_interface","text":""},{"location":"reference/virtualfundbuilder/agent_interface/#mainsequence.virtualfundbuilder.agent_interface","title":"<code>mainsequence.virtualfundbuilder.agent_interface</code>","text":""},{"location":"reference/virtualfundbuilder/config_handling/","title":"config_handling","text":""},{"location":"reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling","title":"<code>mainsequence.virtualfundbuilder.config_handling</code>","text":""},{"location":"reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.AssetMixin","title":"<code>AssetMixin</code>","text":"<p>               Bases: <code>BaseObjectOrm</code>, <code>BasePydanticModel</code></p>"},{"location":"reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.AssetMixin.filter_with_asset_class","title":"<code>filter_with_asset_class(timeout=None, include_relationship_details_depth=None, *args, **kwargs)</code>  <code>classmethod</code>","text":"<p>Filters assets and returns instances with their correct asset class,</p>"},{"location":"reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.AssetMixin.pretty_print","title":"<code>pretty_print()</code>","text":"<p>Print all asset properties in a neat, aligned table.</p>"},{"location":"reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.AssetMixinOverwrite","title":"<code>AssetMixinOverwrite</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>The Asset for evaluating the portfolio.</p> <p>Attributes:     unique_identifier (str): The unique_identifier of the asset.</p>"},{"location":"reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.AssetsConfiguration","title":"<code>AssetsConfiguration</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>Configuration for assets included in a portfolio.</p> <p>Attributes:     assets_category_unique_id (str):         Unique Identifier of assets category     price_type (PriceTypeNames): Type of price used for backtesting.     prices_configuration (PricesConfiguration): Configuration for price data handling.</p>"},{"location":"reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.BacktestingWeightsConfig","title":"<code>BacktestingWeightsConfig</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>Configuration for backtesting weights.</p> <p>Attributes:     rebalance_strategy_name (str): Strategy used for rebalancing.     rebalance_strategy_configuration (Dict): Placeholder dict for the rebalance strategy configuration.     signal_weights_name (str): Type of signal weights strategy.     signal_weights_configuration (Dict): Placeholder dict for the signal weights configuration.</p>"},{"location":"reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.MarketsTimeSeries","title":"<code>MarketsTimeSeries</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>MarketsTimeSeries based on their unique id. Used as the data sources for the prices. Values include alpaca_1d_bars, binance_1d_bars etc.</p> <p>Attributes:     unique_identifier (str): Identfier of the MarketsTimeSeries.</p>"},{"location":"reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.ModelList","title":"<code>ModelList</code>","text":"<p>               Bases: <code>list</code></p> <p>Necessary for configuration</p>"},{"location":"reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.PortfolioBuildConfiguration","title":"<code>PortfolioBuildConfiguration</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>Main class for configuring and building a portfolio.</p> <p>This class defines the configuration parameters needed for building a portfolio, including asset configurations, backtesting weights, and execution parameters.</p> <p>Attributes:     assets_configuration (AssetsConfiguration): Configuration details for assets.     portfolio_prices_frequency (str): Frequency to upsample portoflio. Optional.     backtesting_weights_configuration (BacktestingWeightsConfig): Weights configuration used for backtesting.     execution_configuration (PortfolioExecutionConfiguration): Execution settings for the portfolio.     valuation_asset (AssetMixin): The Asset for evaluating the portfolio.</p>"},{"location":"reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.PortfolioConfiguration","title":"<code>PortfolioConfiguration</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <pre><code>Configuration for a complete portfolio, including build configuration,\nTDAG updates, and VAM settings.\n\nThis class aggregates different configurations required for the\nmanagement and operation of a portfolio.\n</code></pre> <p>Attributes:     portfolio_build_configuration (PortfolioBuildConfiguration): Configuration for building the portfolio.     portfolio_markets_configuration (PortfolioMarketsConfig): VAM execution configuration.</p>"},{"location":"reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.PortfolioExecutionConfiguration","title":"<code>PortfolioExecutionConfiguration</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>Configuration for portfolio execution.</p> <p>Attributes:     commission_fee (float): Commission fee percentage.</p>"},{"location":"reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.PortfolioMarketsConfig","title":"<code>PortfolioMarketsConfig</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>Configuration for Virtual Asset Management (VAM) portfolio.</p> <p>Attributes:     portfolio_name (str): Name of the portfolio.     execution_configuration (VAMExecutionConfiguration): Execution configuration for VAM.     tracking_funds_expected_exposure_from_latest_holdings (bool): If tracking funds should get the expected exposure from weights or from latest holdings.</p>"},{"location":"reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.PricesConfiguration","title":"<code>PricesConfiguration</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>Configuration for price data handling in a portfolio.</p> <p>Attributes:     bar_frequency_id (str): The frequency of price bars.     upsample_frequency_id (str): Frequency to upsample intraday data to.     intraday_bar_interpolation_rule (str): Rule for interpolating missing intraday bars.     is_live (bool): Boolean flag indicating if the price feed is live.</p>"},{"location":"reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.TemplateFactory","title":"<code>TemplateFactory</code>","text":"<p>A factory for creating template-based objects, for example, market indices.</p>"},{"location":"reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.TemplateFactory.create_market_index","title":"<code>create_market_index(index_name)</code>  <code>staticmethod</code>","text":"<p>Creates a market index portfolio object based on a predefined template configuration.</p> <p>Args:     index_name (str): The name of the index to create, which corresponds to a specific template configuration.</p> <p>Returns:     PortfolioStrategy: A PortfolioStrategy object configured according to the template.</p>"},{"location":"reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.configuration_sanitizer","title":"<code>configuration_sanitizer(configuration)</code>","text":"<p>Verifies that a configuration has all the required attributes. Args:     configuration (dict): The configuration dictionary to sanitize. Returns:     PortfolioConfiguration: The sanitized portfolio configuration.</p>"},{"location":"reference/virtualfundbuilder/config_handling/#mainsequence.virtualfundbuilder.config_handling.replace_none_and_empty_dict_with_python_none","title":"<code>replace_none_and_empty_dict_with_python_none(config)</code>","text":"<p>Recursively replace all string 'None' with Python None in the given dictionary and log the path where replacements occur.</p> <p>Args:     config (dict): The configuration dictionary.</p> <p>Returns:     dict: Updated dictionary with 'None' replaced by Python None.</p>"},{"location":"reference/virtualfundbuilder/enums/","title":"enums","text":""},{"location":"reference/virtualfundbuilder/enums/#mainsequence.virtualfundbuilder.enums","title":"<code>mainsequence.virtualfundbuilder.enums</code>","text":""},{"location":"reference/virtualfundbuilder/models/","title":"models","text":""},{"location":"reference/virtualfundbuilder/models/#mainsequence.virtualfundbuilder.models","title":"<code>mainsequence.virtualfundbuilder.models</code>","text":""},{"location":"reference/virtualfundbuilder/models/#mainsequence.virtualfundbuilder.models.AssetMixinOverwrite","title":"<code>AssetMixinOverwrite</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>The Asset for evaluating the portfolio.</p> <p>Attributes:     unique_identifier (str): The unique_identifier of the asset.</p>"},{"location":"reference/virtualfundbuilder/models/#mainsequence.virtualfundbuilder.models.AssetsConfiguration","title":"<code>AssetsConfiguration</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>Configuration for assets included in a portfolio.</p> <p>Attributes:     assets_category_unique_id (str):         Unique Identifier of assets category     price_type (PriceTypeNames): Type of price used for backtesting.     prices_configuration (PricesConfiguration): Configuration for price data handling.</p>"},{"location":"reference/virtualfundbuilder/models/#mainsequence.virtualfundbuilder.models.BacktestingWeightsConfig","title":"<code>BacktestingWeightsConfig</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>Configuration for backtesting weights.</p> <p>Attributes:     rebalance_strategy_name (str): Strategy used for rebalancing.     rebalance_strategy_configuration (Dict): Placeholder dict for the rebalance strategy configuration.     signal_weights_name (str): Type of signal weights strategy.     signal_weights_configuration (Dict): Placeholder dict for the signal weights configuration.</p>"},{"location":"reference/virtualfundbuilder/models/#mainsequence.virtualfundbuilder.models.MarketsTimeSeries","title":"<code>MarketsTimeSeries</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>MarketsTimeSeries based on their unique id. Used as the data sources for the prices. Values include alpaca_1d_bars, binance_1d_bars etc.</p> <p>Attributes:     unique_identifier (str): Identfier of the MarketsTimeSeries.</p>"},{"location":"reference/virtualfundbuilder/models/#mainsequence.virtualfundbuilder.models.PortfolioBuildConfiguration","title":"<code>PortfolioBuildConfiguration</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>Main class for configuring and building a portfolio.</p> <p>This class defines the configuration parameters needed for building a portfolio, including asset configurations, backtesting weights, and execution parameters.</p> <p>Attributes:     assets_configuration (AssetsConfiguration): Configuration details for assets.     portfolio_prices_frequency (str): Frequency to upsample portoflio. Optional.     backtesting_weights_configuration (BacktestingWeightsConfig): Weights configuration used for backtesting.     execution_configuration (PortfolioExecutionConfiguration): Execution settings for the portfolio.     valuation_asset (AssetMixin): The Asset for evaluating the portfolio.</p>"},{"location":"reference/virtualfundbuilder/models/#mainsequence.virtualfundbuilder.models.PortfolioConfiguration","title":"<code>PortfolioConfiguration</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <pre><code>Configuration for a complete portfolio, including build configuration,\nTDAG updates, and VAM settings.\n\nThis class aggregates different configurations required for the\nmanagement and operation of a portfolio.\n</code></pre> <p>Attributes:     portfolio_build_configuration (PortfolioBuildConfiguration): Configuration for building the portfolio.     portfolio_markets_configuration (PortfolioMarketsConfig): VAM execution configuration.</p>"},{"location":"reference/virtualfundbuilder/models/#mainsequence.virtualfundbuilder.models.PortfolioExecutionConfiguration","title":"<code>PortfolioExecutionConfiguration</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>Configuration for portfolio execution.</p> <p>Attributes:     commission_fee (float): Commission fee percentage.</p>"},{"location":"reference/virtualfundbuilder/models/#mainsequence.virtualfundbuilder.models.PortfolioMarketsConfig","title":"<code>PortfolioMarketsConfig</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>Configuration for Virtual Asset Management (VAM) portfolio.</p> <p>Attributes:     portfolio_name (str): Name of the portfolio.     execution_configuration (VAMExecutionConfiguration): Execution configuration for VAM.     tracking_funds_expected_exposure_from_latest_holdings (bool): If tracking funds should get the expected exposure from weights or from latest holdings.</p>"},{"location":"reference/virtualfundbuilder/models/#mainsequence.virtualfundbuilder.models.PricesConfiguration","title":"<code>PricesConfiguration</code>","text":"<p>               Bases: <code>VFBConfigBaseModel</code></p> <p>Configuration for price data handling in a portfolio.</p> <p>Attributes:     bar_frequency_id (str): The frequency of price bars.     upsample_frequency_id (str): Frequency to upsample intraday data to.     intraday_bar_interpolation_rule (str): Rule for interpolating missing intraday bars.     is_live (bool): Boolean flag indicating if the price feed is live.</p>"},{"location":"reference/virtualfundbuilder/notebook_handling/","title":"notebook_handling","text":""},{"location":"reference/virtualfundbuilder/notebook_handling/#mainsequence.virtualfundbuilder.notebook_handling","title":"<code>mainsequence.virtualfundbuilder.notebook_handling</code>","text":""},{"location":"reference/virtualfundbuilder/notebook_handling/#mainsequence.virtualfundbuilder.notebook_handling.convert_notebook_to_python_file","title":"<code>convert_notebook_to_python_file(notebook_path)</code>","text":"<p>Converts a Jupyter notebook to a Python file in a temporary directory.</p> <p>Args:     notebook_path (str or pathlib.Path): The path to the Jupyter notebook (.ipynb) file.</p> <p>Returns:     pathlib.Path: The path to the generated Python file in the temporary directory.</p>"},{"location":"reference/virtualfundbuilder/portfolio_interface/","title":"portfolio_interface","text":""},{"location":"reference/virtualfundbuilder/portfolio_interface/#mainsequence.virtualfundbuilder.portfolio_interface","title":"<code>mainsequence.virtualfundbuilder.portfolio_interface</code>","text":""},{"location":"reference/virtualfundbuilder/portfolio_interface/#mainsequence.virtualfundbuilder.portfolio_interface.PortfolioInterface","title":"<code>PortfolioInterface</code>","text":"<p>Manages the overall strategy of investing. It initializes the tree and runs it either within the scheduler or directly with a full tree update.</p>"},{"location":"reference/virtualfundbuilder/portfolio_interface/#mainsequence.virtualfundbuilder.portfolio_interface.PortfolioInterface.__init__","title":"<code>__init__(portfolio_config_template, build_purpose=CONSTANTS.PORTFOLIO_BUILD_FOR_BACKTEST, configuration_name=None)</code>","text":"<p>Initializes the portfolio strategy with the necessary configurations.</p>"},{"location":"reference/virtualfundbuilder/portfolio_interface/#mainsequence.virtualfundbuilder.portfolio_interface.PortfolioInterface.build_target_portfolio_in_backend","title":"<code>build_target_portfolio_in_backend(portfolio_tags=None)</code>","text":"<p>This method creates a portfolio in VAM with configm file settings.</p> <p>Returns:</p>"},{"location":"reference/virtualfundbuilder/portfolio_interface/#mainsequence.virtualfundbuilder.portfolio_interface.PortfolioInterface.delete_portfolio","title":"<code>delete_portfolio()</code>","text":"<p>Deletes the portfolio from vam :return:</p>"},{"location":"reference/virtualfundbuilder/portfolio_interface/#mainsequence.virtualfundbuilder.portfolio_interface.PortfolioInterface.delete_stored_configuration","title":"<code>delete_stored_configuration()</code>","text":"<p>Removes a saved configuration file from the configuration folder</p>"},{"location":"reference/virtualfundbuilder/portfolio_interface/#mainsequence.virtualfundbuilder.portfolio_interface.PortfolioInterface.list_configurations","title":"<code>list_configurations()</code>  <code>classmethod</code>","text":"<p>Lists all YAML configuration files found in the configuration_path.</p>"},{"location":"reference/virtualfundbuilder/portfolio_interface/#mainsequence.virtualfundbuilder.portfolio_interface.PortfolioInterface.store_configuration","title":"<code>store_configuration(configuration_name=None)</code>","text":"<p>Stores the current configuration as a YAML file under the configuration_name</p>"},{"location":"reference/virtualfundbuilder/time_series/","title":"time_series","text":""},{"location":"reference/virtualfundbuilder/time_series/#mainsequence.virtualfundbuilder.time_series","title":"<code>mainsequence.virtualfundbuilder.time_series</code>","text":""},{"location":"reference/virtualfundbuilder/time_series/#mainsequence.virtualfundbuilder.time_series.PortfolioStrategy","title":"<code>PortfolioStrategy</code>","text":"<p>               Bases: <code>TimeSerie</code></p> <p>Manages the rebalancing of asset weights within a portfolio over time, considering transaction fees and rebalancing strategies. Calculates portfolio values and returns while accounting for execution-specific fees.</p>"},{"location":"reference/virtualfundbuilder/time_series/#mainsequence.virtualfundbuilder.time_series.PortfolioStrategy.__init__","title":"<code>__init__(portfolio_build_configuration, *args, **kwargs)</code>","text":"<p>Initializes the PortfolioStrategy class with the necessary configurations.</p> <p>Args:     portfolio_build_configuration (PortfolioBuildConfiguration): Configuration for building the portfolio,         including assets, execution parameters, and backtesting weights.     is_live (bool): Flag indicating whether the strategy is running in live mode.</p>"},{"location":"reference/virtualfundbuilder/time_series/#mainsequence.virtualfundbuilder.time_series.PortfolioStrategy.get_portfolio_about_text","title":"<code>get_portfolio_about_text()</code>","text":"<p>Constructs the portfolio about text.</p> <p>Returns:     str: Portfolio description.</p>"},{"location":"reference/virtualfundbuilder/time_series/#mainsequence.virtualfundbuilder.time_series.PortfolioStrategy.update","title":"<code>update(update_statistics)</code>","text":"<p>Updates the portfolio weights based on the latest available data.</p> <p>Args:     latest_value (datetime): The timestamp of the latest available data.</p> <p>Returns:     pd.DataFrame: Updated portfolio values with and without fees and returns.</p>"},{"location":"reference/virtualfundbuilder/time_series/#mainsequence.virtualfundbuilder.time_series.translate_to_pandas_freq","title":"<code>translate_to_pandas_freq(custom_freq)</code>","text":"<p>Translate custom datetime frequency strings to Pandas frequency strings.</p> <p>Args:     custom_freq (str): Custom frequency string (e.g., '1d', '1m', '1mo').</p> <p>Returns:     str: Pandas frequency string (e.g., 'D', 'T', 'M').</p>"},{"location":"reference/virtualfundbuilder/utils/","title":"utils","text":""},{"location":"reference/virtualfundbuilder/utils/#mainsequence.virtualfundbuilder.utils","title":"<code>mainsequence.virtualfundbuilder.utils</code>","text":""},{"location":"reference/virtualfundbuilder/utils/#mainsequence.virtualfundbuilder.utils.build_markdown","title":"<code>build_markdown(root_class, persist=True, elements_to_exclude=None, children_to_exclude=None)</code>","text":"<p>Builds standards portfolio configuration documentation Returns:</p>"},{"location":"reference/virtualfundbuilder/utils/#mainsequence.virtualfundbuilder.utils.build_rolling_regression_from_df","title":"<code>build_rolling_regression_from_df(x, y, rolling_window, column_names, threads=5)</code>","text":"<p>Builds rolling regressions for multiple variables in parallel using a specified rolling window.</p> <p>Args:     x (NDArray): An array of independent variables.     y (NDArray): An array of dependent variables.     rolling_window (int): The size of the rolling window for each regression.     column_names (list): Names of the dependent variables, used for labeling the output.     threads (int): Number of threads to use for parallel processing.</p> <p>Returns:     pd.DataFrame: A DataFrame containing the regression results for all variables.</p>"},{"location":"reference/virtualfundbuilder/utils/#mainsequence.virtualfundbuilder.utils.convert_to_binance_frequency","title":"<code>convert_to_binance_frequency(freq)</code>","text":"<p>Converts a generic frequency format to a format compatible with Binance API requirements.</p> <p>Args:     freq (str): The generic frequency format (e.g., '1m', '1h').</p> <p>Returns:     str: A frequency string adapted for Binance API (e.g., '1m', '1h').</p>"},{"location":"reference/virtualfundbuilder/utils/#mainsequence.virtualfundbuilder.utils.default_config_to_dict","title":"<code>default_config_to_dict(default_config)</code>","text":"<p>Convert the default configuration into a Python dictionary.</p> <p>Args:     default_config (dict): Default configuration from the VFB tool.</p> <p>Returns:     dict: Processed configuration dictionary.</p>"},{"location":"reference/virtualfundbuilder/utils/#mainsequence.virtualfundbuilder.utils.do_single_regression","title":"<code>do_single_regression(xx, XTX_inv_list, rolling_window, col_name, tmp_y, XTX_inv_diag)</code>","text":"<p>Performs a single regression analysis on a sliding window of data points for a specific column.</p> <p>Args:     xx (NDArray): An array of independent variable data with a sliding window applied.     XTX_inv_list (list): A list of precomputed inverse matrices of X.T @ X for each window.     rolling_window (int): The number of observations per window.     col_name (str): The name of the column being analyzed, used for labeling the output.     tmp_y (NDArray): The dependent variable data.     XTX_inv_diag (list): Diagonals of the precomputed inverse matrices, used for standard error calculation.</p> <p>Returns:     pd.DataFrame: A DataFrame containing the regression results with coefficients, R-squared, and t-statistics.</p>"},{"location":"reference/virtualfundbuilder/utils/#mainsequence.virtualfundbuilder.utils.filter_assets","title":"<code>filter_assets(df, asset_list)</code>","text":"<p>Filters a DataFrame to include only rows that have asset symbols contained in a given asset list.</p>"},{"location":"reference/virtualfundbuilder/utils/#mainsequence.virtualfundbuilder.utils.get_last_query_times_per_asset","title":"<code>get_last_query_times_per_asset(latest_value, metadata, asset_list, max_lookback_time, current_time, query_frequency)</code>","text":"<p>Determines the last query times for each asset based on metadata, a specified lookback limit, and a query frequency.</p> <p>Args:     latest_value (datetime|None): Timestamp of the last value in the database for each asset.     metadata (dict): Metadata containing previous query information for each coin.     asset_list (List[Asset]): List of asset objects to process.     max_lookback_time (datetime): Maximum historical lookback time allowed for the node.     current_time (datetime): Current time to consider for the calculations.     query_frequency (str): Query frequency as a pandas-parseable string to determine if new data needs fetching.</p> <p>Returns:     Dict[str, Optional[float]]: A dictionary mapping asset IDs to their respective last query times expressed in UNIX timestamp.</p>"},{"location":"reference/virtualfundbuilder/utils/#mainsequence.virtualfundbuilder.utils.object_signature_to_markdown","title":"<code>object_signature_to_markdown(root_dict, level=1, elements_to_exclude=None, children_to_exclude=None)</code>","text":"<p>Convert a nested dictionary structure into a markdown formatted string.</p> <p>Args: - root_dict (dict): The nested dictionary to convert. - level (int): The current markdown header level.</p> <p>Returns: - str: The markdown formatted string.</p>"},{"location":"reference/virtualfundbuilder/utils/#mainsequence.virtualfundbuilder.utils.object_signature_to_yaml","title":"<code>object_signature_to_yaml(default_config)</code>","text":"<p>Convert the default configuration dictionary to a YAML string.</p> <p>Args:     default_config (dict): Default configuration from the VFB tool.</p> <p>Returns:     str: YAML formatted string of the configuration.</p>"},{"location":"reference/virtualfundbuilder/utils/#mainsequence.virtualfundbuilder.utils.reindex_df","title":"<code>reindex_df(df, start_time, end_time, freq)</code>","text":"<p>Aligns two DataFrames on a new index based on a specified frequency, filling missing entries with the last known values.</p> <p>Args:     df (pd.DataFrame): Reference DataFrame used to determine the new index range.     start_time (datetime): start of index     end_time (datetime): end of index     freq (str): Frequency string (e.g., '1T' for one minute) to define the interval of the new index.</p> <p>Returns:     pd.DataFrame: The df_to_align DataFrame reindexed to match the new timeline and filled with forward filled values.</p>"},{"location":"reference/virtualfundbuilder/contrib/apps/generate_report/","title":"generate_report","text":""},{"location":"reference/virtualfundbuilder/contrib/apps/generate_report/#mainsequence.virtualfundbuilder.contrib.apps.generate_report","title":"<code>mainsequence.virtualfundbuilder.contrib.apps.generate_report</code>","text":""},{"location":"reference/virtualfundbuilder/contrib/apps/generate_report/#mainsequence.virtualfundbuilder.contrib.apps.generate_report.ExampleReportApp","title":"<code>ExampleReportApp</code>","text":"<p>               Bases: <code>BaseApp</code></p> <p>Minimal example of a 'ReportApp' that can: 1) Generate dummy data and create charts (line + heatmap). 2) Embed those charts into an HTML template. 3) Optionally export the HTML to PDF using WeasyPrint.</p>"},{"location":"reference/virtualfundbuilder/contrib/apps/generate_report/#mainsequence.virtualfundbuilder.contrib.apps.generate_report.ExampleReportApp.run","title":"<code>run()</code>","text":"<p>Generates an HTML report (and optional PDF) in a minimal, self-contained way.</p>"},{"location":"reference/virtualfundbuilder/contrib/apps/generate_report/#mainsequence.virtualfundbuilder.contrib.apps.generate_report.ExampleReportConfig","title":"<code>ExampleReportConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Pydantic model defining the parameters for report generation.</p>"},{"location":"reference/virtualfundbuilder/contrib/apps/generate_report/#mainsequence.virtualfundbuilder.contrib.apps.generate_report.example_data","title":"<code>example_data(assets)</code>","text":"<p>Fetch real data from the 'api_ts.get_df_between_dates()' call, then:   1) Build a time-series chart of 'Revenue' vs. time for each asset (ticker).   2) Build a correlation heatmap of 'Revenue' vs. 'EPS' for the latest time period.   3) Return both figures as Base64-encoded PNGs.</p>"},{"location":"reference/virtualfundbuilder/contrib/apps/load_external_portfolio/","title":"load_external_portfolio","text":""},{"location":"reference/virtualfundbuilder/contrib/apps/load_external_portfolio/#mainsequence.virtualfundbuilder.contrib.apps.load_external_portfolio","title":"<code>mainsequence.virtualfundbuilder.contrib.apps.load_external_portfolio</code>","text":""},{"location":"reference/virtualfundbuilder/contrib/apps/news_app/","title":"news_app","text":""},{"location":"reference/virtualfundbuilder/contrib/apps/news_app/#mainsequence.virtualfundbuilder.contrib.apps.news_app","title":"<code>mainsequence.virtualfundbuilder.contrib.apps.news_app</code>","text":""},{"location":"reference/virtualfundbuilder/contrib/apps/news_app/#mainsequence.virtualfundbuilder.contrib.apps.news_app.SentimentReport","title":"<code>SentimentReport</code>","text":"<p>               Bases: <code>BaseApp</code></p> <p>Generates an HTML report summarizing news sentiment and headlines for a list of stock tickers using data from Polygon.io. Additionally, fetches the first 100 words of each article (if possible) and generates a single combined summary displayed below the combined chart.</p>"},{"location":"reference/virtualfundbuilder/contrib/apps/news_app/#mainsequence.virtualfundbuilder.contrib.apps.news_app.SentimentReport.run","title":"<code>run()</code>","text":"<p>Orchestrates the report generation process:   1. Fetch data,   2. Create plots,   3. Attempt to retrieve article text (first 100 words) for all articles,   4. Generate a single combined summary from those snippets,   5. Render HTML,   6. Upload artifact.</p>"},{"location":"reference/virtualfundbuilder/contrib/apps/news_app/#mainsequence.virtualfundbuilder.contrib.apps.news_app.SentimentReportConfig","title":"<code>SentimentReportConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Pydantic model defining parameters for the Sentiment Report.</p>"},{"location":"reference/virtualfundbuilder/contrib/apps/portfolio_report_app/","title":"portfolio_report_app","text":""},{"location":"reference/virtualfundbuilder/contrib/apps/portfolio_report_app/#mainsequence.virtualfundbuilder.contrib.apps.portfolio_report_app","title":"<code>mainsequence.virtualfundbuilder.contrib.apps.portfolio_report_app</code>","text":""},{"location":"reference/virtualfundbuilder/contrib/apps/portfolio_table/","title":"portfolio_table","text":""},{"location":"reference/virtualfundbuilder/contrib/apps/portfolio_table/#mainsequence.virtualfundbuilder.contrib.apps.portfolio_table","title":"<code>mainsequence.virtualfundbuilder.contrib.apps.portfolio_table</code>","text":""},{"location":"reference/virtualfundbuilder/contrib/apps/run_named_portfolio/","title":"run_named_portfolio","text":""},{"location":"reference/virtualfundbuilder/contrib/apps/run_named_portfolio/#mainsequence.virtualfundbuilder.contrib.apps.run_named_portfolio","title":"<code>mainsequence.virtualfundbuilder.contrib.apps.run_named_portfolio</code>","text":""},{"location":"reference/virtualfundbuilder/contrib/apps/run_portfolio/","title":"run_portfolio","text":""},{"location":"reference/virtualfundbuilder/contrib/apps/run_portfolio/#mainsequence.virtualfundbuilder.contrib.apps.run_portfolio","title":"<code>mainsequence.virtualfundbuilder.contrib.apps.run_portfolio</code>","text":""},{"location":"reference/virtualfundbuilder/contrib/prices/time_series/","title":"time_series","text":""},{"location":"reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series","title":"<code>mainsequence.virtualfundbuilder.contrib.prices.time_series</code>","text":""},{"location":"reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.ExternalPrices","title":"<code>ExternalPrices</code>","text":"<p>               Bases: <code>TimeSerie</code></p>"},{"location":"reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.InterpolatedPrices","title":"<code>InterpolatedPrices</code>","text":"<p>               Bases: <code>TimeSerie</code></p> <p>Handles interpolated prices for assets.</p>"},{"location":"reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.InterpolatedPrices.__init__","title":"<code>__init__(asset_category_unique_id, bar_frequency_id, intraday_bar_interpolation_rule, upsample_frequency_id=None, asset_filter=None, local_kwargs_to_ignore=['asset_category_unique_id'], *args, **kwargs)</code>","text":"<p>Initializes the InterpolatedPrices object.</p>"},{"location":"reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.InterpolatedPrices.get_upsampled_data","title":"<code>get_upsampled_data(update_statistics)</code>","text":"<p>Main method to get upsampled data for prices.</p>"},{"location":"reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.InterpolatedPrices.update","title":"<code>update(update_statistics)</code>","text":"<p>Updates the series from the source based on the latest value.</p>"},{"location":"reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.InterpolatedPricesLive","title":"<code>InterpolatedPricesLive</code>","text":"<p>Handles interpolated prices for assets.</p>"},{"location":"reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.InterpolatedPricesLive.__init__","title":"<code>__init__(asset_list, bar_frequency_id, intraday_bar_interpolation_rule, upsample_frequency_id=None, local_kwargs_to_ignore=['asset_list'], *args, **kwargs)</code>","text":"<p>Initializes the InterpolatedPricesLive object.</p>"},{"location":"reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.InterpolatedPricesLive.get_earliest_value_for_initial_update","title":"<code>get_earliest_value_for_initial_update()</code>","text":"<p>Get the earliest value for the initial update.</p>"},{"location":"reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.InterpolatedPricesLive.update","title":"<code>update(update_statistics)</code>","text":"<p>Updates the series from the source based on the latest value.</p>"},{"location":"reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.UpsampleAndInterpolation","title":"<code>UpsampleAndInterpolation</code>","text":"<p>Handles upsampling and interpolation of bar data.</p>"},{"location":"reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.UpsampleAndInterpolation.get_interpolated_upsampled_bars","title":"<code>get_interpolated_upsampled_bars(calendar, tmp_df, last_observation=None)</code>","text":"<p>Gets interpolated and upsampled bars based on the given parameters. First interpolates the data to fill any gaps, then upsamples it to the desired frequency.</p> <p>Args:     calendar (str): Trading calendar for interpolation and upsampling.     tmp_df (pd.DataFrame): Dataframe containing the bars to be processed.     last_observation (Union[None, pd.Series], optional): Last observed data to fill gaps.</p> <p>Returns:     pd.DataFrame: Interpolated and upsampled bars dataframe.</p>"},{"location":"reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.UpsampleAndInterpolation.upsample_bars","title":"<code>upsample_bars(bars_df, upsample_frequency_obs, upsample_frequency_td, calendar, open_to_close_time_delta, is_portfolio=False)</code>  <code>staticmethod</code>","text":"<p>Upsamples the bars dataframe based on the given parameters. For example, it can convert 5-minute bars to 1-minute bars. Note that this method works on iloc as the underlying data should be already interpolated so should be completed</p> <p>Args:     bars_df (pd.DataFrame): The bars data to be upsampled.     upsample_frequency_obs (int): Frequency for upsampling.     upsample_frequency_td (object): Time delta for upsampling.     calendar (str): Trading calendar to account for trading hours.     open_to_close_time_delta (datetime.timedelta): Time delta between open and close.     is_portfolio (bool): Whether the data is for a portfolio or a single asset.</p> <p>Returns:     pd.DataFrame: The upsampled bars dataframe.</p>"},{"location":"reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.get_interpolated_prices_timeseries","title":"<code>get_interpolated_prices_timeseries(assets_configuration)</code>","text":"<p>Creates a Wrapper Timeseries for an asset configuration.</p>"},{"location":"reference/virtualfundbuilder/contrib/prices/time_series/#mainsequence.virtualfundbuilder.contrib.prices.time_series.interpolate_intraday_bars","title":"<code>interpolate_intraday_bars(bars_df, interpolation_rule, bars_frequency_min, calendar, last_observation=None)</code>","text":"<p>Interpolates intraday bars based on the given parameters. Fills in missing data points in intraday bar data in case of gaps.</p>"},{"location":"reference/virtualfundbuilder/contrib/prices/utils/","title":"utils","text":""},{"location":"reference/virtualfundbuilder/contrib/prices/utils/#mainsequence.virtualfundbuilder.contrib.prices.utils","title":"<code>mainsequence.virtualfundbuilder.contrib.prices.utils</code>","text":""},{"location":"reference/virtualfundbuilder/contrib/rebalance_strategies/rebalance_strategies/","title":"rebalance_strategies","text":""},{"location":"reference/virtualfundbuilder/contrib/rebalance_strategies/rebalance_strategies/#mainsequence.virtualfundbuilder.contrib.rebalance_strategies.rebalance_strategies","title":"<code>mainsequence.virtualfundbuilder.contrib.rebalance_strategies.rebalance_strategies</code>","text":""},{"location":"reference/virtualfundbuilder/contrib/rebalance_strategies/rebalance_strategies/#mainsequence.virtualfundbuilder.contrib.rebalance_strategies.rebalance_strategies.ImmediateSignal","title":"<code>ImmediateSignal</code>","text":"<p>               Bases: <code>RebalanceStrategyBase</code></p> <p>This rebalance strategy 'immediately' rebalances the weights. This is equivalent to just using the signal weights.</p>"},{"location":"reference/virtualfundbuilder/contrib/rebalance_strategies/rebalance_strategies/#mainsequence.virtualfundbuilder.contrib.rebalance_strategies.rebalance_strategies.ImmediateSignal.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"<p>Initialize the immediate rebalance strategy.</p>"},{"location":"reference/virtualfundbuilder/contrib/rebalance_strategies/rebalance_strategies/#mainsequence.virtualfundbuilder.contrib.rebalance_strategies.rebalance_strategies.TimeWeighted","title":"<code>TimeWeighted</code>","text":"<p>               Bases: <code>RebalanceStrategyBase</code></p>"},{"location":"reference/virtualfundbuilder/contrib/rebalance_strategies/rebalance_strategies/#mainsequence.virtualfundbuilder.contrib.rebalance_strategies.rebalance_strategies.TimeWeighted.__init__","title":"<code>__init__(rebalance_start='9:00', rebalance_end='23:00', rebalance_frequency_strategy=RebalanceFrequencyStrategyName.DAILY, *args, **kwargs)</code>","text":"<p>Initialize the time weighted rebalance strategy.</p> <p>Attributes:     rebalance_start (str): Start time for rebalancing, in \"hh:mm\" format.     rebalance_end (str): End time for rebalancing, in \"hh:mm\" format.     rebalance_frequency_strategy (RebalanceFrequencyStrategyName): Rebalance frequency.     max_percent_volume_in_bar (float): Maximum percentage of volume to trade in a bar.     total_notional (int): Initial notional invested in the strategy.</p>"},{"location":"reference/virtualfundbuilder/contrib/rebalance_strategies/rebalance_strategies/#mainsequence.virtualfundbuilder.contrib.rebalance_strategies.rebalance_strategies.TimeWeighted.apply_rebalance_logic","title":"<code>apply_rebalance_logic(last_rebalance_weights, start_date, end_date, signal_weights, prices_df, price_type)</code>","text":"<p>Rebalance weights are set at start_time of rebalancing</p> <p>Parameters:</p> Name Type Description Default <code>signal_weights</code> <code>DataFrame</code> required <code>rebalance_dates</code> required"},{"location":"reference/virtualfundbuilder/contrib/rebalance_strategies/rebalance_strategies/#mainsequence.virtualfundbuilder.contrib.rebalance_strategies.rebalance_strategies.VolumeParticipation","title":"<code>VolumeParticipation</code>","text":"<p>               Bases: <code>RebalanceStrategyBase</code></p> <p>This rebalance strategy implies volume participation with no market impact. i.e. that the execution price will be vwap and it will never execute more than max_percent_volume_in_bar</p>"},{"location":"reference/virtualfundbuilder/contrib/rebalance_strategies/rebalance_strategies/#mainsequence.virtualfundbuilder.contrib.rebalance_strategies.rebalance_strategies.VolumeParticipation.__init__","title":"<code>__init__(rebalance_start='9:00', rebalance_end='23:00', rebalance_frequency_strategy=RebalanceFrequencyStrategyName.DAILY, max_percent_volume_in_bar=0.01, total_notional=50000000, *args, **kwargs)</code>","text":"<p>Initializes the VolumeParticipation strategy.</p> <p>Attributes:     rebalance_start (str): Start time for rebalancing, in \"hh:mm\" format.     rebalance_end (str): End time for rebalancing, in \"hh:mm\" format.     rebalance_frequency_strategy (RebalanceFrequencyStrategyName): Rebalance frequency.     max_percent_volume_in_bar (float): Maximum percentage of volume to trade in a bar.     total_notional (int): Initial notional invested in the strategy.</p>"},{"location":"reference/virtualfundbuilder/contrib/rebalance_strategies/rebalance_strategies/#mainsequence.virtualfundbuilder.contrib.rebalance_strategies.rebalance_strategies.VolumeParticipation.apply_rebalance_logic","title":"<code>apply_rebalance_logic(last_rebalance_weights, start_date, end_date, signal_weights, prices_df, price_type)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>signal_weights</code> <code>DataFrame</code> required <code>rebalance_dates</code> required"},{"location":"reference/virtualfundbuilder/contrib/time_series/external_weights/","title":"external_weights","text":""},{"location":"reference/virtualfundbuilder/contrib/time_series/external_weights/#mainsequence.virtualfundbuilder.contrib.time_series.external_weights","title":"<code>mainsequence.virtualfundbuilder.contrib.time_series.external_weights</code>","text":""},{"location":"reference/virtualfundbuilder/contrib/time_series/import_valmer/","title":"import_valmer","text":""},{"location":"reference/virtualfundbuilder/contrib/time_series/import_valmer/#mainsequence.virtualfundbuilder.contrib.time_series.import_valmer","title":"<code>mainsequence.virtualfundbuilder.contrib.time_series.import_valmer</code>","text":""},{"location":"reference/virtualfundbuilder/contrib/time_series/intraday_trend/","title":"intraday_trend","text":""},{"location":"reference/virtualfundbuilder/contrib/time_series/intraday_trend/#mainsequence.virtualfundbuilder.contrib.time_series.intraday_trend","title":"<code>mainsequence.virtualfundbuilder.contrib.time_series.intraday_trend</code>","text":""},{"location":"reference/virtualfundbuilder/contrib/time_series/intraday_trend/#mainsequence.virtualfundbuilder.contrib.time_series.intraday_trend.IntradayTrend","title":"<code>IntradayTrend</code>","text":"<p>               Bases: <code>WeightsBase</code>, <code>TimeSerie</code></p>"},{"location":"reference/virtualfundbuilder/contrib/time_series/intraday_trend/#mainsequence.virtualfundbuilder.contrib.time_series.intraday_trend.IntradayTrend.__init__","title":"<code>__init__(calendar, source_frequency='1d', *args, **kwargs)</code>","text":"<p>Signal Weights</p> <p>Arguments     source_frequency (str): Frequency of market cap source</p>"},{"location":"reference/virtualfundbuilder/contrib/time_series/intraday_trend/#mainsequence.virtualfundbuilder.contrib.time_series.intraday_trend.IntradayTrend.update","title":"<code>update(latest_value, params_for_tree_run=None, *args, **kwargs)</code>","text":"<p>Updates the weights considering rebalance periods and execution frequency.</p> <p>Args:     latest_value Union[datetime, None]: The timestamp of the latest available data.</p>"},{"location":"reference/virtualfundbuilder/contrib/time_series/market_cap/","title":"market_cap","text":""},{"location":"reference/virtualfundbuilder/contrib/time_series/market_cap/#mainsequence.virtualfundbuilder.contrib.time_series.market_cap","title":"<code>mainsequence.virtualfundbuilder.contrib.time_series.market_cap</code>","text":""},{"location":"reference/virtualfundbuilder/contrib/time_series/market_cap/#mainsequence.virtualfundbuilder.contrib.time_series.market_cap.FixedWeights","title":"<code>FixedWeights</code>","text":"<p>               Bases: <code>WeightsBase</code>, <code>TimeSerie</code></p>"},{"location":"reference/virtualfundbuilder/contrib/time_series/market_cap/#mainsequence.virtualfundbuilder.contrib.time_series.market_cap.FixedWeights.__init__","title":"<code>__init__(asset_symbol_weights, *args, **kwargs)</code>","text":"<p>Args:     asset_symbol_weights (List[SymbolWeight]): List of SymbolWeights that map asset symbols to weights</p>"},{"location":"reference/virtualfundbuilder/contrib/time_series/market_cap/#mainsequence.virtualfundbuilder.contrib.time_series.market_cap.MarketCap","title":"<code>MarketCap</code>","text":"<p>               Bases: <code>WeightsBase</code>, <code>TimeSerie</code></p>"},{"location":"reference/virtualfundbuilder/contrib/time_series/market_cap/#mainsequence.virtualfundbuilder.contrib.time_series.market_cap.MarketCap.__init__","title":"<code>__init__(volatility_control_configuration, minimum_atvr_ratio=0.1, rolling_atvr_volume_windows=[60, 360], frequency_trading_percent=0.9, source_frequency='1d', min_number_of_assets=3, num_top_assets=None, *args, **kwargs)</code>","text":"<p>Signal Weights using weighting by Market Capitalization or Equal Weights</p> <p>Args:     source_frequency (str): Frequency of market cap source.     num_top_assets (Optional[int]): Number of largest assets by market cap to use for signals. Leave empty to include all assets.</p>"},{"location":"reference/virtualfundbuilder/contrib/time_series/market_cap/#mainsequence.virtualfundbuilder.contrib.time_series.market_cap.MarketCap.update","title":"<code>update(update_statistics)</code>","text":"<p>Args:     latest_value (Union[datetime, None]): The timestamp of the most recent data point.</p> <p>Returns:     DataFrame: A DataFrame containing updated signal weights, indexed by time and asset symbol.</p>"},{"location":"reference/virtualfundbuilder/contrib/time_series/mock_signal/","title":"mock_signal","text":""},{"location":"reference/virtualfundbuilder/contrib/time_series/mock_signal/#mainsequence.virtualfundbuilder.contrib.time_series.mock_signal","title":"<code>mainsequence.virtualfundbuilder.contrib.time_series.mock_signal</code>","text":""},{"location":"reference/virtualfundbuilder/contrib/time_series/mock_signal/#mainsequence.virtualfundbuilder.contrib.time_series.mock_signal.MockSignal","title":"<code>MockSignal</code>","text":"<p>               Bases: <code>WeightsBase</code>, <code>TimeSerie</code></p> <p>Mock Signal to test strategies. Creates a signal with long/short of ETH and BTC in frequency.</p>"},{"location":"reference/virtualfundbuilder/contrib/time_series/mock_signal/#mainsequence.virtualfundbuilder.contrib.time_series.mock_signal.MockSignal.update","title":"<code>update(latest_value, *args, **kwargs)</code>","text":"<p>Args:     latest_value (Union[datetime, None]): The timestamp of the most recent data point.</p> <p>Returns:     DataFrame: A DataFrame containing updated signal weights, indexed by time and asset symbol.</p>"},{"location":"reference/virtualfundbuilder/contrib/time_series/portfolio_replicator/","title":"portfolio_replicator","text":""},{"location":"reference/virtualfundbuilder/contrib/time_series/portfolio_replicator/#mainsequence.virtualfundbuilder.contrib.time_series.portfolio_replicator","title":"<code>mainsequence.virtualfundbuilder.contrib.time_series.portfolio_replicator</code>","text":""},{"location":"reference/virtualfundbuilder/contrib/time_series/portfolio_replicator/#mainsequence.virtualfundbuilder.contrib.time_series.portfolio_replicator.ETFReplicator","title":"<code>ETFReplicator</code>","text":"<p>               Bases: <code>WeightsBase</code>, <code>TimeSerie</code></p>"},{"location":"reference/virtualfundbuilder/contrib/time_series/portfolio_replicator/#mainsequence.virtualfundbuilder.contrib.time_series.portfolio_replicator.ETFReplicator.__init__","title":"<code>__init__(symbol_to_replicate, tracking_strategy_configuration, in_window=60, tracking_strategy=TrackingStrategy.LASSO, *args, **kwargs)</code>","text":"<p>Initialize the ETFReplicator.</p> <p>Args:     symbol_to_replicate (str): Symbol of the asset to replicate. Must be included in the signals asset universe.     tracking_strategy_configuration (TrackingStrategyConfiguration): Configuration parameters for the tracking strategy.     in_window (int, optional): The size of the rolling window for regression. Defaults to 60.     tracking_strategy (TrackingStrategy, optional): The regression strategy to use for tracking. Defaults to TrackingStrategy.LASSO.     args: Variable length argument list.     *kwargs: Arbitrary keyword arguments.</p>"},{"location":"reference/virtualfundbuilder/contrib/time_series/portfolio_replicator/#mainsequence.virtualfundbuilder.contrib.time_series.portfolio_replicator.rolling_elastic_net","title":"<code>rolling_elastic_net(y, X, window, alpha=1.0, l1_ratio=0.5)</code>","text":"<p>Perform rolling Elastic Net regression and return the coefficients.</p> <p>Parameters:     y (pd.Series): Target variable.     X (pd.DataFrame): Feature variables.     window (int): Size of the rolling window.     alpha (float, optional): Regularization strength. Defaults to 1.0.     l1_ratio (float, optional): The ElasticNet mixing parameter. Defaults to 0.5.</p> <p>Returns:     np.ndarray: Array of coefficients for each rolling window.</p>"},{"location":"reference/virtualfundbuilder/contrib/time_series/portfolio_replicator/#mainsequence.virtualfundbuilder.contrib.time_series.portfolio_replicator.rolling_lasso_regression","title":"<code>rolling_lasso_regression(y, X, window, alpha=1.0, *args, **kwargs)</code>","text":"<p>Perform rolling Lasso regression and return the coefficients.</p> <p>Parameters:     y (pd.Series): Target variable.     X (pd.DataFrame): Feature variables.     window (int): Size of the rolling window.     alpha (float, optional): Regularization strength. Defaults to 1.0.</p> <p>Returns:     list: List of DataFrames containing the coefficients for each rolling window.</p>"},{"location":"reference/virtualfundbuilder/contrib/time_series/portfolio_replicator/#mainsequence.virtualfundbuilder.contrib.time_series.portfolio_replicator.rolling_pca_betas","title":"<code>rolling_pca_betas(X, window, n_components=5, *args, **kwargs)</code>","text":"<p>Perform rolling PCA and return the betas (normalized principal component weights).</p> <p>Parameters:     X (pd.DataFrame): DataFrame of stock returns or feature data (rows are time, columns are assets).     window (int): The size of the rolling window.     n_components (int, optional): The number of principal components to extract. Defaults to 5.</p> <p>Returns:     np.ndarray: An array of normalized PCA weights for each rolling window.</p>"},{"location":"reference/virtualfundbuilder/contrib/time_series/sentiment_signal/","title":"sentiment_signal","text":""},{"location":"reference/virtualfundbuilder/contrib/time_series/sentiment_signal/#mainsequence.virtualfundbuilder.contrib.time_series.sentiment_signal","title":"<code>mainsequence.virtualfundbuilder.contrib.time_series.sentiment_signal</code>","text":""},{"location":"reference/virtualfundbuilder/contrib/time_series/sentiment_signal/#mainsequence.virtualfundbuilder.contrib.time_series.sentiment_signal.SentimentSignal","title":"<code>SentimentSignal</code>","text":"<p>               Bases: <code>WeightsBase</code>, <code>TimeSerie</code></p> <p>Calculates portfolio weights based on aggregated news sentiment from Polygon.io. Weights are proportional to a score calculated as (Positive Articles - Negative Articles). Assets with insufficient recent news sentiment are excluded. This class acts as a TimeSerie node providing daily sentiment-based signal weights, starting from OFFSET_START on the first run.</p>"},{"location":"reference/virtualfundbuilder/contrib/time_series/sentiment_signal/#mainsequence.virtualfundbuilder.contrib.time_series.sentiment_signal.SentimentSignal.maximum_forward_fill","title":"<code>maximum_forward_fill()</code>","text":"<p>Signal is daily, so valid for slightly less than a day.</p>"},{"location":"reference/virtualfundbuilder/contrib/time_series/sentiment_signal/#mainsequence.virtualfundbuilder.contrib.time_series.sentiment_signal.SentimentSignal.update","title":"<code>update(update_statistics)</code>","text":"<p>Calculates daily sentiment weights for the required date range.</p>"},{"location":"reference/virtualfundbuilder/portfolio_templates/crypto_index_template/","title":"crypto_index_template","text":""},{"location":"reference/virtualfundbuilder/portfolio_templates/crypto_index_template/#mainsequence.virtualfundbuilder.portfolio_templates.crypto_index_template","title":"<code>mainsequence.virtualfundbuilder.portfolio_templates.crypto_index_template</code>","text":""},{"location":"reference/virtualfundbuilder/portfolio_templates/momentum_portfolio/","title":"momentum_portfolio","text":""},{"location":"reference/virtualfundbuilder/portfolio_templates/momentum_portfolio/#mainsequence.virtualfundbuilder.portfolio_templates.momentum_portfolio","title":"<code>mainsequence.virtualfundbuilder.portfolio_templates.momentum_portfolio</code>","text":""},{"location":"reference/virtualfundbuilder/resource_factory/app_factory/","title":"app_factory","text":""},{"location":"reference/virtualfundbuilder/resource_factory/app_factory/#mainsequence.virtualfundbuilder.resource_factory.app_factory","title":"<code>mainsequence.virtualfundbuilder.resource_factory.app_factory</code>","text":""},{"location":"reference/virtualfundbuilder/resource_factory/app_factory/#mainsequence.virtualfundbuilder.resource_factory.app_factory.HtmlApp","title":"<code>HtmlApp</code>","text":"<p>               Bases: <code>BaseApp</code></p> <p>A base class for apps that generate HTML output.</p>"},{"location":"reference/virtualfundbuilder/resource_factory/app_factory/#mainsequence.virtualfundbuilder.resource_factory.app_factory.HtmlApp.__init_subclass__","title":"<code>__init_subclass__(**kwargs)</code>","text":"<p>Wraps the subclass's <code>run</code> method to add validation and saving logic.</p>"},{"location":"reference/virtualfundbuilder/resource_factory/app_factory/#mainsequence.virtualfundbuilder.resource_factory.app_factory.HtmlApp.run","title":"<code>run()</code>  <code>abstractmethod</code>","text":"<p>This method should be implemented by subclasses to return HTML content as a string. The base class will handle saving the output.</p>"},{"location":"reference/virtualfundbuilder/resource_factory/app_factory/#mainsequence.virtualfundbuilder.resource_factory.app_factory.register_app","title":"<code>register_app(name=None, register_in_agent=True)</code>","text":"<p>Decorator to register a model class in the factory. If <code>name</code> is not provided, the class's name is used as the key.</p>"},{"location":"reference/virtualfundbuilder/resource_factory/base_factory/","title":"base_factory","text":""},{"location":"reference/virtualfundbuilder/resource_factory/base_factory/#mainsequence.virtualfundbuilder.resource_factory.base_factory","title":"<code>mainsequence.virtualfundbuilder.resource_factory.base_factory</code>","text":""},{"location":"reference/virtualfundbuilder/resource_factory/base_factory/#mainsequence.virtualfundbuilder.resource_factory.base_factory.BaseResource","title":"<code>BaseResource</code>","text":""},{"location":"reference/virtualfundbuilder/resource_factory/base_factory/#mainsequence.virtualfundbuilder.resource_factory.base_factory.BaseResource.get_source_notebook","title":"<code>get_source_notebook()</code>  <code>classmethod</code>","text":"<p>Retrieve the exact source code of the class from notebook cells.</p>"},{"location":"reference/virtualfundbuilder/resource_factory/base_factory/#mainsequence.virtualfundbuilder.resource_factory.base_factory.insert_in_registry","title":"<code>insert_in_registry(registry, cls, register_in_agent, name=None, attributes=None)</code>","text":"<p>helper for strategy decorators</p>"},{"location":"reference/virtualfundbuilder/resource_factory/base_factory/#mainsequence.virtualfundbuilder.resource_factory.base_factory.send_resource_to_backend","title":"<code>send_resource_to_backend(resource_class, attributes=None)</code>","text":"<p>Helper function to send the strategy payload to the registry. Parses the arguments of the classes init function and the init functions of the parent classes</p>"},{"location":"reference/virtualfundbuilder/resource_factory/rebalance_factory/","title":"rebalance_factory","text":""},{"location":"reference/virtualfundbuilder/resource_factory/rebalance_factory/#mainsequence.virtualfundbuilder.resource_factory.rebalance_factory","title":"<code>mainsequence.virtualfundbuilder.resource_factory.rebalance_factory</code>","text":""},{"location":"reference/virtualfundbuilder/resource_factory/rebalance_factory/#mainsequence.virtualfundbuilder.resource_factory.rebalance_factory.RebalanceStrategyBase","title":"<code>RebalanceStrategyBase</code>","text":"<p>               Bases: <code>BaseResource</code></p>"},{"location":"reference/virtualfundbuilder/resource_factory/rebalance_factory/#mainsequence.virtualfundbuilder.resource_factory.rebalance_factory.RebalanceStrategyBase.calendar","title":"<code>calendar</code>  <code>property</code>","text":"<p>Workaround due to error when pickleing the calendar</p>"},{"location":"reference/virtualfundbuilder/resource_factory/rebalance_factory/#mainsequence.virtualfundbuilder.resource_factory.rebalance_factory.RebalanceStrategyBase.__init__","title":"<code>__init__(calendar='24/7', *args, **kwargs)</code>","text":"<p>Args:     calendar (str): Trading calendar. The string should must be valid calendar from the pandas_market_calendars (like '24/7' or 'NYSE')</p>"},{"location":"reference/virtualfundbuilder/resource_factory/rebalance_factory/#mainsequence.virtualfundbuilder.resource_factory.rebalance_factory.RebalanceStrategyBase.calculate_rebalance_dates","title":"<code>calculate_rebalance_dates(start, end, calendar, rebalance_frequency_strategy)</code>","text":"<p>Determines the dates on which portfolio rebalancing should be executed based on the specified rebalancing strategy. This calculation takes into account the start time of the rebalancing window and the execution frequency.</p> <p>Args:     start (pd.DataFrame): A datetime containing the start time</p> <p>Returns:     pd.DatetimeIndex: A DatetimeIndex containing all the dates when rebalancing should occur.</p>"},{"location":"reference/virtualfundbuilder/resource_factory/rebalance_factory/#mainsequence.virtualfundbuilder.resource_factory.rebalance_factory.register_rebalance_class","title":"<code>register_rebalance_class(name=None, register_in_agent=True)</code>","text":"<p>Decorator to register a model class in the factory. If <code>name</code> is not provided, the class's name is used as the key.</p>"},{"location":"reference/virtualfundbuilder/resource_factory/signal_factory/","title":"signal_factory","text":""},{"location":"reference/virtualfundbuilder/resource_factory/signal_factory/#mainsequence.virtualfundbuilder.resource_factory.signal_factory","title":"<code>mainsequence.virtualfundbuilder.resource_factory.signal_factory</code>","text":""},{"location":"reference/virtualfundbuilder/resource_factory/signal_factory/#mainsequence.virtualfundbuilder.resource_factory.signal_factory.SignalWeightsFactory","title":"<code>SignalWeightsFactory</code>","text":"<p>               Bases: <code>BaseFactory</code></p>"},{"location":"reference/virtualfundbuilder/resource_factory/signal_factory/#mainsequence.virtualfundbuilder.resource_factory.signal_factory.SignalWeightsFactory.get_signal_weights_strategies","title":"<code>get_signal_weights_strategies()</code>  <code>staticmethod</code>","text":"<p>Scans the given directory for Python files, imports the classes, and returns all classes that are subclasses of WeightsBase.</p>"},{"location":"reference/virtualfundbuilder/resource_factory/signal_factory/#mainsequence.virtualfundbuilder.resource_factory.signal_factory.SignalWeightsFactory.get_signal_weights_strategy","title":"<code>get_signal_weights_strategy(signal_weights_name)</code>  <code>staticmethod</code>","text":"<p>Creates an instance of the appropriate SignalWeights class based on the provided name.</p>"},{"location":"reference/virtualfundbuilder/resource_factory/signal_factory/#mainsequence.virtualfundbuilder.resource_factory.signal_factory.WeightsBase","title":"<code>WeightsBase</code>","text":"<p>               Bases: <code>BaseResource</code></p>"},{"location":"reference/virtualfundbuilder/resource_factory/signal_factory/#mainsequence.virtualfundbuilder.resource_factory.signal_factory.WeightsBase.__init__","title":"<code>__init__(signal_assets_configuration, *args, **kwargs)</code>","text":"<p>Base Class for all signal weights</p> <p>Attributes:     assets_configuration (AssetsConfiguration): Configuration details for signal assets.</p>"},{"location":"reference/virtualfundbuilder/resource_factory/signal_factory/#mainsequence.virtualfundbuilder.resource_factory.signal_factory.WeightsBase.interpolate_index","title":"<code>interpolate_index(new_index)</code>","text":"<p>Get interpolated weights for a time index. Weights are only valid for a certain time, therefore forward fill is limited. Especially needed for gaps within the weights</p>"},{"location":"reference/virtualfundbuilder/resource_factory/signal_factory/#mainsequence.virtualfundbuilder.resource_factory.signal_factory.register_signal_class","title":"<code>register_signal_class(name=None, register_in_agent=True)</code>","text":"<p>Decorator to register a model class in the factory. If <code>name</code> is not provided, the class's name is used as the key.</p>"},{"location":"tdag/getting_started/","title":"Welcome to TDAG","text":"<p>TDAG  is a cutting-edge, graph-based library designed specifically for building and managing time-series data pipelines.  With TDAG, you can create automated, time-based dependency structures that are robust, efficient, and ready for real-world, scalable applications.</p> <p>At its core, TDAG leverages the power of DAGs (Directed Acyclic Graphs). A DAG is a graph with nodes connected by edges, where the edges have a direction, and no cycles (loops) exist. In simpler terms,  this structure allows data to flow in one direction without any feedback loops, which is essential for building reliable and predictable data pipelines.  The \"time-directed\" aspect in TDAG makes it ideal for handling time-sensitive operations, ensuring that tasks occur in the correct sequence.</p>"},{"location":"tdag/getting_started/#why-tdag","title":"Why TDAG?","text":"<p>With TDAG, you can automatically create time-based data pipelines that handle complex dependencies. The library provides features such as automatic hashing, seamless scheduling integration, and a structured approach that enhances the reliability and scalability of your pipelines.</p>"},{"location":"tdag/getting_started/#key-features","title":"Key Features:","text":"<ul> <li>Automated Time-Based Pipelines: TDAG allows you to easily build data pipelines where tasks are executed in time order, respecting dependencies.</li> <li>Built-in Scheduling and Hashing: Pipelines are automatically hashed and scheduled for efficient execution.</li> <li>Scalable &amp; Robust: Whether you're working on small datasets or massive time-series data flows, TDAG scales to meet your needs while ensuring the entire process is fault-tolerant and robust.</li> </ul>"},{"location":"tdag/getting_started/#use-case-investment-strategies-and-beyond","title":"Use Case: Investment Strategies and Beyond","text":"<p>One of TDAG's main use cases is transforming raw financial data into actionable insights, such as investment strategy predictions or portfolio weights. TDAG simplifies the process of managing complex time-based operations in financial modeling, helping you move from data to decisions effortlessly.</p> <p>However, TDAG is not just limited to finance! It's perfect for any application requiring time-sensitive data pipelines, particularly in live and online modes where real-time decision-making is crucial. For example, TDAG can be used in online training of machine learning models, where time-based data flow and immediate processing are essential for model accuracy and performance.</p>"},{"location":"tdag/getting_started/#why-use-a-dag","title":"Why Use a DAG?","text":"<p>A DAG (Directed Acyclic Graph) is a graph structure where: 1. Directed: Each connection (edge) between nodes points in a specific direction, indicating the flow of data or dependencies. 2. Acyclic: There are no cycles, meaning that no node in the graph can loop back to itself. This is critical for tasks that need to happen in a specific sequence.</p> <p>In the context of TDAG, a DAG ensures that all data processing happens in the correct order, and no task is repeated or stuck in a loop. When applied to time-series data pipelines, this means that your data will always flow from the past to the present in a structured, predictable manner, ensuring that dependencies are handled properly and efficiently.</p>"},{"location":"tdag/getting_started/#the-power-of-tdag","title":"The Power of TDAG","text":"<p>Whether you\u2019re managing financial data pipelines or real-time machine learning workflows, TDAG is designed to give you the control, scalability, and reliability you need to handle complex, time-sensitive data with ease.</p> <p>Start by exploring our Getting Started Tutorial or jump into the Code Reference if you're already familiar with TDAG.</p> <p>If you are looking for more resources you can also access our vidoe tutorials on TDAG here:</p>"},{"location":"tdag/orchestration_and_monitoring/","title":"Orchestration &amp; Monitoring","text":"<p>Once your time series pipelines are built, TDAG offers multiple modes for executing and monitoring their updates efficiently. These modes support local development, debugging, and scalable production deployments.</p>"},{"location":"tdag/orchestration_and_monitoring/#execution-modes","title":"Execution Modes","text":"<ol> <li>Local Storage Mode  We can run our pipeline locally using a local database. This mode is ideal for fast prototyping or parameter sweeps (e.g., hyperparameter tuning).  It is faster than the other modes as it does not perform costly remote database writes.</li> <li>Debug Mode: We run our pipelines for one loop as a single process, persisting and reading from our remote database. This is helpful for debugging and development before moving to production.</li> <li>Live Mode: We run our pipelines as a separate distributed process via a Ray cluster. This mode is designed for production use.</li> </ol>"},{"location":"tdag/orchestration_and_monitoring/#running-time-series-in-local-storage-mode","title":"Running Time Series in Local Storage Mode","text":"<p>For quick local development and testing of a new time series we can use the local storage mode to run the time serie using <pre><code>SessionDataSource.set_local_db()\ntime_series = CryptoPortfolioTimeSerie()\nresult = time_series.run()\n</code></pre></p> <p>A classic use-case is to see how a strategy performs with different parameters  by running it in a loop. Here we have a Long Short portfolio and we want to observe the hyperspace of portfolios generated by several combinations of parameters. In this case, we don\u2019t want to make time-consuming writes of the resulting data to the remote database. Instead, we work with a local database directly on the host.</p> <p>The host database is a database automatically created on your computer.  On the platform, you can see your local database with the name <code>DUCK_DB_&lt;HOST_IDENTIFIER&gt;</code>. The name is printed when you set the local database in your script and it will stay the same if executed on the same device. The LocalTimeSeries object is still created and accessible on the Platform, and can be identified by the host database name. You will however not be able to see the database table on the LocalTimeSeries page. </p> <p>Let\u2019s look at a code example to understand it better.</p> <pre><code>SessionDataSource.set_local_db()\ntotal_return = []\nfor rolling_window in range(60, 30 * 24, 20):\n    for lasso_alpha in [1, 1e-2, 1e-3, 1e-4, 1e-5]:\n        long_short_portfolio = LongShortPortfolio(\n           ticker_long=\"XLF\", \n           ticker_short=\"XLE\",\n           long_rolling_windows=[long_rollling_window],\n           short_rolling_windows=[100, 200], \n           lasso_alpha=1e-2\n        )\n        portfolio_df = long_short_portfolio.run()\n        total_return.append(long_short_portfolio[\"portfolio\"].iloc[-1] - 1)\n</code></pre>"},{"location":"tdag/orchestration_and_monitoring/#running-time-series-in-livedebug-mode","title":"Running Time Series in Live/Debug mode","text":"<p>When we want to move our time series to production, we can execute backend system so it can be distributed and the data stored in the shared database for reusability.  This is done using the .run() method.  <pre><code>time_series = CryptoPortfolioTimeSerie()\ntime_series.run(debug_mode=False)\n</code></pre></p> <p>We can use additional parameters to specify how the timeseries should run.</p> <ul> <li><code>debug_mode</code>: Setting this to True runs the Pipeline in Debug Mode, otherwise in Live Mode.</li> <li><code>update_tree</code>: A boolean variable whether to update all the dependencies of the time series or only the called time series. This is helpful if this time series has many dependencies and we are only interested in the final time serie.</li> <li><code>update_only_tree</code>: A boolean variable whether to update only the dependencies of the time series.</li> <li><code>remote_scheduler</code>: An optional custom scheduler to run the time series. If no remote_scheduler is provided, a default scheduler is created automatically.</li> <li><code>force_update</code>: A scheduler manages at which times to run the time series. This boolean variable is used to ignore the scheduler.</li> </ul> <p>For example, to run this time series immediately in debug mode and only update the called time series, we can use: <pre><code>time_series = CryptoPortfolioTimeSerie()\ntime_series.run(debug_mode=True, update_tree=False, force_update=True)\n</code></pre></p>"},{"location":"tdag/time_series_fundamentals/","title":"Time Series Fundamentals in TDAG","text":"<p>TDAG's core revolves around the concept of time series, encapsulated in the powerful <code>TimeSerie</code> class. Each <code>TimeSerie</code> object manages the process of updating data, reflecting the most current available information. It interacts seamlessly with databases and maintains a robust internal state, supporting efficient data pipelines.</p>"},{"location":"tdag/time_series_fundamentals/#understanding-the-update-process","title":"Understanding the Update Process","text":"<p>In TDAG, updating involves:</p> <ul> <li>Updating DataRepositories: Stores the generated data from the update process.</li> <li>Updating ORM: Manages the internal state of the data and the pipeline.</li> </ul> <p>The following diagram illustrates these interactions:</p> <pre><code>flowchart TD\n    subgraph TDAG_System[TDAG Framework]\n         TimeSerieConstructor[\"TimeSerie.__init__(*args, **kwargs)\"] --&gt;|Defines| TimeSerie[\"TimeSerie.update(latest_value)\"]\n    end\n\n    subgraph DataRepositories[\"Data Repositories\"]\n        DB[\"TimeScaleDB\"]\n        DataLake[\"DataLake\"]\n    end\n\n    subgraph ORM[\"TDAG ORM\"]\n        LocalTimeSerie[\"LocalTimeSerie (local_hash_id)\"]  --&gt;|View of Table| DynamicTable[\"DynamicTable (hash_id)\"]\n    end\n\n    TimeSerie --&gt;|Updates| DataRepositories\n    TimeSerie --&gt;|Updates| ORM\n     ORM --&gt;|Manages state of| DataRepositories\n    ORM --&gt;|Updates| DynamicTable\n    ORM --&gt;|Updates| LocalTimeSerie\n</code></pre>"},{"location":"tdag/time_series_fundamentals/#initializing-a-timeserie","title":"Initializing a TimeSerie","text":"<p>The constructor (<code>__init__</code>) defines the initial state and configuration:</p> <pre><code>def __init__(self, *args, **kwargs):\n    ...\n</code></pre>"},{"location":"tdag/time_series_fundamentals/#hashing-mechanism","title":"Hashing Mechanism","text":"<p>The constructor arguments create two essential hashes that facilitate efficient management of data and updates:</p> <ul> <li> <p><code>hash_id</code>: Used to uniquely identify data repositories linked to a specific <code>TimeSerie</code>. This ensures different configurations or datasets are appropriately separated or merged based on their content rather than their names alone.</p> </li> <li> <p><code>local_hash_id</code>: Used to uniquely identify the specific update processes. It enables TDAG to recognize distinct update routines and manage their internal state independently, crucial for parallel updates or workflows that reuse identical data structures with different update logic.</p> </li> </ul>"},{"location":"tdag/time_series_fundamentals/#special-constructor-arguments","title":"Special Constructor Arguments","text":"<p>Some arguments are explicitly excluded from hashing:</p> <ul> <li><code>init_meta</code>: Arbitrary metadata used during initialization for convenience and clarity. excluded from hashing</li> <li><code>build_meta_data</code>: Metadata recoverable anytime and editable from the GUI; useful for dynamic or interactive data handling. excluded from hashing</li> <li><code>local_kwargs_to_ignore</code>: Arguments excluded from the <code>hash_id</code> calculation but included in <code>local_hash_id</code>, allowing flexibility in differentiating between datasets and update processes.</li> </ul>"},{"location":"tdag/time_series_fundamentals/#post-init-decorator-usage","title":"Post Init Decorator Usage","text":"<p>Always decorate the constructor to ensure proper integration with TDAG.  This decorator is responsible for executing all synchronization routines necessary to initialize the TDAG engine.</p> <pre><code>from mainsequence.tdag import TimeSerie\n\nclass NewTimeSeries(TimeSerie):\n\n    @TimeSerie._post_init_routines\n    def __init__(self,*args,**kwargs):\n        ...\n</code></pre>"},{"location":"tdag/time_series_fundamentals/#managing-dependencies-with-introspection","title":"Managing Dependencies with Introspection","text":"<p>TDAG simplifies dependency management by automatically detecting dependencies through introspection. Rather than manually managing complex dependency trees, developers only need to explicitly declare direct dependencies as class attributes. TDAG then builds the full dependency graph internally.</p> <p>Example:</p> <pre><code>class NewTimeSeries(TimeSerie):\n    @TimeSerie._post_init_routines\n    def __init__(self, asset_symbols: List[str], *args, **kwargs):\n        # Explicitly declare direct dependency\n        self.prices_time_serie = PricesTimeSerie(asset_symbols=asset_symbols)\n</code></pre> <p>TDAG automatically understands that <code>NewTimeSeries</code> depends on <code>PricesTimeSerie</code> and manages updates accordingly.</p>"},{"location":"tdag/time_series_fundamentals/#state-persistence-with-pickles","title":"State Persistence with Pickles","text":"<p>TDAG pickles each <code>TimeSerie</code> after its first initialization, significantly reducing load times in future updates. The pickle state is automatically updated when the underlying code changes, ensuring consistency and efficiency.</p>"},{"location":"tdag/time_series_fundamentals/#updating-a-timeserie","title":"Updating a TimeSerie","text":"<p>The <code>update</code> method performs all the necessary logic to fetch, calculate, and store new data points in the series. It uses a parameter called <code>latest_value</code>, representing the most recent timestamp from previous updates. If <code>latest_value</code> is <code>None</code>, the series has never been updated successfully before. Otherwise, it continues from the given point.</p> <p>Example:</p> <pre><code>def update(self, update_statistics: DataUpdates, *args, **kwargs) -&gt; pd.DataFrame:\n    # Perform update logic based on latest_value\n    new_data = self.fetch_new_data_since(latest_value)\n    processed_data = self.calculate_metrics(new_data)\n    return processed_data\n</code></pre> <p>Returned DataFrame requirements:</p> <ul> <li>Unidimensional index: <code>DatetimeIndex</code> in <code>pytz.utc</code>.</li> <li>Multidimensional index: two dimensions: <code>time_index</code> in <code>pytz.utc</code>., <code>unique_identifier</code>.</li> </ul>"}]}